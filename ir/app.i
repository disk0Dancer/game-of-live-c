# 1 "sim_app/app.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 424 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "sim_app/app.c" 2
# 1 "sim_app/sim.h" 1






void simFlush();
void simClear(int argb);
void simPutPixel(int x, int y, int argb);
int simRand();
void simInit();
void simExit();
void app();
# 2 "sim_app/app.c" 2
# 1 "/opt/homebrew/include/SDL2/SDL.h" 1
# 31 "/opt/homebrew/include/SDL2/SDL.h"
# 1 "/opt/homebrew/include/SDL2/SDL_main.h" 1
# 25 "/opt/homebrew/include/SDL2/SDL_main.h"
# 1 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
# 1 "/opt/homebrew/include/SDL2/SDL_config.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_config.h"
# 1 "/opt/homebrew/include/SDL2/SDL_platform.h" 1
# 75 "/opt/homebrew/include/SDL2/SDL_platform.h"
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityMacros.h" 1 3 4
# 89 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityMacros.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityVersions.h" 1 3 4
# 90 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityMacros.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/TargetConditionals.h" 1 3 4
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityMacros.h" 2 3 4
# 207 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityMacros.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/Availability.h" 1 3 4
# 177 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/Availability.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityInternal.h" 1 3 4
# 178 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/Availability.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityInternalLegacy.h" 1 3 4
# 179 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/Availability.h" 2 3 4
# 208 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityMacros.h" 2 3 4
# 76 "/opt/homebrew/include/SDL2/SDL_platform.h" 2
# 243 "/opt/homebrew/include/SDL2/SDL_platform.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 244 "/opt/homebrew/include/SDL2/SDL_platform.h" 2
# 265 "/opt/homebrew/include/SDL2/SDL_platform.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetPlatform (void);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 272 "/opt/homebrew/include/SDL2/SDL_platform.h" 2
# 34 "/opt/homebrew/include/SDL2/SDL_config.h" 2
# 34 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 1 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/appleapiopts.h" 1 3 4
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 1 3 4
# 782 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 783 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 2 3 4
# 848 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_posix_availability.h" 1 3 4
# 849 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 2 3 4
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 1 3 4
# 49 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_types.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;




typedef long int __darwin_ptrdiff_t;
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_types.h" 3 4
typedef long unsigned int __darwin_size_t;







typedef __builtin_va_list __darwin_va_list;







typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h" 3 4
typedef signed char int8_t;
# 56 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h" 3 4
typedef short int16_t;
# 57 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h" 3 4
typedef int int32_t;
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h" 3 4
typedef long long int64_t;
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h" 3 4
typedef unsigned char u_int8_t;
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h" 3 4
typedef unsigned short u_int16_t;
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h" 3 4
typedef unsigned int u_int32_t;
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h" 3 4
typedef unsigned long long u_int64_t;
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4


typedef int64_t register_t;




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/_types.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h" 2 3 4

typedef __darwin_intptr_t intptr_t;
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h" 3 4
typedef unsigned long uintptr_t;
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4




typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;
# 105 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/types.h" 3 4
typedef u_int64_t syscall_arg_t;
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h" 2 3 4
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h" 1 3 4
# 57 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h" 3 4
struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h" 2 3 4
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/endian.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/endian.h" 1 3 4
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 1 3 4
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/_endian.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_endian.h" 1 3 4
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/__endian.h" 1 3 4
# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_endian.h" 2 3 4
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/_endian.h" 2 3 4
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 2 3 4
# 131 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/arm/_OSByteOrder.h" 1 3 4
# 48 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/arm/_OSByteOrder.h" 3 4
static inline
__uint16_t
_OSSwapInt16(
 __uint16_t _data
 )
{

 return (__uint16_t)(_data << 8 | _data >> 8);
}

static inline
__uint32_t
_OSSwapInt32(
 __uint32_t _data
 )
{

 _data = __builtin_bswap32(_data);





 return _data;
}

static inline
__uint64_t
_OSSwapInt64(
 __uint64_t _data
 )
{

 return __builtin_bswap64(_data);
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/arm/_OSByteOrder.h" 3 4
}
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h" 2 3 4
# 132 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 2 3 4
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/endian.h" 2 3 4
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/endian.h" 2 3 4
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_char.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_char.h" 3 4
typedef unsigned char u_char;
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_short.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_short.h" 3 4
typedef unsigned short u_short;
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int.h" 3 4
typedef unsigned int u_int;
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

typedef unsigned long u_long;


typedef unsigned short ushort;

typedef unsigned int uint;




typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_caddr_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_caddr_t.h" 3 4
typedef char * caddr_t;
# 103 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

typedef int32_t daddr_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_dev_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_dev_t.h" 3 4
typedef __darwin_dev_t dev_t;
# 107 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

typedef u_int32_t fixpt_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blkcnt_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blkcnt_t.h" 3 4
typedef __darwin_blkcnt_t blkcnt_t;
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blksize_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blksize_t.h" 3 4
typedef __darwin_blksize_t blksize_t;
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_gid_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_gid_t.h" 3 4
typedef __darwin_gid_t gid_t;
# 113 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_addr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_addr_t.h" 3 4
typedef __uint32_t in_addr_t;
# 114 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_port_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_port_t.h" 3 4
typedef __uint16_t in_port_t;
# 115 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino_t.h" 3 4
typedef __darwin_ino_t ino_t;
# 116 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino64_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino64_t.h" 3 4
typedef __darwin_ino64_t ino64_t;
# 119 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_key_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_key_t.h" 3 4
typedef __int32_t key_t;
# 122 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mode_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mode_t.h" 3 4
typedef __darwin_mode_t mode_t;
# 123 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_nlink_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_nlink_t.h" 3 4
typedef __uint16_t nlink_t;
# 124 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_id_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_id_t.h" 3 4
typedef __darwin_id_t id_t;
# 125 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_pid_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_pid_t.h" 3 4
typedef __darwin_pid_t pid_t;
# 126 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h" 3 4
typedef __darwin_off_t off_t;
# 127 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

typedef int32_t segsz_t;
typedef int32_t swblk_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h" 3 4
typedef __darwin_uid_t uid_t;
# 132 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 168 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h" 3 4
typedef __darwin_clock_t clock_t;
# 169 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 3 4
typedef __darwin_size_t size_t;
# 170 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h" 3 4
typedef __darwin_ssize_t ssize_t;
# 171 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_time_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_time_t.h" 3 4
typedef __darwin_time_t time_t;
# 172 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_useconds_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_useconds_t.h" 3 4
typedef __darwin_useconds_t useconds_t;
# 174 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_suseconds_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_suseconds_t.h" 3 4
typedef __darwin_suseconds_t suseconds_t;
# 175 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h" 3 4
typedef __darwin_size_t rsize_t;
# 178 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h" 3 4
typedef int errno_t;
# 179 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4








# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h" 1 3 4
# 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h" 3 4
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;

int __darwin_check_fd_set_overflow(int, const void *, int) __attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=14.0))) __attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)));


inline __attribute__ ((__always_inline__)) int
__darwin_check_fd_set(int _a, const void *_b)
{

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunguarded-availability-new"

 if ((uintptr_t)&__darwin_check_fd_set_overflow != (uintptr_t) 0) {



  return __darwin_check_fd_set_overflow(_a, _b, 0);

 } else {
  return 1;
 }

#pragma clang diagnostic pop

}


inline __attribute__ ((__always_inline__)) int
__darwin_fd_isset(int _fd, const struct fd_set *_p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  return _p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8))));
 }

 return 0;
}

inline __attribute__ ((__always_inline__)) void
__darwin_fd_set(int _fd, struct fd_set *const _p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  (_p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] |= ((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8)))));
 }
}

inline __attribute__ ((__always_inline__)) void
__darwin_fd_clr(int _fd, struct fd_set *const _p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  (_p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] &= ~((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8)))));
 }
}
# 188 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4




typedef __int32_t fd_mask;







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_setsize.h" 1 3 4
# 201 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_set.h" 1 3 4
# 202 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_clr.h" 1 3 4
# 203 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_zero.h" 1 3 4
# 204 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_isset.h" 1 3 4
# 205 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_copy.h" 1 3 4
# 208 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 218 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_attr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_attr_t.h" 3 4
typedef __darwin_pthread_attr_t pthread_attr_t;
# 219 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_cond_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_cond_t.h" 3 4
typedef __darwin_pthread_cond_t pthread_cond_t;
# 220 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h" 3 4
typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 221 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h" 3 4
typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 222 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 3 4
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 223 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_once_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_once_t.h" 3 4
typedef __darwin_pthread_once_t pthread_once_t;
# 224 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h" 3 4
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 225 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 3 4
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 226 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_t.h" 3 4
typedef __darwin_pthread_t pthread_t;
# 227 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_key_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_key_t.h" 3 4
typedef __darwin_pthread_key_t pthread_key_t;
# 231 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsblkcnt_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsblkcnt_t.h" 3 4
typedef __darwin_fsblkcnt_t fsblkcnt_t;
# 236 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsfilcnt_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsfilcnt_t.h" 3 4
typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 237 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 37 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h" 1 3 4
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 1 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h" 1 3 4
# 40 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h" 3 4
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_va_list.h" 1 3 4
# 44 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_va_list.h" 3 4
typedef __darwin_va_list va_list;
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h" 1 3 4
# 47 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h" 3 4
int renameat(int, const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));



int renamex_np(const char *, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int renameatx_np(int, const char *, int, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_printf.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_printf.h" 3 4
int printf(const char * restrict, ...) __attribute__((__format__ (__printf__, 1, 2)));
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4

typedef __darwin_off_t fpos_t;
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 128 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (* _Nullable _close)(void *);
 int (* _Nullable _read) (void *, char *, int);
 fpos_t (* _Nullable _seek) (void *, fpos_t, int);
 int (* _Nullable _write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_seek_set.h" 1 3 4
# 162 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4


extern FILE *__stdinp __attribute__((__swift_attr__("nonisolated(unsafe)")));
extern FILE *__stdoutp __attribute__((__swift_attr__("nonisolated(unsafe)")));
extern FILE *__stderrp __attribute__((__swift_attr__("nonisolated(unsafe)")));
# 229 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * restrict, fpos_t *);
char *fgets(char * restrict, int, FILE *);



FILE *fopen(const char * restrict __filename, const char * restrict __mode) __asm("_" "fopen" );

int fprintf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * restrict, FILE * restrict) __asm("_" "fputs" );
size_t fread(void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream);
FILE *freopen(const char * restrict, const char * restrict,
     FILE * restrict) __asm("_" "freopen" );
int fscanf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);


__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of gets(3), it is highly recommended that you use fgets(3) instead.")))

char *gets(char *);

void perror(const char *) __attribute__((__cold__));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *__old, const char *__new);
void rewind(FILE *);
int scanf(const char * restrict, ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * restrict, char * restrict);
int setvbuf(FILE * restrict, char * restrict, int, size_t);

__attribute__((__availability__(swift, unavailable, message="Use snprintf instead.")))

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead.")))

int sprintf(char * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));

int sscanf(const char * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);

__attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tmpnam(char *);

int ungetc(int, FILE *);
int vfprintf(FILE * restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * restrict, va_list) __attribute__((__format__ (__printf__, 1, 0)));

__attribute__((__availability__(swift, unavailable, message="Use vsnprintf instead.")))

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use vsnprintf(3) instead.")))

int vsprintf(char * restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
# 307 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctermid.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctermid.h" 3 4
char *ctermid(char *);
# 308 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4






FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);
# 327 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
int pclose(FILE *) __attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead. (On iOS, process spawning is unavailable.)")));



FILE *popen(const char *, const char *) __asm("_" "popen" ) __attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead. (On iOS, process spawning is unavailable.)")));
# 346 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);
# 357 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
inline __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 383 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);


__attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tempnam(const char *__dir, const char *__prefix) __asm("_" "tempnam" );
# 424 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
int fseeko(FILE * __stream, off_t __offset, int __whence);
off_t ftello(FILE * __stream);





int snprintf(char * restrict __str, size_t __size, const char * restrict __format, ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * restrict __stream, const char * restrict __format, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * restrict __format, va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * restrict __str, size_t __size, const char * restrict __format, va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * restrict __str, const char * restrict __format, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
# 449 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
int dprintf(int, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((availability(macosx,introduced=10.7)));
int vdprintf(int, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getdelim(char ** restrict __linep, size_t * restrict __linecapp, int __delimiter, FILE * restrict __stream) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getline(char ** restrict __linep, size_t * restrict __linecapp, FILE * restrict __stream) __attribute__((availability(macosx,introduced=10.7)));
FILE *fmemopen(void * restrict __buf, size_t __size, const char * restrict __mode) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
FILE *open_memstream(char **__bufp, size_t *__sizep) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
# 464 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char ** restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *) __attribute__((format_arg(2)));
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));





FILE *funopen(const void *,
     int (* _Nullable)(void *, char *, int),
     int (* _Nullable)(void *, const char *, int),
     fpos_t (* _Nullable)(void *, fpos_t, int),
     int (* _Nullable)(void *));
# 499 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_common.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h" 2 3 4
# 42 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h" 3 4
extern int __sprintf_chk (char * restrict, int, size_t,
     const char * restrict, ...);
# 52 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h" 3 4
extern int __snprintf_chk (char * restrict, size_t, int, size_t,
      const char * restrict, ...);







extern int __vsprintf_chk (char * restrict, int, size_t,
      const char * restrict, va_list);







extern int __vsnprintf_chk (char * restrict, size_t, int, size_t,
       const char * restrict, va_list);
# 500 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h" 2 3 4
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h" 2 3 4
# 40 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h" 1 3 4
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 1 3 4
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;
# 109 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 1 3 4
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/signal.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/signal.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/signal.h" 1 3 4
# 17 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/signal.h" 3 4
typedef int sig_atomic_t;
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/signal.h" 2 3 4
# 83 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4
# 146 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/_mcontext.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/_mcontext.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 1 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/machine/_structs.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/machine/_structs.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 1 3 4
# 41 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_exception_state
{
 __uint32_t __exception;
 __uint32_t __fsr;
 __uint32_t __far;
};
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_exception_state64
{
 __uint64_t __far;
 __uint32_t __esr;
 __uint32_t __exception;
};

struct __darwin_arm_exception_state64_v2
{
 __uint64_t __far;
 __uint64_t __esr;
};
# 89 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_thread_state
{
 __uint32_t __r[13];
 __uint32_t __sp;
 __uint32_t __lr;
 __uint32_t __pc;
 __uint32_t __cpsr;
};
# 148 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_thread_state64
{
 __uint64_t __x[29];
 __uint64_t __fp;
 __uint64_t __lr;
 __uint64_t __sp;
 __uint64_t __pc;
 __uint32_t __cpsr;
 __uint32_t __pad;
};
# 519 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_vfp_state
{
 __uint32_t __r[64];
 __uint32_t __fpscr;
};
# 538 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_neon_state64
{
 __uint128_t __v[32];
 __uint32_t __fpsr;
 __uint32_t __fpcr;
};

struct __darwin_arm_neon_state
{
 __uint128_t __v[16];
 __uint32_t __fpsr;
 __uint32_t __fpcr;
};
# 609 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __arm_pagein_state
{
 int __pagein_error;
};
# 646 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __arm_legacy_debug_state
{
 __uint32_t __bvr[16];
 __uint32_t __bcr[16];
 __uint32_t __wvr[16];
 __uint32_t __wcr[16];
};
# 669 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_debug_state32
{
 __uint32_t __bvr[16];
 __uint32_t __bcr[16];
 __uint32_t __wvr[16];
 __uint32_t __wcr[16];
 __uint64_t __mdscr_el1;
};


struct __darwin_arm_debug_state64
{
 __uint64_t __bvr[16];
 __uint64_t __bcr[16];
 __uint64_t __wvr[16];
 __uint64_t __wcr[16];
 __uint64_t __mdscr_el1;
};
# 711 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_cpmu_state64
{
 __uint64_t __ctrs[16];
};
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/machine/_structs.h" 2 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 2 3 4




struct __darwin_mcontext32
{
 struct __darwin_arm_exception_state __es;
 struct __darwin_arm_thread_state __ss;
 struct __darwin_arm_vfp_state __fs;
};
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 3 4
struct __darwin_mcontext64
{
 struct __darwin_arm_exception_state64 __es;
 struct __darwin_arm_thread_state64 __ss;
 struct __darwin_arm_neon_state64 __ns;
};
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 3 4
typedef struct __darwin_mcontext64 *mcontext_t;
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/_mcontext.h" 2 3 4
# 147 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h" 1 3 4
# 42 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h" 3 4
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
# 151 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h" 1 3 4
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h" 3 4
struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};


typedef struct __darwin_ucontext ucontext_t;
# 152 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigset_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigset_t.h" 3 4
typedef __darwin_sigset_t sigset_t;
# 155 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 156 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4


union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 269 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
     void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 331 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
typedef void (*sig_t)(int);
# 348 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
# 367 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 390 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
void(*signal(int, void (*)(int)))(int);
# 110 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 1 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdint.h" 1 3 4
# 52 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdint.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 1 3 4
# 23 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint8_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint8_t.h" 3 4
typedef unsigned char uint8_t;
# 24 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint16_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint16_t.h" 3 4
typedef unsigned short uint16_t;
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint32_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint32_t.h" 3 4
typedef unsigned int uint32_t;
# 26 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint64_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint64_t.h" 3 4
typedef unsigned long long uint64_t;
# 27 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_intmax_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_intmax_t.h" 3 4
typedef long int intmax_t;
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uintmax_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uintmax_t.h" 3 4
typedef long unsigned int uintmax_t;
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 53 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdint.h" 2 3 4
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 2 3 4







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h" 3 4
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 2 3 4








typedef __uint64_t rlim_t;
# 152 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 163 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
# 200 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
typedef void *rusage_info_t;

struct rusage_info_v0 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
};

struct rusage_info_v1 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
};

struct rusage_info_v2 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
};

struct rusage_info_v3 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
};

struct rusage_info_v4 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
};

struct rusage_info_v5 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
 uint64_t ri_flags;
};

struct rusage_info_v6 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
 uint64_t ri_flags;
 uint64_t ri_user_ptime;
 uint64_t ri_system_ptime;
 uint64_t ri_pinstructions;
 uint64_t ri_pcycles;
 uint64_t ri_energy_nj;
 uint64_t ri_penergy_nj;
 uint64_t ri_secure_time_in_system;
 uint64_t ri_secure_ptime_in_system;
 uint64_t ri_neural_footprint;
 uint64_t ri_lifetime_max_neural_footprint;
 uint64_t ri_interval_max_neural_footprint;
 uint64_t ri_reserved[9];
};

typedef struct rusage_info_v6 rusage_info_current;
# 464 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 499 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
struct proc_rlimit_control_wakeupmon {
 uint32_t wm_flags;
 int32_t wm_rate;
};
# 570 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
int getpriority(int, id_t);

int getiopolicy_np(int, int) __attribute__((availability(macosx,introduced=10.5)));

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) __attribute__((availability(macosx,introduced=10.5)));

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 2 3 4
# 194 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 3 4
union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
      w_Coredump:1,
      w_Retcode:8,
      w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
      w_Stopsig:8,
      w_Filler:16;






 } w_S;
};
# 248 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 3 4
pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/alloca.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/alloca.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/alloca.h" 2 3 4


void *alloca(size_t);
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ct_rune_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ct_rune_t.h" 3 4
typedef __darwin_ct_rune_t ct_rune_t;
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rune_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rune_t.h" 3 4
typedef __darwin_rune_t rune_t;
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 53 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h" 3 4
typedef __darwin_wchar_t wchar_t;
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4

typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 101 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4
# 115 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
extern int __mb_cur_max;




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 1 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 2 3 4







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 1 3 4
# 27 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_ptrcheck.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 2 3 4


typedef unsigned long long malloc_type_id_t;






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 2 3 4
# 51 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 3 4
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_malloc(size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void malloc_type_free(void * ptr, malloc_type_id_t type_id);
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_realloc(void * ptr, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_valloc(size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));

__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) int malloc_type_posix_memalign(void * *memptr, size_t alignment, size_t size, malloc_type_id_t type_id) ;




typedef struct _malloc_zone_t malloc_zone_t;

__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2,3)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void malloc_type_zone_free(malloc_zone_t *zone, void * ptr, malloc_type_id_t type_id);
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_realloc(malloc_zone_t *zone, void * ptr, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(3)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_valloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(3)));
# 45 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 2 3 4
# 54 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 3 4
void * malloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1))) ;
void * calloc(size_t __count, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2))) ;
void free(void * );
void * realloc(void * __ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2))) ;
void * reallocf(void * __ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));

void * valloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1))) ;




void * aligned_alloc(size_t __alignment, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_align(1))) __attribute__((alloc_size(2))) __attribute__((availability(macosx,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)));


int posix_memalign(void * *__memptr, size_t __alignment, size_t __size) __attribute__((availability(macosx,introduced=10.6)));
# 121 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_abort.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_abort.h" 3 4
void abort(void) __attribute__((__cold__)) __attribute__((__noreturn__));
# 122 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4


int abs(int) __attribute__((__const__));
int atexit(void (* _Nonnull)(void));


int at_quick_exit(void (*)(void));

double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (* _Nonnull __compar)(const void *, const void *));

div_t div(int, int) __attribute__((__const__));
void exit(int) __attribute__((__noreturn__));

char *getenv(const char *);
long labs(long) __attribute__((__const__));
ldiv_t ldiv(long, long) __attribute__((__const__));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);


int mblen(const char *__s, size_t __n);
size_t mbstowcs(wchar_t * restrict , const char * restrict, size_t);
int mbtowc(wchar_t * restrict, const char * restrict, size_t);

void qsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));


void quick_exit(int) __attribute__((__noreturn__));

int rand(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

void srand(unsigned) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *__str, char **__endptr, int __base);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *__str, char **__endptr, int __base);

unsigned long
  strtoul(const char *__str, char **__endptr, int __base);

unsigned long long
  strtoull(const char *__str, char **__endptr, int __base);


__attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead. (On iOS, process spawning is unavailable.)")))
__attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
int system(const char *) __asm("_" "system" );


size_t wcstombs(char * restrict, const wchar_t * restrict, size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((__noreturn__));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *restrict, int *restrict);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *restrict, int *restrict);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of mktemp(3), it is highly recommended that you use mkstemp(3) instead.")))

char *mktemp(char *);
int mkstemp(char *);
long mrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
long nrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int posix_openpt(int);
char *ptsname(int);


int ptsname_r(int fildes, char *buffer, size_t buflen) __attribute__((availability(macos,introduced=10.13.4))) __attribute__((availability(ios,introduced=11.3))) __attribute__((availability(tvos,introduced=11.3))) __attribute__((availability(watchos,introduced=4.3)));


int putenv(char *) __asm("_" "putenv" );
long random(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int rand_r(unsigned *) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

char *realpath(const char * restrict, char * restrict) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char * __name, const char * __value, int __overwrite) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );
# 262 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
uint32_t arc4random(void);
void arc4random_addrandom(unsigned char * , int )
    __attribute__((availability(macosx,introduced=10.0))) __attribute__((availability(macosx,deprecated=10.12,message="use arc4random_stir")))
    __attribute__((availability(ios,introduced=2.0))) __attribute__((availability(ios,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(tvos,introduced=2.0))) __attribute__((availability(tvos,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(watchos,introduced=1.0))) __attribute__((availability(watchos,deprecated=3.0,message="use arc4random_stir")));
void arc4random_buf(void * __buf, size_t __nbytes) __attribute__((availability(macosx,introduced=10.7)));
void arc4random_stir(void);
uint32_t
  arc4random_uniform(uint32_t __upper_bound) __attribute__((availability(macosx,introduced=10.7)));

int atexit_b(void (^ _Nonnull)(void)) __attribute__((availability(macosx,introduced=10.6)));
# 282 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
void *bsearch_b(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));



char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" ) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);
void setprogname(const char *);
# 316 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
int heapsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int heapsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

int mergesort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int mergesort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void psort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *))
     __attribute__((availability(macosx,introduced=10.6)));

void psort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void psort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *))
     __attribute__((availability(macosx,introduced=10.6)));

void qsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void qsort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *));
int radixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
int rpmatch(const char *)
 __attribute__((availability(macos,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)));
int sradixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
void sranddev(void);
void srandomdev(void);

long long
 strtonum(const char *__numstr, long long __minval, long long __maxval, const char **__errstrp)
 __attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=14.0))) __attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)));

long long
  strtoq(const char *__str, char **__endptr, int __base);
unsigned long long
  strtouq(const char *__str, char **__endptr, int __base);

extern char *suboptarg;
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h" 2 3 4
# 43 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 1 3
# 78 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 3
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_header_macro.h" 1 3
# 79 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 2 3



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_ptrdiff_t.h" 1 3
# 18 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_ptrdiff_t.h" 3
typedef long int ptrdiff_t;
# 83 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_size_t.h" 1 3
# 88 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_rsize_t.h" 1 3
# 93 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_wchar_t.h" 1 3
# 98 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_null.h" 1 3
# 103 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 2 3
# 117 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 3
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_max_align_t.h" 1 3
# 16 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_max_align_t.h" 3
typedef long double max_align_t;
# 118 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stddef_offsetof.h" 1 3
# 123 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stddef.h" 2 3
# 44 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 1 3
# 37 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 3
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stdarg_header_macro.h" 1 3
# 38 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 2 3



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stdarg___gnuc_va_list.h" 1 3
# 12 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stdarg___gnuc_va_list.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 42 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stdarg_va_list.h" 1 3
# 12 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stdarg_va_list.h" 3
typedef __builtin_va_list va_list;
# 47 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stdarg_va_arg.h" 1 3
# 52 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stdarg___va_copy.h" 1 3
# 57 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 2 3




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/__stdarg_va_copy.h" 1 3
# 62 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 2 3
# 45 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2
# 62 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h" 1 3 4
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4




void *memchr(const void *__s, int __c, size_t __n);
int memcmp(const void *__s1, const void *__s2, size_t __n);
void *memcpy(void *__dst, const void *__src, size_t __n);
void *memmove(void *__dst, const void *__src, size_t __len);
void *memset(void *__b, int __c, size_t __len);
char *strcat(char *__s1, const char *__s2);
char *strchr(const char *__s, int __c);
int strcmp(const char *__s1, const char *__s2);
int strcoll(const char *__s1, const char *__s2);
char *strcpy(char *__dst, const char *__src);
size_t strcspn(const char *__s, const char *__charset);
char *strerror(int __errnum) __asm("_" "strerror" );
size_t strlen(const char *__s);
char *strncat(char *__s1, const char *__s2, size_t __n);
int strncmp(const char *__s1, const char *__s2, size_t __n);
char *strncpy(char *__dst, const char *__src, size_t __n);
char *strpbrk(const char *__s, const char *__charset);
char *strrchr(const char *__s, int __c);
size_t strspn(const char *__s, const char *__charset);
char *strstr(const char *__big, const char *__little);
char *strtok(char *__str, const char *__sep);
size_t strxfrm(char *__s1, const char *__s2, size_t __n);
# 104 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
char *strtok_r(char *__str, const char *__sep, char **__lasts);
# 116 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen);
char *strdup(const char *__s1);
void *memccpy(void *__dst, const void *__src, int __c, size_t __n);
# 130 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
char *stpcpy(char *__dst, const char *__src);
char *stpncpy(char *__dst, const char *__src, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strndup(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
size_t strnlen(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strsignal(int __sig);






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 142 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4



errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n) __attribute__((availability(macosx,introduced=10.9)));
# 155 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
void *memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len) __attribute__((availability(macosx,introduced=10.7)));
void memset_pattern4(void *__b, const void *__pattern4, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern8(void *__b, const void *__pattern8, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern16(void *__b, const void *__pattern16, size_t __len) __attribute__((availability(macosx,introduced=10.5)));

char *strcasestr(const char *__big, const char *__little);
char *strnstr(const char *__big, const char *__little, size_t __len);
size_t strlcat(char *__dst, const char *__source, size_t __size);
size_t strlcpy(char *__dst, const char *__source, size_t __size);
void strmode(int __mode, char *__bp);
char *strsep(char **__stringp, const char *__delim);


void swab(const void * restrict, void * restrict, ssize_t);

__attribute__((availability(macosx,introduced=10.12.1))) __attribute__((availability(ios,introduced=10.1)))
__attribute__((availability(tvos,introduced=10.0.1))) __attribute__((availability(watchos,introduced=3.1)))
int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len);

__attribute__((availability(macosx,introduced=11.0))) __attribute__((availability(ios,introduced=14.0)))
__attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)))
int strsignal_r(int __sig, char *__strsignalbuf, size_t __buflen);





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_strings.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_strings.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_strings.h" 2 3 4




int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);





int ffsl(long) __attribute__((availability(macosx,introduced=10.5)));
int ffsll(long long) __attribute__((availability(macosx,introduced=10.9)));
int fls(int) __attribute__((availability(macosx,introduced=10.5)));
int flsl(long) __attribute__((availability(macosx,introduced=10.5)));
int flsll(long long) __attribute__((availability(macosx,introduced=10.9)));





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_strings.h" 1 3 4
# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_strings.h" 2 3 4
# 183 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_string.h" 1 3 4
# 189 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h" 2 3 4
# 63 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h" 2 3 4
# 66 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/wchar.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/wchar.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 1 3 4
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mbstate_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mbstate_t.h" 3 4
typedef __darwin_mbstate_t mbstate_t;
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 2 3 4
# 89 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 3 4
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/stdarg.h" 1 3 4
# 90 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h" 1 3 4
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h" 1 3 4
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_time.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_time.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h" 3 4
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4

struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};
# 98 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_time.h" 3 4
extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * restrict, size_t, const char * restrict, const struct tm * restrict) __asm("_" "strftime" );
char *strptime(const char * restrict, const char * restrict, struct tm * restrict) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * restrict, char * restrict);
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * restrict, struct tm * restrict);
struct tm *localtime_r(const time_t * restrict, struct tm * restrict);


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *__rqtp, struct timespec *__rmtp) __asm("_" "nanosleep" );
# 153 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_time.h" 3 4
typedef enum {
_CLOCK_REALTIME __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 0,

_CLOCK_MONOTONIC __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 6,


_CLOCK_MONOTONIC_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 4,

_CLOCK_MONOTONIC_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 5,

_CLOCK_UPTIME_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 8,

_CLOCK_UPTIME_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 9,


_CLOCK_PROCESS_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 12,

_CLOCK_THREAD_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 16

} clockid_t;

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_getres(clockid_t __clock_id, struct timespec *__res);

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_gettime(clockid_t __clock_id, struct timespec *__tp);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
__uint64_t clock_gettime_nsec_np(clockid_t __clock_id);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable)))
int clock_settime(clockid_t __clock_id, const struct timespec *__tp);
# 198 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_time.h" 3 4
__attribute__((availability(macos,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)))
int timespec_get(struct timespec *ts, int base);
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h" 2 3 4
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/__wctype.h" 1 3 4
# 39 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/__wctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/___wctype.h" 1 3 4
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/___wctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wint_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wint_t.h" 3 4
typedef __darwin_wint_t wint_t;
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/___wctype.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_wctype_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_wctype_t.h" 3 4
typedef __darwin_wctype_t wctype_t;
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/___wctype.h" 2 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/___wctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ctype.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h" 1 3 4
# 46 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 47 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h" 2 3 4
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h" 3 4
typedef struct {
 __darwin_rune_t __min;
 __darwin_rune_t __max;
 __darwin_rune_t __map;
 __uint32_t *__types;
} _RuneEntry;

typedef struct {
 int __nranges;
 _RuneEntry *__ranges;
} _RuneRange;

typedef struct {
 char __name[14];
 __uint32_t __mask;
} _RuneCharClass;

typedef struct {
 char __magic[8];
 char __encoding[32];

 __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, char const **);
 int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
 __darwin_rune_t __invalid_rune;

 __uint32_t __runetype[(1 <<8 )];
 __darwin_rune_t __maplower[(1 <<8 )];
 __darwin_rune_t __mapupper[(1 <<8 )];






 _RuneRange __runetype_ext;
 _RuneRange __maplower_ext;
 _RuneRange __mapupper_ext;

 void *__variable;
 int __variable_len;




 int __ncharclasses;
 _RuneCharClass *__charclasses;
} _RuneLocale;




extern _RuneLocale _DefaultRuneLocale;
extern _RuneLocale *_CurrentRuneLocale;
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h" 2 3 4
# 131 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h" 3 4
unsigned long ___runetype(__darwin_ct_rune_t);
__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);


inline int
isascii(int _c)
{
 return ((_c & ~0x7F) == 0);
}
# 150 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h" 3 4
int __maskrune(__darwin_ct_rune_t, unsigned long);



inline int
__istype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (isascii(_c) ? !!(_DefaultRuneLocale.__runetype[_c] & _f)
  : !!__maskrune(_c, _f));

}

inline __darwin_ct_rune_t
__isctype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (_c < 0 || _c >= (1 <<8 )) ? 0 :
  !!(_DefaultRuneLocale.__runetype[_c] & _f);

}
# 190 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h" 3 4
__darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
__darwin_ct_rune_t __tolower(__darwin_ct_rune_t);



inline int
__wcwidth(__darwin_ct_rune_t _c)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune(_c, 0xe0000000L|0x00040000L);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}






inline int
isalnum(int _c)
{
 return (__istype(_c, 0x00000100L|0x00000400L));
}

inline int
isalpha(int _c)
{
 return (__istype(_c, 0x00000100L));
}

inline int
isblank(int _c)
{
 return (__istype(_c, 0x00020000L));
}

inline int
iscntrl(int _c)
{
 return (__istype(_c, 0x00000200L));
}


inline int
isdigit(int _c)
{
 return (__isctype(_c, 0x00000400L));
}

inline int
isgraph(int _c)
{
 return (__istype(_c, 0x00000800L));
}

inline int
islower(int _c)
{
 return (__istype(_c, 0x00001000L));
}

inline int
isprint(int _c)
{
 return (__istype(_c, 0x00040000L));
}

inline int
ispunct(int _c)
{
 return (__istype(_c, 0x00002000L));
}

inline int
isspace(int _c)
{
 return (__istype(_c, 0x00004000L));
}

inline int
isupper(int _c)
{
 return (__istype(_c, 0x00008000L));
}


inline int
isxdigit(int _c)
{
 return (__isctype(_c, 0x00010000L));
}

inline int
toascii(int _c)
{
 return (_c & 0x7F);
}

inline int
tolower(int _c)
{
        return (__tolower(_c));
}

inline int
toupper(int _c)
{
        return (__toupper(_c));
}


inline int
digittoint(int _c)
{
 return (__maskrune(_c, 0x0F));
}

inline int
ishexnumber(int _c)
{
 return (__istype(_c, 0x00010000L));
}

inline int
isideogram(int _c)
{
 return (__istype(_c, 0x00080000L));
}

inline int
isnumber(int _c)
{
 return (__istype(_c, 0x00000400L));
}

inline int
isphonogram(int _c)
{
 return (__istype(_c, 0x00200000L));
}

inline int
isrune(int _c)
{
 return (__istype(_c, 0xFFFFFFF0L));
}

inline int
isspecial(int _c)
{
 return (__istype(_c, 0x00100000L));
}
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ctype.h" 2 3 4
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/___wctype.h" 2 3 4







inline int
iswalnum(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L|0x00000400L));
}

inline int
iswalpha(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L));
}

inline int
iswcntrl(wint_t _wc)
{
 return (__istype(_wc, 0x00000200L));
}

inline int
iswctype(wint_t _wc, wctype_t _charclass)
{
 return (__istype(_wc, _charclass));
}

inline int
iswdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00000400L));
}

inline int
iswgraph(wint_t _wc)
{
 return (__istype(_wc, 0x00000800L));
}

inline int
iswlower(wint_t _wc)
{
 return (__istype(_wc, 0x00001000L));
}

inline int
iswprint(wint_t _wc)
{
 return (__istype(_wc, 0x00040000L));
}

inline int
iswpunct(wint_t _wc)
{
 return (__istype(_wc, 0x00002000L));
}

inline int
iswspace(wint_t _wc)
{
 return (__istype(_wc, 0x00004000L));
}

inline int
iswupper(wint_t _wc)
{
 return (__istype(_wc, 0x00008000L));
}

inline int
iswxdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00010000L));
}

inline wint_t
towlower(wint_t _wc)
{
  return (__tolower(_wc));
}

inline wint_t
towupper(wint_t _wc)
{
  return (__toupper(_wc));
}
# 186 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/___wctype.h" 3 4
wctype_t
 wctype(const char *);
# 40 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/__wctype.h" 2 3 4
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 2 3 4




wint_t btowc(int);
wint_t fgetwc(FILE *);
wchar_t *fgetws(wchar_t * restrict, int, FILE * restrict);
wint_t fputwc(wchar_t, FILE *);
int fputws(const wchar_t * restrict, FILE * restrict);
int fwide(FILE *, int);
int fwprintf(FILE * restrict, const wchar_t * restrict, ...);
int fwscanf(FILE * restrict, const wchar_t * restrict, ...);
wint_t getwc(FILE *);
wint_t getwchar(void);
size_t mbrlen(const char * restrict, size_t, mbstate_t * restrict);
size_t mbrtowc(wchar_t * restrict, const char * restrict, size_t,
     mbstate_t * restrict);
int mbsinit(const mbstate_t *);
size_t mbsrtowcs(wchar_t * restrict, const char ** restrict, size_t,
     mbstate_t * restrict);
wint_t putwc(wchar_t, FILE *);
wint_t putwchar(wchar_t);
int swprintf(wchar_t * restrict, size_t, const wchar_t * restrict, ...);
int swscanf(const wchar_t * restrict, const wchar_t * restrict, ...);
wint_t ungetwc(wint_t, FILE *);
int vfwprintf(FILE * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vswprintf(wchar_t * restrict, size_t, const wchar_t * restrict,
     __darwin_va_list);
int vwprintf(const wchar_t * restrict, __darwin_va_list);
size_t wcrtomb(char * restrict, wchar_t, mbstate_t * restrict);
wchar_t *wcscat(wchar_t * restrict, const wchar_t * restrict);
wchar_t *wcschr(const wchar_t *, wchar_t);
int wcscmp(const wchar_t *, const wchar_t *);
int wcscoll(const wchar_t *, const wchar_t *);
wchar_t *wcscpy(wchar_t * restrict, const wchar_t * restrict);
size_t wcscspn(const wchar_t *, const wchar_t *);
size_t wcsftime(wchar_t * restrict, size_t, const wchar_t * restrict,
     const struct tm * restrict) __asm("_" "wcsftime" );
size_t wcslen(const wchar_t *);
wchar_t *wcsncat(wchar_t * restrict, const wchar_t * restrict, size_t);
int wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncpy(wchar_t * restrict , const wchar_t * restrict, size_t);
wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
wchar_t *wcsrchr(const wchar_t *, wchar_t);
size_t wcsrtombs(char * restrict, const wchar_t ** restrict, size_t,
     mbstate_t * restrict);
size_t wcsspn(const wchar_t *, const wchar_t *);
wchar_t *wcsstr(const wchar_t * restrict, const wchar_t * restrict);
size_t wcsxfrm(wchar_t * restrict, const wchar_t * restrict, size_t);
int wctob(wint_t);
double wcstod(const wchar_t * restrict, wchar_t ** restrict);
wchar_t *wcstok(wchar_t * restrict, const wchar_t * restrict,
     wchar_t ** restrict);
long wcstol(const wchar_t * restrict, wchar_t ** restrict, int);
unsigned long
  wcstoul(const wchar_t * restrict, wchar_t ** restrict, int);
wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
int wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wmemcpy(wchar_t * restrict, const wchar_t * restrict, size_t);
wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t *wmemset(wchar_t *, wchar_t, size_t);
int wprintf(const wchar_t * restrict, ...);
int wscanf(const wchar_t * restrict, ...);
int wcswidth(const wchar_t *, size_t);
int wcwidth(wchar_t);
# 170 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 3 4
int vfwscanf(FILE * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vswscanf(const wchar_t * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vwscanf(const wchar_t * restrict, __darwin_va_list);
float wcstof(const wchar_t * restrict, wchar_t ** restrict);
long double
 wcstold(const wchar_t * restrict, wchar_t ** restrict);

long long
 wcstoll(const wchar_t * restrict, wchar_t ** restrict, int);
unsigned long long
 wcstoull(const wchar_t * restrict, wchar_t ** restrict, int);
# 195 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 3 4
size_t mbsnrtowcs(wchar_t * restrict, const char ** restrict, size_t,
            size_t, mbstate_t * restrict);
wchar_t *wcpcpy(wchar_t * restrict, const wchar_t * restrict) __attribute__((availability(macosx,introduced=10.7)));
wchar_t *wcpncpy(wchar_t * restrict, const wchar_t * restrict, size_t) __attribute__((availability(macosx,introduced=10.7)));
wchar_t *wcsdup(const wchar_t *) __attribute__((availability(macosx,introduced=10.7)));
int wcscasecmp(const wchar_t *, const wchar_t *) __attribute__((availability(macosx,introduced=10.7)));
int wcsncasecmp(const wchar_t *, const wchar_t *, size_t n) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnlen(const wchar_t *, size_t) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnrtombs(char * restrict, const wchar_t ** restrict, size_t,
            size_t, mbstate_t * restrict);
FILE *open_wmemstream(wchar_t ** __bufp, size_t * __sizep) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
# 215 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_wchar.h" 3 4
wchar_t *fgetwln(FILE * restrict, size_t *) __attribute__((availability(macosx,introduced=10.7)));
size_t wcslcat(wchar_t *, const wchar_t *, size_t);
size_t wcslcpy(wchar_t *, const wchar_t *, size_t);
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/wchar.h" 2 3 4
# 69 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2


# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/inttypes.h" 1 3
# 21 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/inttypes.h" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/inttypes.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/inttypes.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_inttypes.h" 1 3 4
# 227 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_inttypes.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 228 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_inttypes.h" 2 3 4






__attribute__((availability(macosx,introduced=10.4)))
extern intmax_t
imaxabs(intmax_t j);


typedef struct {
 intmax_t quot;
 intmax_t rem;
} imaxdiv_t;

__attribute__((availability(macosx,introduced=10.4)))
extern imaxdiv_t
imaxdiv(intmax_t __numer, intmax_t __denom);


__attribute__((availability(macosx,introduced=10.4)))
extern intmax_t
strtoimax(const char * restrict __nptr,
   char ** restrict __endptr,
   int __base);

__attribute__((availability(macosx,introduced=10.4)))
extern uintmax_t
strtoumax(const char * restrict __nptr,
   char ** restrict __endptr,
   int __base);


__attribute__((availability(macosx,introduced=10.4)))
extern intmax_t
wcstoimax(const wchar_t * restrict __nptr,
   wchar_t ** restrict __endptr,
   int __base);

__attribute__((availability(macosx,introduced=10.4)))
extern uintmax_t
wcstoumax(const wchar_t * restrict __nptr,
   wchar_t ** restrict __endptr,
   int __base);
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/inttypes.h" 2 3 4
# 22 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/inttypes.h" 2 3
# 72 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ctype.h" 1 3 4
# 77 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2
# 88 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 1 3 4
# 45 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
    typedef float float_t;
    typedef double double_t;
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
extern int __math_errhandling(void);
# 132 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __fpclassifyl(long double);
# 175 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float);
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double);
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double);
inline __attribute__ ((__always_inline__)) int __inline_isinff(float);
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double);
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnand(double);
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double);
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double);
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float);
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double);
inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double);

inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float __x) {
    return __x == __x && __builtin_fabsf(__x) != __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double __x) {
    return __x == __x && __builtin_fabs(__x) != __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double __x) {
    return __x == __x && __builtin_fabsl(__x) != __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isinff(float __x) {
    return __builtin_fabsf(__x) == __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double __x) {
    return __builtin_fabs(__x) == __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double __x) {
    return __builtin_fabsl(__x) == __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnand(double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float __x) {
    union { float __f; unsigned int __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 31);
}
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double __x) {
    union { double __f; unsigned long long __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}
# 238 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double __x) {
    union { long double __f; unsigned long long __u;} __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}

inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float __x) {
    return __inline_isfinitef(__x) && __builtin_fabsf(__x) >= 1.17549435e-38F;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double __x) {
    return __inline_isfinited(__x) && __builtin_fabs(__x) >= 2.2250738585072014e-308;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double __x) {
    return __inline_isfinitel(__x) && __builtin_fabsl(__x) >= 2.2250738585072014e-308L;
}
# 309 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
extern float acosf(float);
extern double acos(double);
extern long double acosl(long double);

extern float asinf(float);
extern double asin(double);
extern long double asinl(long double);

extern float atanf(float);
extern double atan(double);
extern long double atanl(long double);

extern float atan2f(float, float);
extern double atan2(double, double);
extern long double atan2l(long double, long double);

extern float cosf(float);
extern double cos(double);
extern long double cosl(long double);

extern float sinf(float);
extern double sin(double);
extern long double sinl(long double);

extern float tanf(float);
extern double tan(double);
extern long double tanl(long double);

extern float acoshf(float);
extern double acosh(double);
extern long double acoshl(long double);

extern float asinhf(float);
extern double asinh(double);
extern long double asinhl(long double);

extern float atanhf(float);
extern double atanh(double);
extern long double atanhl(long double);

extern float coshf(float);
extern double cosh(double);
extern long double coshl(long double);

extern float sinhf(float);
extern double sinh(double);
extern long double sinhl(long double);

extern float tanhf(float);
extern double tanh(double);
extern long double tanhl(long double);

extern float expf(float);
extern double exp(double);
extern long double expl(long double);

extern float exp2f(float);
extern double exp2(double);
extern long double exp2l(long double);

extern float expm1f(float);
extern double expm1(double);
extern long double expm1l(long double);

extern float logf(float);
extern double log(double);
extern long double logl(long double);

extern float log10f(float);
extern double log10(double);
extern long double log10l(long double);

extern float log2f(float);
extern double log2(double);
extern long double log2l(long double);

extern float log1pf(float);
extern double log1p(double);
extern long double log1pl(long double);

extern float logbf(float);
extern double logb(double);
extern long double logbl(long double);

extern float modff(float, float *);
extern double modf(double, double *);
extern long double modfl(long double, long double *);

extern float ldexpf(float, int);
extern double ldexp(double, int);
extern long double ldexpl(long double, int);

extern float frexpf(float, int *);
extern double frexp(double, int *);
extern long double frexpl(long double, int *);

extern int ilogbf(float);
extern int ilogb(double);
extern int ilogbl(long double);

extern float scalbnf(float, int);
extern double scalbn(double, int);
extern long double scalbnl(long double, int);

extern float scalblnf(float, long int);
extern double scalbln(double, long int);
extern long double scalblnl(long double, long int);

extern float fabsf(float);
extern double fabs(double);
extern long double fabsl(long double);

extern float cbrtf(float);
extern double cbrt(double);
extern long double cbrtl(long double);

extern float hypotf(float, float);
extern double hypot(double, double);
extern long double hypotl(long double, long double);

extern float powf(float, float);
extern double pow(double, double);
extern long double powl(long double, long double);

extern float sqrtf(float);
extern double sqrt(double);
extern long double sqrtl(long double);

extern float erff(float);
extern double erf(double);
extern long double erfl(long double);

extern float erfcf(float);
extern double erfc(double);
extern long double erfcl(long double);




extern float lgammaf(float);
extern double lgamma(double);
extern long double lgammal(long double);

extern float tgammaf(float);
extern double tgamma(double);
extern long double tgammal(long double);

extern float ceilf(float);
extern double ceil(double);
extern long double ceill(long double);

extern float floorf(float);
extern double floor(double);
extern long double floorl(long double);

extern float nearbyintf(float);
extern double nearbyint(double);
extern long double nearbyintl(long double);

extern float rintf(float);
extern double rint(double);
extern long double rintl(long double);

extern long int lrintf(float);
extern long int lrint(double);
extern long int lrintl(long double);

extern float roundf(float);
extern double round(double);
extern long double roundl(long double);

extern long int lroundf(float);
extern long int lround(double);
extern long int lroundl(long double);




extern long long int llrintf(float);
extern long long int llrint(double);
extern long long int llrintl(long double);

extern long long int llroundf(float);
extern long long int llround(double);
extern long long int llroundl(long double);


extern float truncf(float);
extern double trunc(double);
extern long double truncl(long double);

extern float fmodf(float, float);
extern double fmod(double, double);
extern long double fmodl(long double, long double);

extern float remainderf(float, float);
extern double remainder(double, double);
extern long double remainderl(long double, long double);

extern float remquof(float, float, int *);
extern double remquo(double, double, int *);
extern long double remquol(long double, long double, int *);

extern float copysignf(float, float);
extern double copysign(double, double);
extern long double copysignl(long double, long double);

extern float nanf(const char *);
extern double nan(const char *);
extern long double nanl(const char *);

extern float nextafterf(float, float);
extern double nextafter(double, double);
extern long double nextafterl(long double, long double);

extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);

extern float fdimf(float, float);
extern double fdim(double, double);
extern long double fdiml(long double, long double);

extern float fmaxf(float, float);
extern double fmax(double, double);
extern long double fmaxl(long double, long double);

extern float fminf(float, float);
extern double fmin(double, double);
extern long double fminl(long double, long double);

extern float fmaf(float, float, float);
extern double fma(double, double, double);
extern long double fmal(long double, long double, long double);
# 589 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
extern float __exp10f(float) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern double __exp10(double) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));





inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp);
# 606 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
extern float __cospif(float) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern double __cospi(double) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern float __sinpif(float) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern double __sinpi(double) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern float __tanpif(float) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern double __tanpi(double) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));


extern _Float16 __fabsf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __hypotf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __sqrtf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __ceilf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __floorf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __rintf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __roundf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __truncf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __copysignf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __nextafterf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __fmaxf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __fminf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __fmaf16(_Float16, _Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
# 652 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp);






struct __float2 { float __sinval; float __cosval; };
struct __double2 { double __sinval; double __cosval; };

extern struct __float2 __sincosf_stret(float);
extern struct __double2 __sincos_stret(double);
extern struct __float2 __sincospif_stret(float);
extern struct __double2 __sincospi_stret(double);

inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincosf_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincos_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincospif_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincospi_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}







extern double j0(double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double j1(double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double jn(int, double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double y0(double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double y1(double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double yn(int, double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double scalb(double, double);
extern int signgam;
# 779 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/math.h" 3 4
struct exception {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
};
# 89 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2


# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/float.h" 1 3
# 28 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/float.h" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/float.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/float.h" 2 3
# 92 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2
# 186 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
typedef enum
{
    SDL_FALSE = 0,
    SDL_TRUE = 1
} SDL_bool;





typedef int8_t Sint8;






typedef uint8_t Uint8;






typedef int16_t Sint16;






typedef uint16_t Uint16;






typedef int32_t Sint32;






typedef uint32_t Uint32;






typedef int64_t Sint64;






typedef uint64_t Uint64;
# 412 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
_Static_assert(sizeof(Uint8) == 1, "sizeof(Uint8) == 1");
_Static_assert(sizeof(Sint8) == 1, "sizeof(Sint8) == 1");
_Static_assert(sizeof(Uint16) == 2, "sizeof(Uint16) == 2");
_Static_assert(sizeof(Sint16) == 2, "sizeof(Sint16) == 2");
_Static_assert(sizeof(Uint32) == 4, "sizeof(Uint32) == 4");
_Static_assert(sizeof(Sint32) == 4, "sizeof(Sint32) == 4");
_Static_assert(sizeof(Uint64) == 8, "sizeof(Uint64) == 8");
_Static_assert(sizeof(Sint64) == 8, "sizeof(Sint64) == 8");
# 433 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
typedef enum
{
    DUMMY_ENUM_VALUE
} SDL_DUMMY_ENUM;

_Static_assert(sizeof(SDL_DUMMY_ENUM) == sizeof(int), "sizeof(SDL_DUMMY_ENUM) == sizeof(int)");




# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 444 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2
# 457 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
extern __attribute__ ((visibility("default"))) void * SDL_malloc(size_t size);
extern __attribute__ ((visibility("default"))) void * SDL_calloc(size_t nmemb, size_t size);
extern __attribute__ ((visibility("default"))) void * SDL_realloc(void *mem, size_t size);
extern __attribute__ ((visibility("default"))) void SDL_free(void *mem);

typedef void *( *SDL_malloc_func)(size_t size);
typedef void *( *SDL_calloc_func)(size_t nmemb, size_t size);
typedef void *( *SDL_realloc_func)(void *mem, size_t size);
typedef void ( *SDL_free_func)(void *mem);






extern __attribute__ ((visibility("default"))) void SDL_GetOriginalMemoryFunctions(SDL_malloc_func *malloc_func,
                                                            SDL_calloc_func *calloc_func,
                                                            SDL_realloc_func *realloc_func,
                                                            SDL_free_func *free_func);






extern __attribute__ ((visibility("default"))) void SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func,
                                                    SDL_calloc_func *calloc_func,
                                                    SDL_realloc_func *realloc_func,
                                                    SDL_free_func *free_func);






extern __attribute__ ((visibility("default"))) int SDL_SetMemoryFunctions(SDL_malloc_func malloc_func,
                                                   SDL_calloc_func calloc_func,
                                                   SDL_realloc_func realloc_func,
                                                   SDL_free_func free_func);






extern __attribute__ ((visibility("default"))) int SDL_GetNumAllocations(void);

extern __attribute__ ((visibility("default"))) char * SDL_getenv(const char *name);
extern __attribute__ ((visibility("default"))) int SDL_setenv(const char *name, const char *value, int overwrite);

typedef int ( *SDL_CompareCallback)(const void *, const void *);
extern __attribute__ ((visibility("default"))) void SDL_qsort(void *base, size_t nmemb, size_t size, SDL_CompareCallback compare);
extern __attribute__ ((visibility("default"))) void * SDL_bsearch(const void *key, const void *base, size_t nmemb, size_t size, SDL_CompareCallback compare);

extern __attribute__ ((visibility("default"))) int SDL_abs(int x);






extern __attribute__ ((visibility("default"))) int SDL_isalpha(int x);
extern __attribute__ ((visibility("default"))) int SDL_isalnum(int x);
extern __attribute__ ((visibility("default"))) int SDL_isblank(int x);
extern __attribute__ ((visibility("default"))) int SDL_iscntrl(int x);
extern __attribute__ ((visibility("default"))) int SDL_isdigit(int x);
extern __attribute__ ((visibility("default"))) int SDL_isxdigit(int x);
extern __attribute__ ((visibility("default"))) int SDL_ispunct(int x);
extern __attribute__ ((visibility("default"))) int SDL_isspace(int x);
extern __attribute__ ((visibility("default"))) int SDL_isupper(int x);
extern __attribute__ ((visibility("default"))) int SDL_islower(int x);
extern __attribute__ ((visibility("default"))) int SDL_isprint(int x);
extern __attribute__ ((visibility("default"))) int SDL_isgraph(int x);
extern __attribute__ ((visibility("default"))) int SDL_toupper(int x);
extern __attribute__ ((visibility("default"))) int SDL_tolower(int x);

extern __attribute__ ((visibility("default"))) Uint16 SDL_crc16(Uint16 crc, const void *data, size_t len);
extern __attribute__ ((visibility("default"))) Uint32 SDL_crc32(Uint32 crc, const void *data, size_t len);

extern __attribute__ ((visibility("default"))) void * SDL_memset( void *dst, int c, size_t len);
# 549 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
__attribute__((always_inline)) static __inline__ void SDL_memset4(void *dst, Uint32 val, size_t dwords)
{
# 561 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
    size_t _n = (dwords + 3) / 4;
    Uint32 *_p = ((Uint32 *)(dst));
    Uint32 _val = (val);
    if (dwords == 0) {
        return;
    }
    switch (dwords % 4) {
        case 0: do { *_p++ = _val; __attribute__((__fallthrough__));
        case 3: *_p++ = _val; __attribute__((__fallthrough__));
        case 2: *_p++ = _val; __attribute__((__fallthrough__));
        case 1: *_p++ = _val;
        } while ( --_n );
    }

}

extern __attribute__ ((visibility("default"))) void * SDL_memcpy( void *dst, const void *src, size_t len);

extern __attribute__ ((visibility("default"))) void * SDL_memmove( void *dst, const void *src, size_t len);
extern __attribute__ ((visibility("default"))) int SDL_memcmp(const void *s1, const void *s2, size_t len);

extern __attribute__ ((visibility("default"))) size_t SDL_wcslen(const wchar_t *wstr);
extern __attribute__ ((visibility("default"))) size_t SDL_wcslcpy( wchar_t *dst, const wchar_t *src, size_t maxlen);
extern __attribute__ ((visibility("default"))) size_t SDL_wcslcat( wchar_t *dst, const wchar_t *src, size_t maxlen);
extern __attribute__ ((visibility("default"))) wchar_t * SDL_wcsdup(const wchar_t *wstr);
extern __attribute__ ((visibility("default"))) wchar_t * SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle);

extern __attribute__ ((visibility("default"))) int SDL_wcscmp(const wchar_t *str1, const wchar_t *str2);
extern __attribute__ ((visibility("default"))) int SDL_wcsncmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);
extern __attribute__ ((visibility("default"))) int SDL_wcscasecmp(const wchar_t *str1, const wchar_t *str2);
extern __attribute__ ((visibility("default"))) int SDL_wcsncasecmp(const wchar_t *str1, const wchar_t *str2, size_t len);

extern __attribute__ ((visibility("default"))) size_t SDL_strlen(const char *str);
extern __attribute__ ((visibility("default"))) size_t SDL_strlcpy( char *dst, const char *src, size_t maxlen);
extern __attribute__ ((visibility("default"))) size_t SDL_utf8strlcpy( char *dst, const char *src, size_t dst_bytes);
extern __attribute__ ((visibility("default"))) size_t SDL_strlcat( char *dst, const char *src, size_t maxlen);
extern __attribute__ ((visibility("default"))) char * SDL_strdup(const char *str);
extern __attribute__ ((visibility("default"))) char * SDL_strrev(char *str);
extern __attribute__ ((visibility("default"))) char * SDL_strupr(char *str);
extern __attribute__ ((visibility("default"))) char * SDL_strlwr(char *str);
extern __attribute__ ((visibility("default"))) char * SDL_strchr(const char *str, int c);
extern __attribute__ ((visibility("default"))) char * SDL_strrchr(const char *str, int c);
extern __attribute__ ((visibility("default"))) char * SDL_strstr(const char *haystack, const char *needle);
extern __attribute__ ((visibility("default"))) char * SDL_strcasestr(const char *haystack, const char *needle);
extern __attribute__ ((visibility("default"))) char * SDL_strtokr(char *s1, const char *s2, char **saveptr);
extern __attribute__ ((visibility("default"))) size_t SDL_utf8strlen(const char *str);
extern __attribute__ ((visibility("default"))) size_t SDL_utf8strnlen(const char *str, size_t bytes);

extern __attribute__ ((visibility("default"))) char * SDL_itoa(int value, char *str, int radix);
extern __attribute__ ((visibility("default"))) char * SDL_uitoa(unsigned int value, char *str, int radix);
extern __attribute__ ((visibility("default"))) char * SDL_ltoa(long value, char *str, int radix);
extern __attribute__ ((visibility("default"))) char * SDL_ultoa(unsigned long value, char *str, int radix);
extern __attribute__ ((visibility("default"))) char * SDL_lltoa(Sint64 value, char *str, int radix);
extern __attribute__ ((visibility("default"))) char * SDL_ulltoa(Uint64 value, char *str, int radix);

extern __attribute__ ((visibility("default"))) int SDL_atoi(const char *str);
extern __attribute__ ((visibility("default"))) double SDL_atof(const char *str);
extern __attribute__ ((visibility("default"))) long SDL_strtol(const char *str, char **endp, int base);
extern __attribute__ ((visibility("default"))) unsigned long SDL_strtoul(const char *str, char **endp, int base);
extern __attribute__ ((visibility("default"))) Sint64 SDL_strtoll(const char *str, char **endp, int base);
extern __attribute__ ((visibility("default"))) Uint64 SDL_strtoull(const char *str, char **endp, int base);
extern __attribute__ ((visibility("default"))) double SDL_strtod(const char *str, char **endp);

extern __attribute__ ((visibility("default"))) int SDL_strcmp(const char *str1, const char *str2);
extern __attribute__ ((visibility("default"))) int SDL_strncmp(const char *str1, const char *str2, size_t maxlen);
extern __attribute__ ((visibility("default"))) int SDL_strcasecmp(const char *str1, const char *str2);
extern __attribute__ ((visibility("default"))) int SDL_strncasecmp(const char *str1, const char *str2, size_t len);

extern __attribute__ ((visibility("default"))) int SDL_sscanf(const char *text, const char *fmt, ...) __attribute__ (( format( __scanf__, 2, 2 +1 )));
extern __attribute__ ((visibility("default"))) int SDL_vsscanf(const char *text, const char *fmt, va_list ap) __attribute__(( format( __scanf__, 2, 0 )));
extern __attribute__ ((visibility("default"))) int SDL_snprintf( char *text, size_t maxlen, const char *fmt, ... ) __attribute__ (( format( __printf__, 3, 3 +1 )));
extern __attribute__ ((visibility("default"))) int SDL_vsnprintf( char *text, size_t maxlen, const char *fmt, va_list ap) __attribute__(( format( __printf__, 3, 0 )));
extern __attribute__ ((visibility("default"))) int SDL_asprintf(char **strp, const char *fmt, ...) __attribute__ (( format( __printf__, 2, 2 +1 )));
extern __attribute__ ((visibility("default"))) int SDL_vasprintf(char **strp, const char *fmt, va_list ap) __attribute__(( format( __printf__, 2, 0 )));
# 656 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
extern __attribute__ ((visibility("default"))) double SDL_acos(double x);
extern __attribute__ ((visibility("default"))) float SDL_acosf(float x);
extern __attribute__ ((visibility("default"))) double SDL_asin(double x);
extern __attribute__ ((visibility("default"))) float SDL_asinf(float x);
extern __attribute__ ((visibility("default"))) double SDL_atan(double x);
extern __attribute__ ((visibility("default"))) float SDL_atanf(float x);
extern __attribute__ ((visibility("default"))) double SDL_atan2(double y, double x);
extern __attribute__ ((visibility("default"))) float SDL_atan2f(float y, float x);
extern __attribute__ ((visibility("default"))) double SDL_ceil(double x);
extern __attribute__ ((visibility("default"))) float SDL_ceilf(float x);
extern __attribute__ ((visibility("default"))) double SDL_copysign(double x, double y);
extern __attribute__ ((visibility("default"))) float SDL_copysignf(float x, float y);
extern __attribute__ ((visibility("default"))) double SDL_cos(double x);
extern __attribute__ ((visibility("default"))) float SDL_cosf(float x);
extern __attribute__ ((visibility("default"))) double SDL_exp(double x);
extern __attribute__ ((visibility("default"))) float SDL_expf(float x);
extern __attribute__ ((visibility("default"))) double SDL_fabs(double x);
extern __attribute__ ((visibility("default"))) float SDL_fabsf(float x);
extern __attribute__ ((visibility("default"))) double SDL_floor(double x);
extern __attribute__ ((visibility("default"))) float SDL_floorf(float x);
extern __attribute__ ((visibility("default"))) double SDL_trunc(double x);
extern __attribute__ ((visibility("default"))) float SDL_truncf(float x);
extern __attribute__ ((visibility("default"))) double SDL_fmod(double x, double y);
extern __attribute__ ((visibility("default"))) float SDL_fmodf(float x, float y);
extern __attribute__ ((visibility("default"))) double SDL_log(double x);
extern __attribute__ ((visibility("default"))) float SDL_logf(float x);
extern __attribute__ ((visibility("default"))) double SDL_log10(double x);
extern __attribute__ ((visibility("default"))) float SDL_log10f(float x);
extern __attribute__ ((visibility("default"))) double SDL_pow(double x, double y);
extern __attribute__ ((visibility("default"))) float SDL_powf(float x, float y);
extern __attribute__ ((visibility("default"))) double SDL_round(double x);
extern __attribute__ ((visibility("default"))) float SDL_roundf(float x);
extern __attribute__ ((visibility("default"))) long SDL_lround(double x);
extern __attribute__ ((visibility("default"))) long SDL_lroundf(float x);
extern __attribute__ ((visibility("default"))) double SDL_scalbn(double x, int n);
extern __attribute__ ((visibility("default"))) float SDL_scalbnf(float x, int n);
extern __attribute__ ((visibility("default"))) double SDL_sin(double x);
extern __attribute__ ((visibility("default"))) float SDL_sinf(float x);
extern __attribute__ ((visibility("default"))) double SDL_sqrt(double x);
extern __attribute__ ((visibility("default"))) float SDL_sqrtf(float x);
extern __attribute__ ((visibility("default"))) double SDL_tan(double x);
extern __attribute__ ((visibility("default"))) float SDL_tanf(float x);
# 706 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
typedef struct _SDL_iconv_t *SDL_iconv_t;
extern __attribute__ ((visibility("default"))) SDL_iconv_t SDL_iconv_open(const char *tocode,
                                                   const char *fromcode);
extern __attribute__ ((visibility("default"))) int SDL_iconv_close(SDL_iconv_t cd);
extern __attribute__ ((visibility("default"))) size_t SDL_iconv(SDL_iconv_t cd, const char **inbuf,
                                         size_t * inbytesleft, char **outbuf,
                                         size_t * outbytesleft);







extern __attribute__ ((visibility("default"))) char * SDL_iconv_string(const char *tocode,
                                               const char *fromcode,
                                               const char *inbuf,
                                               size_t inbytesleft);
# 799 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
__attribute__((always_inline)) static __inline__ void *SDL_memcpy4( void *dst, const void *src, size_t dwords)
{
    return SDL_memcpy(dst, src, dwords * 4);
}
# 811 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
__attribute__((always_inline)) static __inline__ int SDL_size_mul_overflow (size_t a,
                                            size_t b,
                                            size_t *ret)
{
    if (a != 0 && b > 18446744073709551615UL / a) {
        return -1;
    }
    *ret = a * b;
    return 0;
}





__attribute__((always_inline)) static __inline__ int _SDL_size_mul_overflow_builtin (size_t a,
                                                     size_t b,
                                                     size_t *ret)
{
    return __builtin_mul_overflow(a, b, ret) == 0 ? 0 : -1;
}
# 842 "/opt/homebrew/include/SDL2/SDL_stdinc.h"
__attribute__((always_inline)) static __inline__ int SDL_size_add_overflow (size_t a,
                                            size_t b,
                                            size_t *ret)
{
    if (b > 18446744073709551615UL - a) {
        return -1;
    }
    *ret = a + b;
    return 0;
}




__attribute__((always_inline)) static __inline__ int _SDL_size_add_overflow_builtin (size_t a,
                                                     size_t b,
                                                     size_t *ret)
{
    return __builtin_add_overflow(a, b, ret) == 0 ? 0 : -1;
}







# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 870 "/opt/homebrew/include/SDL2/SDL_stdinc.h" 2
# 26 "/opt/homebrew/include/SDL2/SDL_main.h" 2
# 146 "/opt/homebrew/include/SDL2/SDL_main.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 147 "/opt/homebrew/include/SDL2/SDL_main.h" 2







typedef int (*SDL_main_func)(int argc, char *argv[]);
extern int SDL_main(int argc, char *argv[]);
# 171 "/opt/homebrew/include/SDL2/SDL_main.h"
extern __attribute__ ((visibility("default"))) void SDL_SetMainReady(void);
# 278 "/opt/homebrew/include/SDL2/SDL_main.h"
# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 279 "/opt/homebrew/include/SDL2/SDL_main.h" 2
# 32 "/opt/homebrew/include/SDL2/SDL.h" 2

# 1 "/opt/homebrew/include/SDL2/SDL_assert.h" 1
# 27 "/opt/homebrew/include/SDL2/SDL_assert.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 28 "/opt/homebrew/include/SDL2/SDL_assert.h" 2
# 112 "/opt/homebrew/include/SDL2/SDL_assert.h"
typedef enum
{
    SDL_ASSERTION_RETRY,
    SDL_ASSERTION_BREAK,
    SDL_ASSERTION_ABORT,
    SDL_ASSERTION_IGNORE,
    SDL_ASSERTION_ALWAYS_IGNORE
} SDL_AssertState;

typedef struct SDL_AssertData
{
    int always_ignore;
    unsigned int trigger_count;
    const char *condition;
    const char *filename;
    int linenum;
    const char *function;
    const struct SDL_AssertData *next;
} SDL_AssertData;


extern __attribute__ ((visibility("default"))) SDL_AssertState SDL_ReportAssertion(SDL_AssertData *,
                                                            const char *,
                                                            const char *, int)





   __attribute__((analyzer_noreturn))


;
# 200 "/opt/homebrew/include/SDL2/SDL_assert.h"
typedef SDL_AssertState ( *SDL_AssertionHandler)(
                                 const SDL_AssertData* data, void* userdata);
# 224 "/opt/homebrew/include/SDL2/SDL_assert.h"
extern __attribute__ ((visibility("default"))) void SDL_SetAssertionHandler(
                                            SDL_AssertionHandler handler,
                                            void *userdata);
# 243 "/opt/homebrew/include/SDL2/SDL_assert.h"
extern __attribute__ ((visibility("default"))) SDL_AssertionHandler SDL_GetDefaultAssertionHandler(void);
# 266 "/opt/homebrew/include/SDL2/SDL_assert.h"
extern __attribute__ ((visibility("default"))) SDL_AssertionHandler SDL_GetAssertionHandler(void **puserdata);
# 294 "/opt/homebrew/include/SDL2/SDL_assert.h"
extern __attribute__ ((visibility("default"))) const SDL_AssertData * SDL_GetAssertionReport(void);
# 308 "/opt/homebrew/include/SDL2/SDL_assert.h"
extern __attribute__ ((visibility("default"))) void SDL_ResetAssertionReport(void);
# 320 "/opt/homebrew/include/SDL2/SDL_assert.h"
# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 321 "/opt/homebrew/include/SDL2/SDL_assert.h" 2
# 34 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_atomic.h" 1
# 56 "/opt/homebrew/include/SDL2/SDL_atomic.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 57 "/opt/homebrew/include/SDL2/SDL_atomic.h" 2
# 80 "/opt/homebrew/include/SDL2/SDL_atomic.h"
typedef int SDL_SpinLock;
# 97 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_AtomicTryLock(SDL_SpinLock *lock);
# 112 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) void SDL_AtomicLock(SDL_SpinLock *lock);
# 129 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) void SDL_AtomicUnlock(SDL_SpinLock *lock);
# 174 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) void SDL_MemoryBarrierReleaseFunction(void);
extern __attribute__ ((visibility("default"))) void SDL_MemoryBarrierAcquireFunction(void);
# 255 "/opt/homebrew/include/SDL2/SDL_atomic.h"
typedef struct SDL_atomic_t {
    int value;
} SDL_atomic_t;
# 276 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval);
# 294 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) int SDL_AtomicSet(SDL_atomic_t *a, int v);
# 309 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) int SDL_AtomicGet(SDL_atomic_t *a);
# 328 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) int SDL_AtomicAdd(SDL_atomic_t *a, int v);
# 364 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_AtomicCASPtr(void **a, void *oldval, void *newval);
# 381 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) void* SDL_AtomicSetPtr(void **a, void* v);
# 397 "/opt/homebrew/include/SDL2/SDL_atomic.h"
extern __attribute__ ((visibility("default"))) void* SDL_AtomicGetPtr(void **a);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 405 "/opt/homebrew/include/SDL2/SDL_atomic.h" 2
# 35 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_audio.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_audio.h"
# 1 "/opt/homebrew/include/SDL2/SDL_error.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_error.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_error.h" 2
# 66 "/opt/homebrew/include/SDL2/SDL_error.h"
extern __attribute__ ((visibility("default"))) int SDL_SetError( const char *fmt, ...) __attribute__ (( format( __printf__, 1, 1 +1 )));
# 103 "/opt/homebrew/include/SDL2/SDL_error.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetError(void);
# 120 "/opt/homebrew/include/SDL2/SDL_error.h"
extern __attribute__ ((visibility("default"))) char * SDL_GetErrorMsg(char *errstr, int maxlen);
# 130 "/opt/homebrew/include/SDL2/SDL_error.h"
extern __attribute__ ((visibility("default"))) void SDL_ClearError(void);
# 142 "/opt/homebrew/include/SDL2/SDL_error.h"
typedef enum
{
    SDL_ENOMEM,
    SDL_EFREAD,
    SDL_EFWRITE,
    SDL_EFSEEK,
    SDL_UNSUPPORTED,
    SDL_LASTERROR
} SDL_errorcode;

extern __attribute__ ((visibility("default"))) int SDL_Error(SDL_errorcode code);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 160 "/opt/homebrew/include/SDL2/SDL_error.h" 2
# 35 "/opt/homebrew/include/SDL2/SDL_audio.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_endian.h" 1
# 122 "/opt/homebrew/include/SDL2/SDL_endian.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 123 "/opt/homebrew/include/SDL2/SDL_endian.h" 2
# 344 "/opt/homebrew/include/SDL2/SDL_endian.h"
__attribute__((always_inline)) static __inline__ float
SDL_SwapFloat(float x)
{
    union {
        float f;
        Uint32 ui32;
    } swapper;
    swapper.f = x;
    swapper.ui32 = __builtin_bswap32(swapper.ui32);
    return swapper.f;
}
# 392 "/opt/homebrew/include/SDL2/SDL_endian.h"
# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 393 "/opt/homebrew/include/SDL2/SDL_endian.h" 2
# 36 "/opt/homebrew/include/SDL2/SDL_audio.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_mutex.h" 1
# 108 "/opt/homebrew/include/SDL2/SDL_mutex.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 109 "/opt/homebrew/include/SDL2/SDL_mutex.h" 2
# 132 "/opt/homebrew/include/SDL2/SDL_mutex.h"
struct SDL_mutex;
typedef struct SDL_mutex SDL_mutex;
# 155 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) SDL_mutex * SDL_CreateMutex(void);
# 173 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_LockMutex(SDL_mutex * mutex) ;
# 196 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_TryLockMutex(SDL_mutex * mutex) ;
# 215 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_UnlockMutex(SDL_mutex * mutex) ;
# 236 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) void SDL_DestroyMutex(SDL_mutex * mutex);
# 247 "/opt/homebrew/include/SDL2/SDL_mutex.h"
struct SDL_semaphore;
typedef struct SDL_semaphore SDL_sem;
# 272 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) SDL_sem * SDL_CreateSemaphore(Uint32 initial_value);
# 291 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) void SDL_DestroySemaphore(SDL_sem * sem);
# 318 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_SemWait(SDL_sem * sem);
# 342 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_SemTryWait(SDL_sem * sem);
# 367 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_SemWaitTimeout(SDL_sem *sem, Uint32 timeout);
# 385 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_SemPost(SDL_sem * sem);
# 397 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_SemValue(SDL_sem * sem);
# 408 "/opt/homebrew/include/SDL2/SDL_mutex.h"
struct SDL_cond;
typedef struct SDL_cond SDL_cond;
# 425 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) SDL_cond * SDL_CreateCond(void);
# 440 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) void SDL_DestroyCond(SDL_cond * cond);
# 457 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_CondSignal(SDL_cond * cond);
# 474 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_CondBroadcast(SDL_cond * cond);
# 502 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_CondWait(SDL_cond * cond, SDL_mutex * mutex);
# 531 "/opt/homebrew/include/SDL2/SDL_mutex.h"
extern __attribute__ ((visibility("default"))) int SDL_CondWaitTimeout(SDL_cond * cond,
                                                SDL_mutex * mutex, Uint32 ms);
# 541 "/opt/homebrew/include/SDL2/SDL_mutex.h"
# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 542 "/opt/homebrew/include/SDL2/SDL_mutex.h" 2
# 37 "/opt/homebrew/include/SDL2/SDL_audio.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_thread.h" 1
# 49 "/opt/homebrew/include/SDL2/SDL_thread.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 50 "/opt/homebrew/include/SDL2/SDL_thread.h" 2






struct SDL_Thread;
typedef struct SDL_Thread SDL_Thread;


typedef unsigned long SDL_threadID;


typedef unsigned int SDL_TLSID;
# 77 "/opt/homebrew/include/SDL2/SDL_thread.h"
typedef enum SDL_ThreadPriority {
    SDL_THREAD_PRIORITY_LOW,
    SDL_THREAD_PRIORITY_NORMAL,
    SDL_THREAD_PRIORITY_HIGH,
    SDL_THREAD_PRIORITY_TIME_CRITICAL
} SDL_ThreadPriority;







typedef int ( * SDL_ThreadFunction) (void *data);
# 209 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) SDL_Thread *
SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data);
# 255 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) SDL_Thread *
SDL_CreateThreadWithStackSize(SDL_ThreadFunction fn, const char *name, const size_t stacksize, void *data);
# 274 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetThreadName(SDL_Thread *thread);
# 292 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) SDL_threadID SDL_ThreadID(void);
# 309 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) SDL_threadID SDL_GetThreadID(SDL_Thread * thread);
# 324 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) int SDL_SetThreadPriority(SDL_ThreadPriority priority);
# 359 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) void SDL_WaitThread(SDL_Thread * thread, int *status);
# 395 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) void SDL_DetachThread(SDL_Thread * thread);
# 410 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) SDL_TLSID SDL_TLSCreate(void);
# 424 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) void * SDL_TLSGet(SDL_TLSID id);

typedef void ( *SDL_TLSDestructorCallback)(void*);
# 451 "/opt/homebrew/include/SDL2/SDL_thread.h"
extern __attribute__ ((visibility("default"))) int SDL_TLSSet(SDL_TLSID id, const void *value, SDL_TLSDestructorCallback destructor);






extern __attribute__ ((visibility("default"))) void SDL_TLSCleanup(void);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 465 "/opt/homebrew/include/SDL2/SDL_thread.h" 2
# 38 "/opt/homebrew/include/SDL2/SDL_audio.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_rwops.h" 1
# 37 "/opt/homebrew/include/SDL2/SDL_rwops.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 38 "/opt/homebrew/include/SDL2/SDL_rwops.h" 2
# 54 "/opt/homebrew/include/SDL2/SDL_rwops.h"
typedef struct SDL_RWops
{



    Sint64 ( * size) (struct SDL_RWops * context);







    Sint64 ( * seek) (struct SDL_RWops * context, Sint64 offset,
                             int whence);







    size_t ( * read) (struct SDL_RWops * context, void *ptr,
                             size_t size, size_t maxnum);







    size_t ( * write) (struct SDL_RWops * context, const void *ptr,
                              size_t size, size_t num);






    int ( * close) (struct SDL_RWops * context);

    Uint32 type;
    union
    {
# 118 "/opt/homebrew/include/SDL2/SDL_rwops.h"
        struct
        {
            SDL_bool autoclose;
            FILE *fp;
        } stdio;

        struct
        {
            Uint8 *base;
            Uint8 *here;
            Uint8 *stop;
        } mem;
        struct
        {
            void *data1;
            void *data2;
        } unknown;
    } hidden;

} SDL_RWops;
# 208 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) SDL_RWops * SDL_RWFromFile(const char *file,
                                                  const char *mode);



extern __attribute__ ((visibility("default"))) SDL_RWops * SDL_RWFromFP(FILE * fp, SDL_bool autoclose);
# 282 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) SDL_RWops * SDL_RWFromMem(void *mem, int size);
# 316 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) SDL_RWops * SDL_RWFromConstMem(const void *mem,
                                                      int size);
# 345 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) SDL_RWops * SDL_AllocRW(void);
# 369 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) void SDL_FreeRW(SDL_RWops * area);
# 388 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Sint64 SDL_RWsize(SDL_RWops *context);
# 425 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Sint64 SDL_RWseek(SDL_RWops *context,
                                          Sint64 offset, int whence);
# 453 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Sint64 SDL_RWtell(SDL_RWops *context);
# 485 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_RWread(SDL_RWops *context,
                                          void *ptr, size_t size,
                                          size_t maxnum);
# 519 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_RWwrite(SDL_RWops *context,
                                           const void *ptr, size_t size,
                                           size_t num);
# 550 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) int SDL_RWclose(SDL_RWops *context);
# 568 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) void * SDL_LoadFile_RW(SDL_RWops *src,
                                              size_t *datasize,
                                              int freesrc);
# 590 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) void * SDL_LoadFile(const char *file, size_t *datasize);
# 610 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Uint8 SDL_ReadU8(SDL_RWops * src);
# 626 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_ReadLE16(SDL_RWops * src);
# 642 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_ReadBE16(SDL_RWops * src);
# 658 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_ReadLE32(SDL_RWops * src);
# 674 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_ReadBE32(SDL_RWops * src);
# 690 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Uint64 SDL_ReadLE64(SDL_RWops * src);
# 706 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) Uint64 SDL_ReadBE64(SDL_RWops * src);
# 728 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_WriteU8(SDL_RWops * dst, Uint8 value);
# 746 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_WriteLE16(SDL_RWops * dst, Uint16 value);
# 763 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_WriteBE16(SDL_RWops * dst, Uint16 value);
# 781 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_WriteLE32(SDL_RWops * dst, Uint32 value);
# 798 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_WriteBE32(SDL_RWops * dst, Uint32 value);
# 816 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_WriteLE64(SDL_RWops * dst, Uint64 value);
# 833 "/opt/homebrew/include/SDL2/SDL_rwops.h"
extern __attribute__ ((visibility("default"))) size_t SDL_WriteBE64(SDL_RWops * dst, Uint64 value);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 841 "/opt/homebrew/include/SDL2/SDL_rwops.h" 2
# 39 "/opt/homebrew/include/SDL2/SDL_audio.h" 2

# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 41 "/opt/homebrew/include/SDL2/SDL_audio.h" 2
# 66 "/opt/homebrew/include/SDL2/SDL_audio.h"
typedef Uint16 SDL_AudioFormat;
# 159 "/opt/homebrew/include/SDL2/SDL_audio.h"
typedef void ( * SDL_AudioCallback) (void *userdata, Uint8 * stream,
                                            int len);
# 177 "/opt/homebrew/include/SDL2/SDL_audio.h"
typedef struct SDL_AudioSpec
{
    int freq;
    SDL_AudioFormat format;
    Uint8 channels;
    Uint8 silence;
    Uint16 samples;
    Uint16 padding;
    Uint32 size;
    SDL_AudioCallback callback;
    void *userdata;
} SDL_AudioSpec;


struct SDL_AudioCVT;
typedef void ( * SDL_AudioFilter) (struct SDL_AudioCVT * cvt,
                                          SDL_AudioFormat format);
# 228 "/opt/homebrew/include/SDL2/SDL_audio.h"
typedef struct SDL_AudioCVT
{
    int needed;
    SDL_AudioFormat src_format;
    SDL_AudioFormat dst_format;
    double rate_incr;
    Uint8 *buf;
    int len;
    int len_cvt;
    int len_mult;
    double len_ratio;
    SDL_AudioFilter filters[9 + 1];
    int filter_index;
} __attribute__((packed)) SDL_AudioCVT;
# 273 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_GetNumAudioDrivers(void);
# 295 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetAudioDriver(int index);
# 322 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_AudioInit(const char *driver_name);
# 336 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_AudioQuit(void);
# 355 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetCurrentAudioDriver(void);
# 404 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_OpenAudio(SDL_AudioSpec * desired,
                                          SDL_AudioSpec * obtained);
# 416 "/opt/homebrew/include/SDL2/SDL_audio.h"
typedef Uint32 SDL_AudioDeviceID;
# 462 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_GetNumAudioDevices(int iscapture);
# 489 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetAudioDeviceName(int index,
                                                           int iscapture);
# 515 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_GetAudioDeviceSpec(int index,
                                                   int iscapture,
                                                   SDL_AudioSpec *spec);
# 550 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_GetDefaultAudioInfo(char **name,
                                                    SDL_AudioSpec *spec,
                                                    int iscapture);
# 666 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) SDL_AudioDeviceID SDL_OpenAudioDevice(
                                                  const char *device,
                                                  int iscapture,
                                                  const SDL_AudioSpec *desired,
                                                  SDL_AudioSpec *obtained,
                                                  int allowed_changes);
# 681 "/opt/homebrew/include/SDL2/SDL_audio.h"
typedef enum
{
    SDL_AUDIO_STOPPED = 0,
    SDL_AUDIO_PLAYING,
    SDL_AUDIO_PAUSED
} SDL_AudioStatus;
# 706 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) SDL_AudioStatus SDL_GetAudioStatus(void);
# 719 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) SDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);
# 752 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_PauseAudio(int pause_on);
# 782 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_PauseAudioDevice(SDL_AudioDeviceID dev,
                                                  int pause_on);
# 867 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) SDL_AudioSpec * SDL_LoadWAV_RW(SDL_RWops * src,
                                                      int freesrc,
                                                      SDL_AudioSpec * spec,
                                                      Uint8 ** audio_buf,
                                                      Uint32 * audio_len);
# 896 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_FreeWAV(Uint8 * audio_buf);
# 931 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_BuildAudioCVT(SDL_AudioCVT * cvt,
                                              SDL_AudioFormat src_format,
                                              Uint8 src_channels,
                                              int src_rate,
                                              SDL_AudioFormat dst_format,
                                              Uint8 dst_channels,
                                              int dst_rate);
# 977 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_ConvertAudio(SDL_AudioCVT * cvt);
# 987 "/opt/homebrew/include/SDL2/SDL_audio.h"
struct _SDL_AudioStream;
typedef struct _SDL_AudioStream SDL_AudioStream;
# 1010 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) SDL_AudioStream * SDL_NewAudioStream(const SDL_AudioFormat src_format,
                                           const Uint8 src_channels,
                                           const int src_rate,
                                           const SDL_AudioFormat dst_format,
                                           const Uint8 dst_channels,
                                           const int dst_rate);
# 1034 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_AudioStreamPut(SDL_AudioStream *stream, const void *buf, int len);
# 1053 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_AudioStreamGet(SDL_AudioStream *stream, void *buf, int len);
# 1071 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_AudioStreamAvailable(SDL_AudioStream *stream);
# 1090 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_AudioStreamFlush(SDL_AudioStream *stream);
# 1104 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_AudioStreamClear(SDL_AudioStream *stream);
# 1118 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_FreeAudioStream(SDL_AudioStream *stream);
# 1147 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_MixAudio(Uint8 * dst, const Uint8 * src,
                                          Uint32 len, int volume);
# 1180 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_MixAudioFormat(Uint8 * dst,
                                                const Uint8 * src,
                                                SDL_AudioFormat format,
                                                Uint32 len, int volume);
# 1231 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) int SDL_QueueAudio(SDL_AudioDeviceID dev, const void *data, Uint32 len);
# 1279 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_DequeueAudio(SDL_AudioDeviceID dev, void *data, Uint32 len);
# 1313 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);
# 1347 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);
# 1378 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_LockAudio(void);
# 1417 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_LockAudioDevice(SDL_AudioDeviceID dev);
# 1436 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_UnlockAudio(void);
# 1450 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);
# 1468 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_CloseAudio(void);
# 1492 "/opt/homebrew/include/SDL2/SDL_audio.h"
extern __attribute__ ((visibility("default"))) void SDL_CloseAudioDevice(SDL_AudioDeviceID dev);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 1499 "/opt/homebrew/include/SDL2/SDL_audio.h" 2
# 36 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_clipboard.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_clipboard.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_clipboard.h" 2
# 53 "/opt/homebrew/include/SDL2/SDL_clipboard.h"
extern __attribute__ ((visibility("default"))) int SDL_SetClipboardText(const char *text);
# 71 "/opt/homebrew/include/SDL2/SDL_clipboard.h"
extern __attribute__ ((visibility("default"))) char * SDL_GetClipboardText(void);
# 83 "/opt/homebrew/include/SDL2/SDL_clipboard.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasClipboardText(void);
# 97 "/opt/homebrew/include/SDL2/SDL_clipboard.h"
extern __attribute__ ((visibility("default"))) int SDL_SetPrimarySelectionText(const char *text);
# 116 "/opt/homebrew/include/SDL2/SDL_clipboard.h"
extern __attribute__ ((visibility("default"))) char * SDL_GetPrimarySelectionText(void);
# 130 "/opt/homebrew/include/SDL2/SDL_clipboard.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasPrimarySelectionText(void);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 138 "/opt/homebrew/include/SDL2/SDL_clipboard.h" 2
# 37 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h" 1
# 89 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 1 3
# 37 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_bf16.h" 1 3
# 14 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_bf16.h" 3
typedef __bf16 bfloat16_t;
# 38 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 2 3
typedef float float32_t;
typedef __fp16 float16_t;

typedef double float64_t;



typedef uint8_t poly8_t;
typedef uint16_t poly16_t;
typedef uint64_t poly64_t;
typedef __uint128_t poly128_t;





typedef __attribute__((neon_vector_type(8))) int8_t int8x8_t;
typedef __attribute__((neon_vector_type(16))) int8_t int8x16_t;
typedef __attribute__((neon_vector_type(4))) int16_t int16x4_t;
typedef __attribute__((neon_vector_type(8))) int16_t int16x8_t;
typedef __attribute__((neon_vector_type(2))) int32_t int32x2_t;
typedef __attribute__((neon_vector_type(4))) int32_t int32x4_t;
typedef __attribute__((neon_vector_type(1))) int64_t int64x1_t;
typedef __attribute__((neon_vector_type(2))) int64_t int64x2_t;
typedef __attribute__((neon_vector_type(8))) uint8_t uint8x8_t;
typedef __attribute__((neon_vector_type(16))) uint8_t uint8x16_t;
typedef __attribute__((neon_vector_type(4))) uint16_t uint16x4_t;
typedef __attribute__((neon_vector_type(8))) uint16_t uint16x8_t;
typedef __attribute__((neon_vector_type(2))) uint32_t uint32x2_t;
typedef __attribute__((neon_vector_type(4))) uint32_t uint32x4_t;
typedef __attribute__((neon_vector_type(1))) uint64_t uint64x1_t;
typedef __attribute__((neon_vector_type(2))) uint64_t uint64x2_t;
typedef __attribute__((neon_vector_type(4))) float16_t float16x4_t;
typedef __attribute__((neon_vector_type(8))) float16_t float16x8_t;
typedef __attribute__((neon_vector_type(2))) float32_t float32x2_t;
typedef __attribute__((neon_vector_type(4))) float32_t float32x4_t;

typedef __attribute__((neon_vector_type(1))) float64_t float64x1_t;
typedef __attribute__((neon_vector_type(2))) float64_t float64x2_t;

typedef __attribute__((neon_polyvector_type(8))) poly8_t poly8x8_t;
typedef __attribute__((neon_polyvector_type(16))) poly8_t poly8x16_t;
typedef __attribute__((neon_polyvector_type(4))) poly16_t poly16x4_t;
typedef __attribute__((neon_polyvector_type(8))) poly16_t poly16x8_t;
typedef __attribute__((neon_polyvector_type(1))) poly64_t poly64x1_t;
typedef __attribute__((neon_polyvector_type(2))) poly64_t poly64x2_t;

typedef struct int8x8x2_t {
  int8x8_t val[2];
} int8x8x2_t;

typedef struct int8x16x2_t {
  int8x16_t val[2];
} int8x16x2_t;

typedef struct int16x4x2_t {
  int16x4_t val[2];
} int16x4x2_t;

typedef struct int16x8x2_t {
  int16x8_t val[2];
} int16x8x2_t;

typedef struct int32x2x2_t {
  int32x2_t val[2];
} int32x2x2_t;

typedef struct int32x4x2_t {
  int32x4_t val[2];
} int32x4x2_t;

typedef struct int64x1x2_t {
  int64x1_t val[2];
} int64x1x2_t;

typedef struct int64x2x2_t {
  int64x2_t val[2];
} int64x2x2_t;

typedef struct uint8x8x2_t {
  uint8x8_t val[2];
} uint8x8x2_t;

typedef struct uint8x16x2_t {
  uint8x16_t val[2];
} uint8x16x2_t;

typedef struct uint16x4x2_t {
  uint16x4_t val[2];
} uint16x4x2_t;

typedef struct uint16x8x2_t {
  uint16x8_t val[2];
} uint16x8x2_t;

typedef struct uint32x2x2_t {
  uint32x2_t val[2];
} uint32x2x2_t;

typedef struct uint32x4x2_t {
  uint32x4_t val[2];
} uint32x4x2_t;

typedef struct uint64x1x2_t {
  uint64x1_t val[2];
} uint64x1x2_t;

typedef struct uint64x2x2_t {
  uint64x2_t val[2];
} uint64x2x2_t;

typedef struct float16x4x2_t {
  float16x4_t val[2];
} float16x4x2_t;

typedef struct float16x8x2_t {
  float16x8_t val[2];
} float16x8x2_t;

typedef struct float32x2x2_t {
  float32x2_t val[2];
} float32x2x2_t;

typedef struct float32x4x2_t {
  float32x4_t val[2];
} float32x4x2_t;


typedef struct float64x1x2_t {
  float64x1_t val[2];
} float64x1x2_t;

typedef struct float64x2x2_t {
  float64x2_t val[2];
} float64x2x2_t;


typedef struct poly8x8x2_t {
  poly8x8_t val[2];
} poly8x8x2_t;

typedef struct poly8x16x2_t {
  poly8x16_t val[2];
} poly8x16x2_t;

typedef struct poly16x4x2_t {
  poly16x4_t val[2];
} poly16x4x2_t;

typedef struct poly16x8x2_t {
  poly16x8_t val[2];
} poly16x8x2_t;

typedef struct poly64x1x2_t {
  poly64x1_t val[2];
} poly64x1x2_t;

typedef struct poly64x2x2_t {
  poly64x2_t val[2];
} poly64x2x2_t;

typedef struct int8x8x3_t {
  int8x8_t val[3];
} int8x8x3_t;

typedef struct int8x16x3_t {
  int8x16_t val[3];
} int8x16x3_t;

typedef struct int16x4x3_t {
  int16x4_t val[3];
} int16x4x3_t;

typedef struct int16x8x3_t {
  int16x8_t val[3];
} int16x8x3_t;

typedef struct int32x2x3_t {
  int32x2_t val[3];
} int32x2x3_t;

typedef struct int32x4x3_t {
  int32x4_t val[3];
} int32x4x3_t;

typedef struct int64x1x3_t {
  int64x1_t val[3];
} int64x1x3_t;

typedef struct int64x2x3_t {
  int64x2_t val[3];
} int64x2x3_t;

typedef struct uint8x8x3_t {
  uint8x8_t val[3];
} uint8x8x3_t;

typedef struct uint8x16x3_t {
  uint8x16_t val[3];
} uint8x16x3_t;

typedef struct uint16x4x3_t {
  uint16x4_t val[3];
} uint16x4x3_t;

typedef struct uint16x8x3_t {
  uint16x8_t val[3];
} uint16x8x3_t;

typedef struct uint32x2x3_t {
  uint32x2_t val[3];
} uint32x2x3_t;

typedef struct uint32x4x3_t {
  uint32x4_t val[3];
} uint32x4x3_t;

typedef struct uint64x1x3_t {
  uint64x1_t val[3];
} uint64x1x3_t;

typedef struct uint64x2x3_t {
  uint64x2_t val[3];
} uint64x2x3_t;

typedef struct float16x4x3_t {
  float16x4_t val[3];
} float16x4x3_t;

typedef struct float16x8x3_t {
  float16x8_t val[3];
} float16x8x3_t;

typedef struct float32x2x3_t {
  float32x2_t val[3];
} float32x2x3_t;

typedef struct float32x4x3_t {
  float32x4_t val[3];
} float32x4x3_t;


typedef struct float64x1x3_t {
  float64x1_t val[3];
} float64x1x3_t;

typedef struct float64x2x3_t {
  float64x2_t val[3];
} float64x2x3_t;


typedef struct poly8x8x3_t {
  poly8x8_t val[3];
} poly8x8x3_t;

typedef struct poly8x16x3_t {
  poly8x16_t val[3];
} poly8x16x3_t;

typedef struct poly16x4x3_t {
  poly16x4_t val[3];
} poly16x4x3_t;

typedef struct poly16x8x3_t {
  poly16x8_t val[3];
} poly16x8x3_t;

typedef struct poly64x1x3_t {
  poly64x1_t val[3];
} poly64x1x3_t;

typedef struct poly64x2x3_t {
  poly64x2_t val[3];
} poly64x2x3_t;

typedef struct int8x8x4_t {
  int8x8_t val[4];
} int8x8x4_t;

typedef struct int8x16x4_t {
  int8x16_t val[4];
} int8x16x4_t;

typedef struct int16x4x4_t {
  int16x4_t val[4];
} int16x4x4_t;

typedef struct int16x8x4_t {
  int16x8_t val[4];
} int16x8x4_t;

typedef struct int32x2x4_t {
  int32x2_t val[4];
} int32x2x4_t;

typedef struct int32x4x4_t {
  int32x4_t val[4];
} int32x4x4_t;

typedef struct int64x1x4_t {
  int64x1_t val[4];
} int64x1x4_t;

typedef struct int64x2x4_t {
  int64x2_t val[4];
} int64x2x4_t;

typedef struct uint8x8x4_t {
  uint8x8_t val[4];
} uint8x8x4_t;

typedef struct uint8x16x4_t {
  uint8x16_t val[4];
} uint8x16x4_t;

typedef struct uint16x4x4_t {
  uint16x4_t val[4];
} uint16x4x4_t;

typedef struct uint16x8x4_t {
  uint16x8_t val[4];
} uint16x8x4_t;

typedef struct uint32x2x4_t {
  uint32x2_t val[4];
} uint32x2x4_t;

typedef struct uint32x4x4_t {
  uint32x4_t val[4];
} uint32x4x4_t;

typedef struct uint64x1x4_t {
  uint64x1_t val[4];
} uint64x1x4_t;

typedef struct uint64x2x4_t {
  uint64x2_t val[4];
} uint64x2x4_t;

typedef struct float16x4x4_t {
  float16x4_t val[4];
} float16x4x4_t;

typedef struct float16x8x4_t {
  float16x8_t val[4];
} float16x8x4_t;

typedef struct float32x2x4_t {
  float32x2_t val[4];
} float32x2x4_t;

typedef struct float32x4x4_t {
  float32x4_t val[4];
} float32x4x4_t;


typedef struct float64x1x4_t {
  float64x1_t val[4];
} float64x1x4_t;

typedef struct float64x2x4_t {
  float64x2_t val[4];
} float64x2x4_t;


typedef struct poly8x8x4_t {
  poly8x8_t val[4];
} poly8x8x4_t;

typedef struct poly8x16x4_t {
  poly8x16_t val[4];
} poly8x16x4_t;

typedef struct poly16x4x4_t {
  poly16x4_t val[4];
} poly16x4x4_t;

typedef struct poly16x8x4_t {
  poly16x8_t val[4];
} poly16x8x4_t;

typedef struct poly64x1x4_t {
  poly64x1_t val[4];
} poly64x1x4_t;

typedef struct poly64x2x4_t {
  poly64x2_t val[4];
} poly64x2x4_t;

typedef __attribute__((neon_vector_type(4))) bfloat16_t bfloat16x4_t;
typedef __attribute__((neon_vector_type(8))) bfloat16_t bfloat16x8_t;

typedef struct bfloat16x4x2_t {
  bfloat16x4_t val[2];
} bfloat16x4x2_t;

typedef struct bfloat16x8x2_t {
  bfloat16x8_t val[2];
} bfloat16x8x2_t;

typedef struct bfloat16x4x3_t {
  bfloat16x4_t val[3];
} bfloat16x4x3_t;

typedef struct bfloat16x8x3_t {
  bfloat16x8_t val[3];
} bfloat16x8x3_t;

typedef struct bfloat16x4x4_t {
  bfloat16x4_t val[4];
} bfloat16x4x4_t;

typedef struct bfloat16x8x4_t {
  bfloat16x8_t val[4];
} bfloat16x8x4_t;
# 1721 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vabdq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vabdq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 1743 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vabdq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vabdq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 1765 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vabdq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vabdq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 1787 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vabdq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vabdq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 1809 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vabdq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vabdq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 1826 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vabdq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vabdq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 1848 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vabdq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vabdq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 1870 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vabd_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vabd_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 1892 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vabd_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vabd_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 1914 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vabd_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vabd_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 1936 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vabd_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vabd_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 1958 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vabd_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vabd_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 1975 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vabd_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vabd_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 1997 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vabd_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vabd_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 2019 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vabsq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vabsq_v((int8x16_t)__p0, 32);
  return __ret;
}
# 2035 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vabsq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vabsq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 2051 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vabsq_s32(int32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vabsq_v((int8x16_t)__p0, 34);
  return __ret;
}
# 2067 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vabsq_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vabsq_v((int8x16_t)__p0, 33);
  return __ret;
}
# 2083 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vabs_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vabs_v((int8x8_t)__p0, 0);
  return __ret;
}
# 2099 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vabs_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vabs_v((int8x8_t)__p0, 9);
  return __ret;
}
# 2115 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vabs_s32(int32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vabs_v((int8x8_t)__p0, 2);
  return __ret;
}
# 2131 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vabs_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vabs_v((int8x8_t)__p0, 1);
  return __ret;
}
# 2147 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vaddq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2164 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vaddq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2181 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vaddq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2198 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vaddq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2215 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vaddq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2232 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vaddq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2249 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vaddq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2266 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vaddq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2283 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vaddq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2300 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vadd_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2317 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vadd_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2333 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vadd_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vadd_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2356 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vadd_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2373 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vadd_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2390 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vadd_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2406 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vadd_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vadd_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 2429 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vadd_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vadd_v((int8x8_t)__p0, (int8x8_t)__p1, 4);
  return __ret;
}
# 2445 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vadd_p64(poly64x1_t __p0, poly64x1_t __p1) {
  poly64x1_t __ret;
  __ret = (poly64x1_t) __builtin_neon_vadd_v((int8x8_t)__p0, (int8x8_t)__p1, 6);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vadd_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4_t __ret;
  __ret = (poly16x4_t) __builtin_neon_vadd_v((int8x8_t)__p0, (int8x8_t)__p1, 5);
  return __ret;
}
# 2468 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vaddq_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 36);
  return __ret;
}
# 2485 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vaddq_p64(poly64x2_t __p0, poly64x2_t __p1) {
  poly64x2_t __ret;
  __ret = (poly64x2_t) __builtin_neon_vaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 38);
  return __ret;
}
# 2502 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vaddq_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8_t __ret;
  __ret = (poly16x8_t) __builtin_neon_vaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 37);
  return __ret;
}
# 2519 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vaddhn_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vaddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 17);
  return __ret;
}
# 2541 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vaddhn_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vaddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 18);
  return __ret;
}
# 2563 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vaddhn_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vaddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 16);
  return __ret;
}
# 2585 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vaddhn_s32(int32x4_t __p0, int32x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vaddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 1);
  return __ret;
}
# 2607 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vaddhn_s64(int64x2_t __p0, int64x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vaddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 2);
  return __ret;
}
# 2629 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vaddhn_s16(int16x8_t __p0, int16x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vaddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 0);
  return __ret;
}
# 2651 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vandq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2668 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vandq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2685 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vandq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2702 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vandq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2719 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vandq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2736 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vandq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2753 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vandq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2770 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vandq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2787 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vand_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2804 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vand_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2820 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vand_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vand_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2843 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vand_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2860 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vand_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2876 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vand_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vand_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __p0 & __p1;
  return __ret;
}
# 2899 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vbicq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 2916 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vbicq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 2933 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vbicq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 2950 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vbicq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 2967 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vbicq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 2984 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vbicq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3001 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vbicq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3018 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vbicq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3035 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vbic_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3052 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vbic_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3068 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vbic_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vbic_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3091 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vbic_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3108 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vbic_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3124 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vbic_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vbic_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __p0 & ~__p1;
  return __ret;
}
# 3147 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vbsl_p8(uint8x8_t __p0, poly8x8_t __p1, poly8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 4);
  return __ret;
}
# 3165 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vbsl_p16(uint16x4_t __p0, poly16x4_t __p1, poly16x4_t __p2) {
  poly16x4_t __ret;
  __ret = (poly16x4_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 5);
  return __ret;
}
# 3183 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vbslq_p8(uint8x16_t __p0, poly8x16_t __p1, poly8x16_t __p2) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 36);
  return __ret;
}
# 3201 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vbslq_p16(uint16x8_t __p0, poly16x8_t __p1, poly16x8_t __p2) {
  poly16x8_t __ret;
  __ret = (poly16x8_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 37);
  return __ret;
}
# 3219 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vbslq_u8(uint8x16_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 48);
  return __ret;
}
# 3237 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vbslq_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 3255 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vbslq_u64(uint64x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 51);
  return __ret;
}
# 3273 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vbslq_u16(uint16x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 49);
  return __ret;
}
# 3291 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vbslq_s8(uint8x16_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 32);
  return __ret;
}
# 3309 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vbslq_f32(uint32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 3327 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vbslq_s32(uint32x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 3345 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vbslq_s64(uint64x2_t __p0, int64x2_t __p1, int64x2_t __p2) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 35);
  return __ret;
}
# 3363 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vbslq_s16(uint16x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 33);
  return __ret;
}
# 3381 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vbsl_u8(uint8x8_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 16);
  return __ret;
}
# 3399 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vbsl_u32(uint32x2_t __p0, uint32x2_t __p1, uint32x2_t __p2) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 18);
  return __ret;
}
# 3416 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vbsl_u64(uint64x1_t __p0, uint64x1_t __p1, uint64x1_t __p2) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vbsl_u16(uint16x4_t __p0, uint16x4_t __p1, uint16x4_t __p2) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 17);
  return __ret;
}
# 3440 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vbsl_s8(uint8x8_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 0);
  return __ret;
}
# 3458 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vbsl_f32(uint32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 3476 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vbsl_s32(uint32x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 2);
  return __ret;
}
# 3493 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vbsl_s64(uint64x1_t __p0, int64x1_t __p1, int64x1_t __p2) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vbsl_s16(uint16x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 1);
  return __ret;
}
# 3517 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcageq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcageq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 3534 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcage_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcage_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 3551 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcagtq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcagtq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 3568 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcagt_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcagt_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 3585 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcaleq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcaleq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 3602 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcale_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcale_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 3619 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcaltq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcaltq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 3636 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcalt_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcalt_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 3653 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vceq_p8(poly8x8_t __p0, poly8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 == __p1);
  return __ret;
}
# 3670 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vceqq_p8(poly8x16_t __p0, poly8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 == __p1);
  return __ret;
}
# 3687 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vceqq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 == __p1);
  return __ret;
}
# 3704 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vceqq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 == __p1);
  return __ret;
}
# 3721 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vceqq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 == __p1);
  return __ret;
}
# 3738 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vceqq_s8(int8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 == __p1);
  return __ret;
}
# 3755 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vceqq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 == __p1);
  return __ret;
}
# 3772 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vceqq_s32(int32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 == __p1);
  return __ret;
}
# 3789 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vceqq_s16(int16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 == __p1);
  return __ret;
}
# 3806 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vceq_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 == __p1);
  return __ret;
}
# 3823 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vceq_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 == __p1);
  return __ret;
}
# 3840 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vceq_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 == __p1);
  return __ret;
}
# 3857 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vceq_s8(int8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 == __p1);
  return __ret;
}
# 3874 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vceq_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 == __p1);
  return __ret;
}
# 3891 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vceq_s32(int32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 == __p1);
  return __ret;
}
# 3908 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vceq_s16(int16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 == __p1);
  return __ret;
}
# 3925 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcgeq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 >= __p1);
  return __ret;
}
# 3942 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgeq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 >= __p1);
  return __ret;
}
# 3959 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcgeq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 >= __p1);
  return __ret;
}
# 3976 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcgeq_s8(int8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 >= __p1);
  return __ret;
}
# 3993 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgeq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 >= __p1);
  return __ret;
}
# 4010 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgeq_s32(int32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 >= __p1);
  return __ret;
}
# 4027 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcgeq_s16(int16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 >= __p1);
  return __ret;
}
# 4044 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcge_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 >= __p1);
  return __ret;
}
# 4061 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcge_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 >= __p1);
  return __ret;
}
# 4078 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcge_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 >= __p1);
  return __ret;
}
# 4095 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcge_s8(int8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 >= __p1);
  return __ret;
}
# 4112 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcge_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 >= __p1);
  return __ret;
}
# 4129 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcge_s32(int32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 >= __p1);
  return __ret;
}
# 4146 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcge_s16(int16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 >= __p1);
  return __ret;
}
# 4163 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcgtq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 > __p1);
  return __ret;
}
# 4180 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgtq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 > __p1);
  return __ret;
}
# 4197 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcgtq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 > __p1);
  return __ret;
}
# 4214 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcgtq_s8(int8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 > __p1);
  return __ret;
}
# 4231 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgtq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 > __p1);
  return __ret;
}
# 4248 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgtq_s32(int32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 > __p1);
  return __ret;
}
# 4265 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcgtq_s16(int16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 > __p1);
  return __ret;
}
# 4282 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcgt_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 > __p1);
  return __ret;
}
# 4299 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcgt_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 > __p1);
  return __ret;
}
# 4316 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcgt_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 > __p1);
  return __ret;
}
# 4333 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcgt_s8(int8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 > __p1);
  return __ret;
}
# 4350 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcgt_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 > __p1);
  return __ret;
}
# 4367 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcgt_s32(int32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 > __p1);
  return __ret;
}
# 4384 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcgt_s16(int16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 > __p1);
  return __ret;
}
# 4401 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcleq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 <= __p1);
  return __ret;
}
# 4418 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcleq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 <= __p1);
  return __ret;
}
# 4435 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcleq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 <= __p1);
  return __ret;
}
# 4452 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcleq_s8(int8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 <= __p1);
  return __ret;
}
# 4469 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcleq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 <= __p1);
  return __ret;
}
# 4486 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcleq_s32(int32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 <= __p1);
  return __ret;
}
# 4503 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcleq_s16(int16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 <= __p1);
  return __ret;
}
# 4520 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcle_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 <= __p1);
  return __ret;
}
# 4537 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcle_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 <= __p1);
  return __ret;
}
# 4554 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcle_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 <= __p1);
  return __ret;
}
# 4571 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcle_s8(int8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 <= __p1);
  return __ret;
}
# 4588 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcle_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 <= __p1);
  return __ret;
}
# 4605 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcle_s32(int32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 <= __p1);
  return __ret;
}
# 4622 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcle_s16(int16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 <= __p1);
  return __ret;
}
# 4639 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vclsq_u8(uint8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vclsq_v((int8x16_t)__p0, 32);
  return __ret;
}
# 4655 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vclsq_u32(uint32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vclsq_v((int8x16_t)__p0, 34);
  return __ret;
}
# 4671 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vclsq_u16(uint16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vclsq_v((int8x16_t)__p0, 33);
  return __ret;
}
# 4687 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vclsq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vclsq_v((int8x16_t)__p0, 32);
  return __ret;
}
# 4703 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vclsq_s32(int32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vclsq_v((int8x16_t)__p0, 34);
  return __ret;
}
# 4719 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vclsq_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vclsq_v((int8x16_t)__p0, 33);
  return __ret;
}
# 4735 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vcls_u8(uint8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vcls_v((int8x8_t)__p0, 0);
  return __ret;
}
# 4751 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vcls_u32(uint32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vcls_v((int8x8_t)__p0, 2);
  return __ret;
}
# 4767 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vcls_u16(uint16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vcls_v((int8x8_t)__p0, 1);
  return __ret;
}
# 4783 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vcls_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vcls_v((int8x8_t)__p0, 0);
  return __ret;
}
# 4799 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vcls_s32(int32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vcls_v((int8x8_t)__p0, 2);
  return __ret;
}
# 4815 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vcls_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vcls_v((int8x8_t)__p0, 1);
  return __ret;
}
# 4831 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcltq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 < __p1);
  return __ret;
}
# 4848 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcltq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 < __p1);
  return __ret;
}
# 4865 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcltq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 < __p1);
  return __ret;
}
# 4882 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcltq_s8(int8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0 < __p1);
  return __ret;
}
# 4899 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcltq_f32(float32x4_t __p0, float32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 < __p1);
  return __ret;
}
# 4916 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcltq_s32(int32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0 < __p1);
  return __ret;
}
# 4933 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcltq_s16(int16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 < __p1);
  return __ret;
}
# 4950 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vclt_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 < __p1);
  return __ret;
}
# 4967 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vclt_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 < __p1);
  return __ret;
}
# 4984 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vclt_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 < __p1);
  return __ret;
}
# 5001 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vclt_s8(int8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0 < __p1);
  return __ret;
}
# 5018 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vclt_f32(float32x2_t __p0, float32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 < __p1);
  return __ret;
}
# 5035 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vclt_s32(int32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0 < __p1);
  return __ret;
}
# 5052 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vclt_s16(int16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 < __p1);
  return __ret;
}
# 5069 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vclzq_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vclzq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 5085 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vclzq_u32(uint32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vclzq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 5101 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vclzq_u16(uint16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vclzq_v((int8x16_t)__p0, 49);
  return __ret;
}
# 5117 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vclzq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vclzq_v((int8x16_t)__p0, 32);
  return __ret;
}
# 5133 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vclzq_s32(int32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vclzq_v((int8x16_t)__p0, 34);
  return __ret;
}
# 5149 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vclzq_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vclzq_v((int8x16_t)__p0, 33);
  return __ret;
}
# 5165 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vclz_u8(uint8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vclz_v((int8x8_t)__p0, 16);
  return __ret;
}
# 5181 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vclz_u32(uint32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vclz_v((int8x8_t)__p0, 18);
  return __ret;
}
# 5197 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vclz_u16(uint16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vclz_v((int8x8_t)__p0, 17);
  return __ret;
}
# 5213 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vclz_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vclz_v((int8x8_t)__p0, 0);
  return __ret;
}
# 5229 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vclz_s32(int32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vclz_v((int8x8_t)__p0, 2);
  return __ret;
}
# 5245 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vclz_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vclz_v((int8x8_t)__p0, 1);
  return __ret;
}
# 5261 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vcnt_p8(poly8x8_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vcnt_v((int8x8_t)__p0, 4);
  return __ret;
}
# 5277 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vcntq_p8(poly8x16_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vcntq_v((int8x16_t)__p0, 36);
  return __ret;
}
# 5293 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcntq_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vcntq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 5309 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vcntq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vcntq_v((int8x16_t)__p0, 32);
  return __ret;
}
# 5325 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcnt_u8(uint8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vcnt_v((int8x8_t)__p0, 16);
  return __ret;
}
# 5341 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vcnt_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vcnt_v((int8x8_t)__p0, 0);
  return __ret;
}
# 5357 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vcombine_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
  return __ret;
}
# 5374 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vcombine_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3, 4, 5, 6, 7);
  return __ret;
}
# 5391 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcombine_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
  return __ret;
}
# 5413 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcombine_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3);
  return __ret;
}
# 5435 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcombine_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1);
  return __ret;
}
# 5450 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcombine_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3, 4, 5, 6, 7);
  return __ret;
}
# 5472 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vcombine_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
  return __ret;
}
# 5494 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vcombine_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3);
  return __ret;
}
# 5516 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vcombine_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3, 4, 5, 6, 7);
  return __ret;
}
# 5538 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vcombine_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3);
  return __ret;
}
# 5560 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vcombine_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1);
  return __ret;
}
# 5575 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vcombine_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3, 4, 5, 6, 7);
  return __ret;
}
# 5669 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vcvtq_f32_u32(uint32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcvtq_f32_v((int8x16_t)__p0, 50);
  return __ret;
}
# 5685 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vcvtq_f32_s32(int32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcvtq_f32_v((int8x16_t)__p0, 34);
  return __ret;
}
# 5701 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vcvt_f32_u32(uint32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcvt_f32_v((int8x8_t)__p0, 18);
  return __ret;
}
# 5717 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vcvt_f32_s32(int32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcvt_f32_v((int8x8_t)__p0, 2);
  return __ret;
}
# 5877 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vcvtq_s32_f32(float32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vcvtq_s32_v((int8x16_t)__p0, 34);
  return __ret;
}
# 5893 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vcvt_s32_f32(float32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vcvt_s32_v((int8x8_t)__p0, 2);
  return __ret;
}
# 5909 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcvtq_u32_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcvtq_u32_v((int8x16_t)__p0, 50);
  return __ret;
}
# 5925 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcvt_u32_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcvt_u32_v((int8x8_t)__p0, 18);
  return __ret;
}
# 6347 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vdup_n_p8(poly8_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6362 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vdup_n_p16(poly16_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 6377 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vdupq_n_p8(poly8_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6392 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vdupq_n_p16(poly16_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6407 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vdupq_n_u8(uint8_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6422 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vdupq_n_u32(uint32_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 6437 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vdupq_n_u64(uint64_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) {__p0, __p0};
  return __ret;
}
# 6452 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vdupq_n_u16(uint16_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6467 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vdupq_n_s8(int8_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6482 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vdupq_n_f32(float32_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 6514 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vdupq_n_s32(int32_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 6529 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vdupq_n_s64(int64_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) {__p0, __p0};
  return __ret;
}
# 6544 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vdupq_n_s16(int16_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6559 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vdup_n_u8(uint8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6574 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vdup_n_u32(uint32_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) {__p0, __p0};
  return __ret;
}
# 6588 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vdup_n_u64(uint64_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) {__p0};
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vdup_n_u16(uint16_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 6609 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vdup_n_s8(int8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 6624 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vdup_n_f32(float32_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) {__p0, __p0};
  return __ret;
}
# 6656 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vdup_n_s32(int32_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) {__p0, __p0};
  return __ret;
}
# 6670 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vdup_n_s64(int64_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) {__p0};
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vdup_n_s16(int16_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 6691 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t veorq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6708 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t veorq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6725 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t veorq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6742 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t veorq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6759 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t veorq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6776 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t veorq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6793 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t veorq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6810 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t veorq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6827 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t veor_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6844 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t veor_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6860 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t veor_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t veor_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6883 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t veor_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6900 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t veor_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 6916 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t veor_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t veor_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __p0 ^ __p1;
  return __ret;
}
# 7373 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vget_high_p8(poly8x16_t __p0) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 8, 9, 10, 11, 12, 13, 14, 15);
  return __ret;
}
# 7394 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vget_high_p16(poly16x8_t __p0) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 4, 5, 6, 7);
  return __ret;
}
# 7410 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vget_high_u8(uint8x16_t __p0) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 8, 9, 10, 11, 12, 13, 14, 15);
  return __ret;
}
# 7431 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vget_high_u32(uint32x4_t __p0) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 2, 3);
  return __ret;
}
# 7452 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vget_high_u64(uint64x2_t __p0) {
  uint64x1_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1);
  return __ret;
}
# 7467 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vget_high_u16(uint16x8_t __p0) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 4, 5, 6, 7);
  return __ret;
}
# 7488 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vget_high_s8(int8x16_t __p0) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 8, 9, 10, 11, 12, 13, 14, 15);
  return __ret;
}
# 7509 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vget_high_f32(float32x4_t __p0) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 2, 3);
  return __ret;
}
# 7530 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vget_high_f16(float16x8_t __p0) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 4, 5, 6, 7);
  return __ret;
}
# 7551 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vget_high_s32(int32x4_t __p0) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 2, 3);
  return __ret;
}
# 7572 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vget_high_s64(int64x2_t __p0) {
  int64x1_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1);
  return __ret;
}
# 7587 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vget_high_s16(int16x8_t __p0) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 4, 5, 6, 7);
  return __ret;
}
# 8080 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vget_low_p8(poly8x16_t __p0) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1, 2, 3, 4, 5, 6, 7);
  return __ret;
}
# 8096 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vget_low_p16(poly16x8_t __p0) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1, 2, 3);
  return __ret;
}
# 8112 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vget_low_u8(uint8x16_t __p0) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1, 2, 3, 4, 5, 6, 7);
  return __ret;
}
# 8128 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vget_low_u32(uint32x4_t __p0) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1);
  return __ret;
}
# 8144 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vget_low_u64(uint64x2_t __p0) {
  uint64x1_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0);
  return __ret;
}
# 8159 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vget_low_u16(uint16x8_t __p0) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1, 2, 3);
  return __ret;
}
# 8175 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vget_low_s8(int8x16_t __p0) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1, 2, 3, 4, 5, 6, 7);
  return __ret;
}
# 8191 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vget_low_f32(float32x4_t __p0) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1);
  return __ret;
}
# 8207 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vget_low_f16(float16x8_t __p0) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1, 2, 3);
  return __ret;
}
# 8223 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vget_low_s32(int32x4_t __p0) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1);
  return __ret;
}
# 8239 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vget_low_s64(int64x2_t __p0) {
  int64x1_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0);
  return __ret;
}
# 8254 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vget_low_s16(int16x8_t __p0) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1, 2, 3);
  return __ret;
}
# 8270 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vhaddq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 8287 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vhaddq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 8304 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vhaddq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 8321 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vhaddq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 8338 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vhaddq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 8355 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vhaddq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 8372 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vhadd_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 8389 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vhadd_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 8406 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vhadd_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 8423 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vhadd_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 8440 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vhadd_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 8457 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vhadd_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 8474 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vhsubq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vhsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 8491 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vhsubq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vhsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 8508 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vhsubq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vhsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 8525 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vhsubq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vhsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 8542 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vhsubq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vhsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 8559 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vhsubq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vhsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 8576 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vhsub_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vhsub_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 8593 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vhsub_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vhsub_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 8610 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vhsub_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vhsub_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 8627 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vhsub_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vhsub_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 8644 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vhsub_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vhsub_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 8661 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vhsub_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vhsub_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 13972 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vmaxq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 13989 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmaxq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 14006 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmaxq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 14023 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vmaxq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 14040 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmaxq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 14057 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmaxq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 14074 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmaxq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 14091 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vmax_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vmax_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 14108 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmax_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vmax_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 14125 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmax_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vmax_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 14142 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vmax_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vmax_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 14159 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmax_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vmax_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 14176 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmax_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vmax_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 14193 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmax_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vmax_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 14210 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vminq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vminq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 14227 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vminq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vminq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 14244 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vminq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vminq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 14261 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vminq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vminq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 14278 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vminq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vminq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 14295 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vminq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vminq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 14312 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vminq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vminq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 14329 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vmin_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vmin_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 14346 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmin_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vmin_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 14363 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmin_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vmin_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 14380 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vmin_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vmin_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 14397 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmin_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vmin_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 14414 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmin_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vmin_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 14431 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmin_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vmin_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 14448 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vmlaq_u8(uint8x16_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14466 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlaq_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14484 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmlaq_u16(uint16x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint16x8_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14502 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vmlaq_s8(int8x16_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int8x16_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14520 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmlaq_f32(float32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14538 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlaq_s32(int32x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int32x4_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14556 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmlaq_s16(int16x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int16x8_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14574 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vmla_u8(uint8x8_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14592 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmla_u32(uint32x2_t __p0, uint32x2_t __p1, uint32x2_t __p2) {
  uint32x2_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14610 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmla_u16(uint16x4_t __p0, uint16x4_t __p1, uint16x4_t __p2) {
  uint16x4_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14628 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vmla_s8(int8x8_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int8x8_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14646 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmla_f32(float32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14664 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmla_s32(int32x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int32x2_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14682 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmla_s16(int16x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int16x4_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 14940 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlaq_n_u32(uint32x4_t __p0, uint32x4_t __p1, uint32_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 + __p1 * (uint32x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 14957 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmlaq_n_u16(uint16x8_t __p0, uint16x8_t __p1, uint16_t __p2) {
  uint16x8_t __ret;
  __ret = __p0 + __p1 * (uint16x8_t) {__p2, __p2, __p2, __p2, __p2, __p2, __p2, __p2};
  return __ret;
}
# 14974 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmlaq_n_f32(float32x4_t __p0, float32x4_t __p1, float32_t __p2) {
  float32x4_t __ret;
  __ret = __p0 + __p1 * (float32x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 14991 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlaq_n_s32(int32x4_t __p0, int32x4_t __p1, int32_t __p2) {
  int32x4_t __ret;
  __ret = __p0 + __p1 * (int32x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 15008 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmlaq_n_s16(int16x8_t __p0, int16x8_t __p1, int16_t __p2) {
  int16x8_t __ret;
  __ret = __p0 + __p1 * (int16x8_t) {__p2, __p2, __p2, __p2, __p2, __p2, __p2, __p2};
  return __ret;
}
# 15025 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmla_n_u32(uint32x2_t __p0, uint32x2_t __p1, uint32_t __p2) {
  uint32x2_t __ret;
  __ret = __p0 + __p1 * (uint32x2_t) {__p2, __p2};
  return __ret;
}
# 15042 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmla_n_u16(uint16x4_t __p0, uint16x4_t __p1, uint16_t __p2) {
  uint16x4_t __ret;
  __ret = __p0 + __p1 * (uint16x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 15059 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmla_n_f32(float32x2_t __p0, float32x2_t __p1, float32_t __p2) {
  float32x2_t __ret;
  __ret = __p0 + __p1 * (float32x2_t) {__p2, __p2};
  return __ret;
}
# 15076 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmla_n_s32(int32x2_t __p0, int32x2_t __p1, int32_t __p2) {
  int32x2_t __ret;
  __ret = __p0 + __p1 * (int32x2_t) {__p2, __p2};
  return __ret;
}
# 15093 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmla_n_s16(int16x4_t __p0, int16x4_t __p1, int16_t __p2) {
  int16x4_t __ret;
  __ret = __p0 + __p1 * (int16x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 15110 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vmlsq_u8(uint8x16_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15128 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlsq_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15146 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmlsq_u16(uint16x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint16x8_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15164 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vmlsq_s8(int8x16_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int8x16_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15182 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmlsq_f32(float32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15200 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlsq_s32(int32x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int32x4_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15218 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmlsq_s16(int16x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int16x8_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15236 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vmls_u8(uint8x8_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15254 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmls_u32(uint32x2_t __p0, uint32x2_t __p1, uint32x2_t __p2) {
  uint32x2_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15272 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmls_u16(uint16x4_t __p0, uint16x4_t __p1, uint16x4_t __p2) {
  uint16x4_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15290 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vmls_s8(int8x8_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int8x8_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15308 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmls_f32(float32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15326 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmls_s32(int32x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int32x2_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15344 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmls_s16(int16x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int16x4_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 15602 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlsq_n_u32(uint32x4_t __p0, uint32x4_t __p1, uint32_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 - __p1 * (uint32x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 15619 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmlsq_n_u16(uint16x8_t __p0, uint16x8_t __p1, uint16_t __p2) {
  uint16x8_t __ret;
  __ret = __p0 - __p1 * (uint16x8_t) {__p2, __p2, __p2, __p2, __p2, __p2, __p2, __p2};
  return __ret;
}
# 15636 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmlsq_n_f32(float32x4_t __p0, float32x4_t __p1, float32_t __p2) {
  float32x4_t __ret;
  __ret = __p0 - __p1 * (float32x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 15653 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlsq_n_s32(int32x4_t __p0, int32x4_t __p1, int32_t __p2) {
  int32x4_t __ret;
  __ret = __p0 - __p1 * (int32x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 15670 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmlsq_n_s16(int16x8_t __p0, int16x8_t __p1, int16_t __p2) {
  int16x8_t __ret;
  __ret = __p0 - __p1 * (int16x8_t) {__p2, __p2, __p2, __p2, __p2, __p2, __p2, __p2};
  return __ret;
}
# 15687 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmls_n_u32(uint32x2_t __p0, uint32x2_t __p1, uint32_t __p2) {
  uint32x2_t __ret;
  __ret = __p0 - __p1 * (uint32x2_t) {__p2, __p2};
  return __ret;
}
# 15704 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmls_n_u16(uint16x4_t __p0, uint16x4_t __p1, uint16_t __p2) {
  uint16x4_t __ret;
  __ret = __p0 - __p1 * (uint16x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 15721 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmls_n_f32(float32x2_t __p0, float32x2_t __p1, float32_t __p2) {
  float32x2_t __ret;
  __ret = __p0 - __p1 * (float32x2_t) {__p2, __p2};
  return __ret;
}
# 15738 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmls_n_s32(int32x2_t __p0, int32x2_t __p1, int32_t __p2) {
  int32x2_t __ret;
  __ret = __p0 - __p1 * (int32x2_t) {__p2, __p2};
  return __ret;
}
# 15755 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmls_n_s16(int16x4_t __p0, int16x4_t __p1, int16_t __p2) {
  int16x4_t __ret;
  __ret = __p0 - __p1 * (int16x4_t) {__p2, __p2, __p2, __p2};
  return __ret;
}
# 15772 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vmov_n_p8(poly8_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 15787 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vmov_n_p16(poly16_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 15802 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vmovq_n_p8(poly8_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 15817 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vmovq_n_p16(poly16_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 15832 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vmovq_n_u8(uint8_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 15847 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmovq_n_u32(uint32_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 15862 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmovq_n_u64(uint64_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) {__p0, __p0};
  return __ret;
}
# 15877 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmovq_n_u16(uint16_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 15892 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vmovq_n_s8(int8_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 15907 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmovq_n_f32(float32_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 15939 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmovq_n_s32(int32_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 15954 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmovq_n_s64(int64_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) {__p0, __p0};
  return __ret;
}
# 15969 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmovq_n_s16(int16_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 15984 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vmov_n_u8(uint8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 15999 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmov_n_u32(uint32_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) {__p0, __p0};
  return __ret;
}
# 16013 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vmov_n_u64(uint64_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) {__p0};
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmov_n_u16(uint16_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 16034 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vmov_n_s8(int8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 16049 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmov_n_f32(float32_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) {__p0, __p0};
  return __ret;
}
# 16081 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmov_n_s32(int32_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) {__p0, __p0};
  return __ret;
}
# 16095 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vmov_n_s64(int64_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) {__p0};
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmov_n_s16(int16_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 16116 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmovl_u8(uint8x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vmovl_v((int8x8_t)__p0, 49);
  return __ret;
}
# 16137 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmovl_u32(uint32x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vmovl_v((int8x8_t)__p0, 51);
  return __ret;
}
# 16158 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmovl_u16(uint16x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vmovl_v((int8x8_t)__p0, 50);
  return __ret;
}
# 16179 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmovl_s8(int8x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vmovl_v((int8x8_t)__p0, 33);
  return __ret;
}
# 16200 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmovl_s32(int32x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vmovl_v((int8x8_t)__p0, 35);
  return __ret;
}
# 16221 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmovl_s16(int16x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vmovl_v((int8x8_t)__p0, 34);
  return __ret;
}
# 16242 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmovn_u32(uint32x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vmovn_v((int8x16_t)__p0, 17);
  return __ret;
}
# 16263 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmovn_u64(uint64x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vmovn_v((int8x16_t)__p0, 18);
  return __ret;
}
# 16284 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vmovn_u16(uint16x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vmovn_v((int8x16_t)__p0, 16);
  return __ret;
}
# 16305 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmovn_s32(int32x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vmovn_v((int8x16_t)__p0, 1);
  return __ret;
}
# 16326 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmovn_s64(int64x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vmovn_v((int8x16_t)__p0, 2);
  return __ret;
}
# 16347 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vmovn_s16(int16x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vmovn_v((int8x16_t)__p0, 0);
  return __ret;
}
# 16368 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vmulq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16385 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmulq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16402 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmulq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16419 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vmulq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16436 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmulq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16453 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmulq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16470 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmulq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16487 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vmul_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16504 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmul_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16521 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmul_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16538 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vmul_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16555 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmul_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16572 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmul_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16589 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmul_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 16606 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vmul_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vmul_v((int8x8_t)__p0, (int8x8_t)__p1, 4);
  return __ret;
}
# 16623 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vmulq_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vmulq_v((int8x16_t)__p0, (int8x16_t)__p1, 36);
  return __ret;
}
# 16850 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmulq_n_u32(uint32x4_t __p0, uint32_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 * (uint32x4_t) {__p1, __p1, __p1, __p1};
  return __ret;
}
# 16866 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmulq_n_u16(uint16x8_t __p0, uint16_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 * (uint16x8_t) {__p1, __p1, __p1, __p1, __p1, __p1, __p1, __p1};
  return __ret;
}
# 16882 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmulq_n_f32(float32x4_t __p0, float32_t __p1) {
  float32x4_t __ret;
  __ret = __p0 * (float32x4_t) {__p1, __p1, __p1, __p1};
  return __ret;
}
# 16898 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmulq_n_s32(int32x4_t __p0, int32_t __p1) {
  int32x4_t __ret;
  __ret = __p0 * (int32x4_t) {__p1, __p1, __p1, __p1};
  return __ret;
}
# 16914 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmulq_n_s16(int16x8_t __p0, int16_t __p1) {
  int16x8_t __ret;
  __ret = __p0 * (int16x8_t) {__p1, __p1, __p1, __p1, __p1, __p1, __p1, __p1};
  return __ret;
}
# 16930 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmul_n_u32(uint32x2_t __p0, uint32_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 * (uint32x2_t) {__p1, __p1};
  return __ret;
}
# 16946 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmul_n_u16(uint16x4_t __p0, uint16_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 * (uint16x4_t) {__p1, __p1, __p1, __p1};
  return __ret;
}
# 16962 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmul_n_f32(float32x2_t __p0, float32_t __p1) {
  float32x2_t __ret;
  __ret = __p0 * (float32x2_t) {__p1, __p1};
  return __ret;
}
# 16978 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmul_n_s32(int32x2_t __p0, int32_t __p1) {
  int32x2_t __ret;
  __ret = __p0 * (int32x2_t) {__p1, __p1};
  return __ret;
}
# 16994 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmul_n_s16(int16x4_t __p0, int16_t __p1) {
  int16x4_t __ret;
  __ret = __p0 * (int16x4_t) {__p1, __p1, __p1, __p1};
  return __ret;
}
# 17010 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vmull_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly16x8_t __ret;
  __ret = (poly16x8_t) __builtin_neon_vmull_v((int8x8_t)__p0, (int8x8_t)__p1, 37);
  return __ret;
}
# 17032 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmull_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vmull_v((int8x8_t)__p0, (int8x8_t)__p1, 49);
  return __ret;
}
# 17054 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmull_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vmull_v((int8x8_t)__p0, (int8x8_t)__p1, 51);
  return __ret;
}
# 17076 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmull_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vmull_v((int8x8_t)__p0, (int8x8_t)__p1, 50);
  return __ret;
}
# 17098 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmull_s8(int8x8_t __p0, int8x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vmull_v((int8x8_t)__p0, (int8x8_t)__p1, 33);
  return __ret;
}
# 17120 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmull_s32(int32x2_t __p0, int32x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vmull_v((int8x8_t)__p0, (int8x8_t)__p1, 35);
  return __ret;
}
# 17142 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmull_s16(int16x4_t __p0, int16x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vmull_v((int8x8_t)__p0, (int8x8_t)__p1, 34);
  return __ret;
}
# 17248 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmull_n_u32(uint32x2_t __p0, uint32_t __p1) {
  uint64x2_t __ret;
  __ret = vmull_u32(__p0, (uint32x2_t) {__p1, __p1});
  return __ret;
}
# 17269 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmull_n_u16(uint16x4_t __p0, uint16_t __p1) {
  uint32x4_t __ret;
  __ret = vmull_u16(__p0, (uint16x4_t) {__p1, __p1, __p1, __p1});
  return __ret;
}
# 17290 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmull_n_s32(int32x2_t __p0, int32_t __p1) {
  int64x2_t __ret;
  __ret = vmull_s32(__p0, (int32x2_t) {__p1, __p1});
  return __ret;
}
# 17311 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmull_n_s16(int16x4_t __p0, int16_t __p1) {
  int32x4_t __ret;
  __ret = vmull_s16(__p0, (int16x4_t) {__p1, __p1, __p1, __p1});
  return __ret;
}
# 17332 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vmvn_p8(poly8x8_t __p0) {
  poly8x8_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17348 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vmvnq_p8(poly8x16_t __p0) {
  poly8x16_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17364 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vmvnq_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17380 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmvnq_u32(uint32x4_t __p0) {
  uint32x4_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17396 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmvnq_u16(uint16x8_t __p0) {
  uint16x8_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17412 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vmvnq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17428 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmvnq_s32(int32x4_t __p0) {
  int32x4_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17444 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmvnq_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17460 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vmvn_u8(uint8x8_t __p0) {
  uint8x8_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17476 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vmvn_u32(uint32x2_t __p0) {
  uint32x2_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17492 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vmvn_u16(uint16x4_t __p0) {
  uint16x4_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17508 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vmvn_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17524 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vmvn_s32(int32x2_t __p0) {
  int32x2_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17540 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vmvn_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = ~__p0;
  return __ret;
}
# 17556 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vnegq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = -__p0;
  return __ret;
}
# 17572 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vnegq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = -__p0;
  return __ret;
}
# 17588 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vnegq_s32(int32x4_t __p0) {
  int32x4_t __ret;
  __ret = -__p0;
  return __ret;
}
# 17604 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vnegq_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = -__p0;
  return __ret;
}
# 17620 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vneg_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = -__p0;
  return __ret;
}
# 17636 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vneg_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = -__p0;
  return __ret;
}
# 17652 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vneg_s32(int32x2_t __p0) {
  int32x2_t __ret;
  __ret = -__p0;
  return __ret;
}
# 17668 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vneg_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = -__p0;
  return __ret;
}
# 17684 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vornq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17701 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vornq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17718 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vornq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17735 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vornq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17752 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vornq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17769 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vornq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17786 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vornq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17803 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vornq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17820 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vorn_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17837 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vorn_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17853 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vorn_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vorn_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17876 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vorn_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17893 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vorn_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17909 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vorn_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vorn_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __p0 | ~__p1;
  return __ret;
}
# 17932 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vorrq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 17949 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vorrq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 17966 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vorrq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 17983 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vorrq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18000 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vorrq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18017 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vorrq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18034 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vorrq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18051 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vorrq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18068 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vorr_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18085 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vorr_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18101 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vorr_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vorr_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18124 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vorr_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18141 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vorr_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18157 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vorr_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vorr_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __p0 | __p1;
  return __ret;
}
# 18180 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vpadalq_u8(uint16x8_t __p0, uint8x16_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vpadalq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 18197 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vpadalq_u32(uint64x2_t __p0, uint32x4_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vpadalq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 18214 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vpadalq_u16(uint32x4_t __p0, uint16x8_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vpadalq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 18231 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vpadalq_s8(int16x8_t __p0, int8x16_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vpadalq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 18248 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vpadalq_s32(int64x2_t __p0, int32x4_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vpadalq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 18265 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vpadalq_s16(int32x4_t __p0, int16x8_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vpadalq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 18282 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vpadal_u8(uint16x4_t __p0, uint8x8_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vpadal_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 18299 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vpadal_u32(uint64x1_t __p0, uint32x2_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vpadal_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}
# 18314 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vpadal_u16(uint32x2_t __p0, uint16x4_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vpadal_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 18331 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vpadal_s8(int16x4_t __p0, int8x8_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vpadal_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 18348 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vpadal_s32(int64x1_t __p0, int32x2_t __p1) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vpadal_v((int8x8_t)__p0, (int8x8_t)__p1, 3);
  return __ret;
}
# 18363 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vpadal_s16(int32x2_t __p0, int16x4_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vpadal_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 18380 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vpadd_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vpadd_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 18397 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vpadd_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vpadd_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 18414 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vpadd_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vpadd_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 18431 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vpadd_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vpadd_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 18448 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vpadd_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vpadd_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 18465 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vpadd_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vpadd_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 18482 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vpadd_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vpadd_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 18499 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vpaddlq_u8(uint8x16_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vpaddlq_v((int8x16_t)__p0, 49);
  return __ret;
}
# 18515 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vpaddlq_u32(uint32x4_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vpaddlq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 18531 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vpaddlq_u16(uint16x8_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vpaddlq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 18547 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vpaddlq_s8(int8x16_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vpaddlq_v((int8x16_t)__p0, 33);
  return __ret;
}
# 18563 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vpaddlq_s32(int32x4_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vpaddlq_v((int8x16_t)__p0, 35);
  return __ret;
}
# 18579 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vpaddlq_s16(int16x8_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vpaddlq_v((int8x16_t)__p0, 34);
  return __ret;
}
# 18595 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vpaddl_u8(uint8x8_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vpaddl_v((int8x8_t)__p0, 17);
  return __ret;
}
# 18611 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vpaddl_u32(uint32x2_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vpaddl_v((int8x8_t)__p0, 19);
  return __ret;
}
# 18626 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vpaddl_u16(uint16x4_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vpaddl_v((int8x8_t)__p0, 18);
  return __ret;
}
# 18642 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vpaddl_s8(int8x8_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vpaddl_v((int8x8_t)__p0, 1);
  return __ret;
}
# 18658 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vpaddl_s32(int32x2_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vpaddl_v((int8x8_t)__p0, 3);
  return __ret;
}
# 18673 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vpaddl_s16(int16x4_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vpaddl_v((int8x8_t)__p0, 2);
  return __ret;
}
# 18689 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vpmax_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vpmax_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 18706 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vpmax_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vpmax_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 18723 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vpmax_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vpmax_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 18740 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vpmax_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vpmax_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 18757 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vpmax_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vpmax_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 18774 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vpmax_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vpmax_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 18791 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vpmax_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vpmax_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 18808 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vpmin_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vpmin_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 18825 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vpmin_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vpmin_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 18842 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vpmin_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vpmin_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 18859 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vpmin_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vpmin_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 18876 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vpmin_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vpmin_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 18893 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vpmin_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vpmin_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 18910 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vpmin_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vpmin_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 18927 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqabsq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqabsq_v((int8x16_t)__p0, 32);
  return __ret;
}
# 18943 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqabsq_s32(int32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqabsq_v((int8x16_t)__p0, 34);
  return __ret;
}
# 18959 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqabsq_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqabsq_v((int8x16_t)__p0, 33);
  return __ret;
}
# 18975 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqabs_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqabs_v((int8x8_t)__p0, 0);
  return __ret;
}
# 18991 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqabs_s32(int32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqabs_v((int8x8_t)__p0, 2);
  return __ret;
}
# 19007 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqabs_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqabs_v((int8x8_t)__p0, 1);
  return __ret;
}
# 19023 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqaddq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 19040 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vqaddq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 19057 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vqaddq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 19074 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vqaddq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 19091 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqaddq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 19108 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqaddq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 19125 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqaddq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 19142 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqaddq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 19159 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqadd_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 19176 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vqadd_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 19192 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vqadd_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vqadd_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 19215 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqadd_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 19232 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqadd_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 19248 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vqadd_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqadd_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 19271 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmlal_s32(int64x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqdmlal_v((int8x16_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 35);
  return __ret;
}
# 19294 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmlal_s16(int32x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqdmlal_v((int8x16_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 34);
  return __ret;
}
# 19365 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmlal_n_s32(int64x2_t __p0, int32x2_t __p1, int32_t __p2) {
  int64x2_t __ret;
  __ret = vqdmlal_s32(__p0, __p1, (int32x2_t) {__p2, __p2});
  return __ret;
}
# 19387 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmlal_n_s16(int32x4_t __p0, int16x4_t __p1, int16_t __p2) {
  int32x4_t __ret;
  __ret = vqdmlal_s16(__p0, __p1, (int16x4_t) {__p2, __p2, __p2, __p2});
  return __ret;
}
# 19409 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmlsl_s32(int64x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqdmlsl_v((int8x16_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 35);
  return __ret;
}
# 19432 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmlsl_s16(int32x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqdmlsl_v((int8x16_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 34);
  return __ret;
}
# 19503 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmlsl_n_s32(int64x2_t __p0, int32x2_t __p1, int32_t __p2) {
  int64x2_t __ret;
  __ret = vqdmlsl_s32(__p0, __p1, (int32x2_t) {__p2, __p2});
  return __ret;
}
# 19525 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmlsl_n_s16(int32x4_t __p0, int16x4_t __p1, int16_t __p2) {
  int32x4_t __ret;
  __ret = vqdmlsl_s16(__p0, __p1, (int16x4_t) {__p2, __p2, __p2, __p2});
  return __ret;
}
# 19547 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmulhq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqdmulhq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 19569 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqdmulhq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqdmulhq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 19591 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqdmulh_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqdmulh_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 19613 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqdmulh_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqdmulh_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 19635 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmulhq_n_s32(int32x4_t __p0, int32_t __p1) {
  int32x4_t __ret;
  __ret = vqdmulhq_s32(__p0, (int32x4_t) {__p1, __p1, __p1, __p1});
  return __ret;
}
# 19651 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqdmulhq_n_s16(int16x8_t __p0, int16_t __p1) {
  int16x8_t __ret;
  __ret = vqdmulhq_s16(__p0, (int16x8_t) {__p1, __p1, __p1, __p1, __p1, __p1, __p1, __p1});
  return __ret;
}
# 19667 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqdmulh_n_s32(int32x2_t __p0, int32_t __p1) {
  int32x2_t __ret;
  __ret = vqdmulh_s32(__p0, (int32x2_t) {__p1, __p1});
  return __ret;
}
# 19683 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqdmulh_n_s16(int16x4_t __p0, int16_t __p1) {
  int16x4_t __ret;
  __ret = vqdmulh_s16(__p0, (int16x4_t) {__p1, __p1, __p1, __p1});
  return __ret;
}
# 19699 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmull_s32(int32x2_t __p0, int32x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqdmull_v((int8x8_t)__p0, (int8x8_t)__p1, 35);
  return __ret;
}
# 19721 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmull_s16(int16x4_t __p0, int16x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqdmull_v((int8x8_t)__p0, (int8x8_t)__p1, 34);
  return __ret;
}
# 19785 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmull_n_s32(int32x2_t __p0, int32_t __p1) {
  int64x2_t __ret;
  __ret = vqdmull_s32(__p0, (int32x2_t) {__p1, __p1});
  return __ret;
}
# 19806 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmull_n_s16(int16x4_t __p0, int16_t __p1) {
  int32x4_t __ret;
  __ret = vqdmull_s16(__p0, (int16x4_t) {__p1, __p1, __p1, __p1});
  return __ret;
}
# 19827 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vqmovn_u32(uint32x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vqmovn_v((int8x16_t)__p0, 17);
  return __ret;
}
# 19848 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vqmovn_u64(uint64x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vqmovn_v((int8x16_t)__p0, 18);
  return __ret;
}
# 19869 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqmovn_u16(uint16x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqmovn_v((int8x16_t)__p0, 16);
  return __ret;
}
# 19890 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqmovn_s32(int32x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqmovn_v((int8x16_t)__p0, 1);
  return __ret;
}
# 19911 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqmovn_s64(int64x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqmovn_v((int8x16_t)__p0, 2);
  return __ret;
}
# 19932 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqmovn_s16(int16x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqmovn_v((int8x16_t)__p0, 0);
  return __ret;
}
# 19953 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vqmovun_s32(int32x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vqmovun_v((int8x16_t)__p0, 17);
  return __ret;
}
# 19974 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vqmovun_s64(int64x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vqmovun_v((int8x16_t)__p0, 18);
  return __ret;
}
# 19995 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqmovun_s16(int16x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqmovun_v((int8x16_t)__p0, 16);
  return __ret;
}
# 20016 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqnegq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqnegq_v((int8x16_t)__p0, 32);
  return __ret;
}
# 20032 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqnegq_s32(int32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqnegq_v((int8x16_t)__p0, 34);
  return __ret;
}
# 20048 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqnegq_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqnegq_v((int8x16_t)__p0, 33);
  return __ret;
}
# 20064 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqneg_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqneg_v((int8x8_t)__p0, 0);
  return __ret;
}
# 20080 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqneg_s32(int32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqneg_v((int8x8_t)__p0, 2);
  return __ret;
}
# 20096 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqneg_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqneg_v((int8x8_t)__p0, 1);
  return __ret;
}
# 20112 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqrdmulhq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqrdmulhq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 20134 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqrdmulhq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqrdmulhq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 20156 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqrdmulh_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqrdmulh_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 20178 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqrdmulh_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqrdmulh_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 20200 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqrdmulhq_n_s32(int32x4_t __p0, int32_t __p1) {
  int32x4_t __ret;
  __ret = vqrdmulhq_s32(__p0, (int32x4_t) {__p1, __p1, __p1, __p1});
  return __ret;
}
# 20216 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqrdmulhq_n_s16(int16x8_t __p0, int16_t __p1) {
  int16x8_t __ret;
  __ret = vqrdmulhq_s16(__p0, (int16x8_t) {__p1, __p1, __p1, __p1, __p1, __p1, __p1, __p1});
  return __ret;
}
# 20232 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqrdmulh_n_s32(int32x2_t __p0, int32_t __p1) {
  int32x2_t __ret;
  __ret = vqrdmulh_s32(__p0, (int32x2_t) {__p1, __p1});
  return __ret;
}
# 20248 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqrdmulh_n_s16(int16x4_t __p0, int16_t __p1) {
  int16x4_t __ret;
  __ret = vqrdmulh_s16(__p0, (int16x4_t) {__p1, __p1, __p1, __p1});
  return __ret;
}
# 20264 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqrshlq_u8(uint8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 20281 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vqrshlq_u32(uint32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vqrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 20298 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vqrshlq_u64(uint64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vqrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 20315 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vqrshlq_u16(uint16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vqrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 20332 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqrshlq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 20349 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqrshlq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 20366 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqrshlq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 20383 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqrshlq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 20400 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqrshl_u8(uint8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 20417 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vqrshl_u32(uint32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vqrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 20433 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vqrshl_u64(uint64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vqrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vqrshl_u16(uint16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vqrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 20456 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqrshl_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 20473 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqrshl_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 20489 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vqrshl_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vqrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqrshl_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 20728 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqshlq_u8(uint8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 20745 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vqshlq_u32(uint32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vqshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 20762 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vqshlq_u64(uint64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vqshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 20779 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vqshlq_u16(uint16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vqshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 20796 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqshlq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 20813 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqshlq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 20830 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqshlq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 20847 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqshlq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 20864 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqshl_u8(uint8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqshl_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 20881 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vqshl_u32(uint32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vqshl_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 20897 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vqshl_u64(uint64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vqshl_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vqshl_u16(uint16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vqshl_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 20920 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqshl_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqshl_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 20937 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqshl_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqshl_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 20953 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vqshl_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vqshl_v((int8x8_t)__p0, (int8x8_t)__p1, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqshl_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqshl_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 21588 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqsubq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 21605 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vqsubq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vqsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 21622 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vqsubq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vqsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 21639 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vqsubq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vqsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 21656 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqsubq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 21673 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqsubq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 21690 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqsubq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 21707 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqsubq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqsubq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 21724 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqsub_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqsub_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 21741 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vqsub_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vqsub_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 21757 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vqsub_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vqsub_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vqsub_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vqsub_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 21780 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqsub_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqsub_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 21797 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vqsub_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqsub_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 21813 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vqsub_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vqsub_v((int8x8_t)__p0, (int8x8_t)__p1, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vqsub_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqsub_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 21836 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vraddhn_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vraddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 17);
  return __ret;
}
# 21858 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vraddhn_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vraddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 18);
  return __ret;
}
# 21880 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vraddhn_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vraddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 16);
  return __ret;
}
# 21902 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vraddhn_s32(int32x4_t __p0, int32x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vraddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 1);
  return __ret;
}
# 21924 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vraddhn_s64(int64x2_t __p0, int64x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vraddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 2);
  return __ret;
}
# 21946 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vraddhn_s16(int16x8_t __p0, int16x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vraddhn_v((int8x16_t)__p0, (int8x16_t)__p1, 0);
  return __ret;
}
# 21968 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vrecpeq_u32(uint32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vrecpeq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 21984 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrecpeq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrecpeq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 22000 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vrecpe_u32(uint32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vrecpe_v((int8x8_t)__p0, 18);
  return __ret;
}
# 22016 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrecpe_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrecpe_v((int8x8_t)__p0, 9);
  return __ret;
}
# 22032 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrecpsq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrecpsq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 22049 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrecps_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrecps_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 22066 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vrev16_p8(poly8x8_t __p0) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6);
  return __ret;
}
# 22082 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vrev16q_p8(poly8x16_t __p0) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
  return __ret;
}
# 22098 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vrev16q_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
  return __ret;
}
# 22114 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vrev16q_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
  return __ret;
}
# 22130 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vrev16_u8(uint8x8_t __p0) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6);
  return __ret;
}
# 22146 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vrev16_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6);
  return __ret;
}
# 22162 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vrev32_p8(poly8x8_t __p0) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4);
  return __ret;
}
# 22178 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vrev32_p16(poly16x4_t __p0) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2);
  return __ret;
}
# 22194 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vrev32q_p8(poly8x16_t __p0) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12);
  return __ret;
}
# 22210 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vrev32q_p16(poly16x8_t __p0) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6);
  return __ret;
}
# 22226 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vrev32q_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12);
  return __ret;
}
# 22242 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vrev32q_u16(uint16x8_t __p0) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6);
  return __ret;
}
# 22258 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vrev32q_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12);
  return __ret;
}
# 22274 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vrev32q_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2, 5, 4, 7, 6);
  return __ret;
}
# 22290 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vrev32_u8(uint8x8_t __p0) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4);
  return __ret;
}
# 22306 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vrev32_u16(uint16x4_t __p0) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2);
  return __ret;
}
# 22322 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vrev32_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4);
  return __ret;
}
# 22338 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vrev32_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2);
  return __ret;
}
# 22354 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vrev64_p8(poly8x8_t __p0) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 7, 6, 5, 4, 3, 2, 1, 0);
  return __ret;
}
# 22370 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vrev64_p16(poly16x4_t __p0) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0);
  return __ret;
}
# 22386 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vrev64q_p8(poly8x16_t __p0) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8);
  return __ret;
}
# 22402 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vrev64q_p16(poly16x8_t __p0) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4);
  return __ret;
}
# 22418 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vrev64q_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8);
  return __ret;
}
# 22434 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vrev64q_u32(uint32x4_t __p0) {
  uint32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2);
  return __ret;
}
# 22450 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vrev64q_u16(uint16x8_t __p0) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4);
  return __ret;
}
# 22466 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vrev64q_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8);
  return __ret;
}
# 22482 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrev64q_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2);
  return __ret;
}
# 22498 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vrev64q_s32(int32x4_t __p0) {
  int32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0, 3, 2);
  return __ret;
}
# 22514 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vrev64q_s16(int16x8_t __p0) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4);
  return __ret;
}
# 22530 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vrev64_u8(uint8x8_t __p0) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 7, 6, 5, 4, 3, 2, 1, 0);
  return __ret;
}
# 22546 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vrev64_u32(uint32x2_t __p0) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0);
  return __ret;
}
# 22562 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vrev64_u16(uint16x4_t __p0) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0);
  return __ret;
}
# 22578 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vrev64_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 7, 6, 5, 4, 3, 2, 1, 0);
  return __ret;
}
# 22594 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrev64_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0);
  return __ret;
}
# 22610 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vrev64_s32(int32x2_t __p0) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1, 0);
  return __ret;
}
# 22626 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vrev64_s16(int16x4_t __p0) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0);
  return __ret;
}
# 22642 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vrhaddq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vrhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 22659 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vrhaddq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vrhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 22676 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vrhaddq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vrhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 22693 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vrhaddq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vrhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 22710 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vrhaddq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vrhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 22727 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vrhaddq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vrhaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 22744 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vrhadd_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vrhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 22761 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vrhadd_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vrhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 22778 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vrhadd_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vrhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 22795 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vrhadd_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vrhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 22812 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vrhadd_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vrhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 22829 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vrhadd_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vrhadd_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 22846 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vrshlq_u8(uint8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 22863 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vrshlq_u32(uint32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 22880 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vrshlq_u64(uint64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 22897 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vrshlq_u16(uint16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 22914 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vrshlq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 22931 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vrshlq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 22948 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vrshlq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 22965 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vrshlq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vrshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 22982 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vrshl_u8(uint8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 22999 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vrshl_u32(uint32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 23015 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vrshl_u64(uint64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vrshl_u16(uint16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 23038 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vrshl_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 23055 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vrshl_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 23071 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vrshl_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vrshl_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vrshl_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 23502 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vrsqrteq_u32(uint32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vrsqrteq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 23518 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrsqrteq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrsqrteq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 23534 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vrsqrte_u32(uint32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vrsqrte_v((int8x8_t)__p0, 18);
  return __ret;
}
# 23550 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrsqrte_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrsqrte_v((int8x8_t)__p0, 9);
  return __ret;
}
# 23566 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrsqrtsq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrsqrtsq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 23583 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrsqrts_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrsqrts_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 23908 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vrsubhn_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vrsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 17);
  return __ret;
}
# 23930 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vrsubhn_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vrsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 18);
  return __ret;
}
# 23952 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vrsubhn_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vrsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 16);
  return __ret;
}
# 23974 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vrsubhn_s32(int32x4_t __p0, int32x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vrsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 1);
  return __ret;
}
# 23996 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vrsubhn_s64(int64x2_t __p0, int64x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vrsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 2);
  return __ret;
}
# 24018 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vrsubhn_s16(int16x8_t __p0, int16x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vrsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 0);
  return __ret;
}
# 24594 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vshlq_u8(uint8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 24611 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vshlq_u32(uint32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 24628 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vshlq_u64(uint64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 24645 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vshlq_u16(uint16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 24662 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vshlq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 24679 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vshlq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 24696 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vshlq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 24713 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vshlq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vshlq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 24730 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vshl_u8(uint8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vshl_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 24747 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vshl_u32(uint32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vshl_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 24763 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vshl_u64(uint64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vshl_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vshl_u16(uint16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vshl_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 24786 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vshl_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vshl_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 24803 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vshl_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vshl_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 24819 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vshl_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vshl_v((int8x8_t)__p0, (int8x8_t)__p1, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vshl_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vshl_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 29878 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vsubq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 29895 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vsubq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 29912 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vsubq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 29929 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vsubq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 29946 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vsubq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 29963 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vsubq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 29980 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vsubq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 29997 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vsubq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30014 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vsubq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30031 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vsub_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30048 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vsub_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30064 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vsub_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vsub_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30087 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vsub_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30104 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vsub_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30121 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vsub_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30137 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vsub_s64(int64x1_t __p0, int64x1_t __p1) {
  int64x1_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vsub_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 30160 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vsubhn_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 17);
  return __ret;
}
# 30182 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vsubhn_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 18);
  return __ret;
}
# 30204 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vsubhn_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 16);
  return __ret;
}
# 30226 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vsubhn_s32(int32x4_t __p0, int32x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 1);
  return __ret;
}
# 30248 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vsubhn_s64(int64x2_t __p0, int64x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 2);
  return __ret;
}
# 30270 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vsubhn_s16(int16x8_t __p0, int16x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vsubhn_v((int8x16_t)__p0, (int8x16_t)__p1, 0);
  return __ret;
}
# 30292 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vsubl_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint16x8_t __ret;
  __ret = vmovl_u8(__p0) - vmovl_u8(__p1);
  return __ret;
}
# 30309 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vsubl_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint64x2_t __ret;
  __ret = vmovl_u32(__p0) - vmovl_u32(__p1);
  return __ret;
}
# 30326 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vsubl_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint32x4_t __ret;
  __ret = vmovl_u16(__p0) - vmovl_u16(__p1);
  return __ret;
}
# 30343 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vsubl_s8(int8x8_t __p0, int8x8_t __p1) {
  int16x8_t __ret;
  __ret = vmovl_s8(__p0) - vmovl_s8(__p1);
  return __ret;
}
# 30360 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vsubl_s32(int32x2_t __p0, int32x2_t __p1) {
  int64x2_t __ret;
  __ret = vmovl_s32(__p0) - vmovl_s32(__p1);
  return __ret;
}
# 30377 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vsubl_s16(int16x4_t __p0, int16x4_t __p1) {
  int32x4_t __ret;
  __ret = vmovl_s16(__p0) - vmovl_s16(__p1);
  return __ret;
}
# 30394 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vsubw_u8(uint16x8_t __p0, uint8x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 - vmovl_u8(__p1);
  return __ret;
}
# 30411 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vsubw_u32(uint64x2_t __p0, uint32x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 - vmovl_u32(__p1);
  return __ret;
}
# 30428 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vsubw_u16(uint32x4_t __p0, uint16x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 - vmovl_u16(__p1);
  return __ret;
}
# 30445 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vsubw_s8(int16x8_t __p0, int8x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 - vmovl_s8(__p1);
  return __ret;
}
# 30462 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vsubw_s32(int64x2_t __p0, int32x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 - vmovl_s32(__p1);
  return __ret;
}
# 30479 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vsubw_s16(int32x4_t __p0, int16x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 - vmovl_s16(__p1);
  return __ret;
}
# 30496 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtbl1_p8(poly8x8_t __p0, uint8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vtbl1_v((int8x8_t)__p0, (int8x8_t)__p1, 4);
  return __ret;
}
# 30513 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtbl1_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtbl1_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 30530 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtbl1_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vtbl1_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 30547 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtbl2_p8(poly8x8x2_t __p0, uint8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vtbl2_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p1, 4);
  return __ret;
}
# 30566 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtbl2_u8(uint8x8x2_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtbl2_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p1, 16);
  return __ret;
}
# 30585 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtbl2_s8(int8x8x2_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vtbl2_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p1, 0);
  return __ret;
}
# 30604 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtbl3_p8(poly8x8x3_t __p0, uint8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vtbl3_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p0.val[2], (int8x8_t)__p1, 4);
  return __ret;
}
# 30624 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtbl3_u8(uint8x8x3_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtbl3_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p0.val[2], (int8x8_t)__p1, 16);
  return __ret;
}
# 30644 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtbl3_s8(int8x8x3_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vtbl3_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p0.val[2], (int8x8_t)__p1, 0);
  return __ret;
}
# 30664 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtbl4_p8(poly8x8x4_t __p0, uint8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vtbl4_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p0.val[2], (int8x8_t)__p0.val[3], (int8x8_t)__p1, 4);
  return __ret;
}
# 30685 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtbl4_u8(uint8x8x4_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtbl4_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p0.val[2], (int8x8_t)__p0.val[3], (int8x8_t)__p1, 16);
  return __ret;
}
# 30706 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtbl4_s8(int8x8x4_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vtbl4_v((int8x8_t)__p0.val[0], (int8x8_t)__p0.val[1], (int8x8_t)__p0.val[2], (int8x8_t)__p0.val[3], (int8x8_t)__p1, 0);
  return __ret;
}
# 30727 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtbx1_p8(poly8x8_t __p0, poly8x8_t __p1, uint8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vtbx1_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 4);
  return __ret;
}
# 30745 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtbx1_u8(uint8x8_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtbx1_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 16);
  return __ret;
}
# 30763 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtbx1_s8(int8x8_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vtbx1_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 0);
  return __ret;
}
# 30781 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtbx2_p8(poly8x8_t __p0, poly8x8x2_t __p1, uint8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vtbx2_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p2, 4);
  return __ret;
}
# 30801 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtbx2_u8(uint8x8_t __p0, uint8x8x2_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtbx2_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p2, 16);
  return __ret;
}
# 30821 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtbx2_s8(int8x8_t __p0, int8x8x2_t __p1, int8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vtbx2_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p2, 0);
  return __ret;
}
# 30841 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtbx3_p8(poly8x8_t __p0, poly8x8x3_t __p1, uint8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vtbx3_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p1.val[2], (int8x8_t)__p2, 4);
  return __ret;
}
# 30862 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtbx3_u8(uint8x8_t __p0, uint8x8x3_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtbx3_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p1.val[2], (int8x8_t)__p2, 16);
  return __ret;
}
# 30883 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtbx3_s8(int8x8_t __p0, int8x8x3_t __p1, int8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vtbx3_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p1.val[2], (int8x8_t)__p2, 0);
  return __ret;
}
# 30904 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtbx4_p8(poly8x8_t __p0, poly8x8x4_t __p1, uint8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vtbx4_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p1.val[2], (int8x8_t)__p1.val[3], (int8x8_t)__p2, 4);
  return __ret;
}
# 30926 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtbx4_u8(uint8x8_t __p0, uint8x8x4_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtbx4_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p1.val[2], (int8x8_t)__p1.val[3], (int8x8_t)__p2, 16);
  return __ret;
}
# 30948 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtbx4_s8(int8x8_t __p0, int8x8x4_t __p1, int8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vtbx4_v((int8x8_t)__p0, (int8x8_t)__p1.val[0], (int8x8_t)__p1.val[1], (int8x8_t)__p1.val[2], (int8x8_t)__p1.val[3], (int8x8_t)__p2, 0);
  return __ret;
}
# 30970 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8x2_t vtrn_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 4);
  return __ret;
}
# 30989 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4x2_t vtrn_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 5);
  return __ret;
}
# 31008 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16x2_t vtrnq_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 36);
  return __ret;
}
# 31027 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8x2_t vtrnq_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 37);
  return __ret;
}
# 31046 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16x2_t vtrnq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 31065 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4x2_t vtrnq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 31084 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8x2_t vtrnq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 31103 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16x2_t vtrnq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 31122 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4x2_t vtrnq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 31141 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4x2_t vtrnq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 31160 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8x2_t vtrnq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8x2_t __ret;
  __builtin_neon_vtrnq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 31179 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8x2_t vtrn_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 31198 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2x2_t vtrn_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 31217 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4x2_t vtrn_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 31236 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8x2_t vtrn_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 31255 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2x2_t vtrn_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 31274 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2x2_t vtrn_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 31293 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4x2_t vtrn_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4x2_t __ret;
  __builtin_neon_vtrn_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 31312 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtst_p8(poly8x8_t __p0, poly8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 31329 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vtst_p16(poly16x4_t __p0, poly16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 31346 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vtstq_p8(poly8x16_t __p0, poly8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 31363 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vtstq_p16(poly16x8_t __p0, poly16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 31380 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vtstq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 31397 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vtstq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 31414 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vtstq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 31431 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vtstq_s8(int8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 31448 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vtstq_s32(int32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 31465 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vtstq_s16(int16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 31482 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtst_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 31499 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vtst_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 31516 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vtst_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 31533 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtst_s8(int8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 31550 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vtst_s32(int32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 31567 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vtst_s16(int16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 31584 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8x2_t vuzp_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 4);
  return __ret;
}
# 31603 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4x2_t vuzp_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 5);
  return __ret;
}
# 31622 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16x2_t vuzpq_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 36);
  return __ret;
}
# 31641 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8x2_t vuzpq_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 37);
  return __ret;
}
# 31660 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16x2_t vuzpq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 31679 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4x2_t vuzpq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 31698 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8x2_t vuzpq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 31717 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16x2_t vuzpq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 31736 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4x2_t vuzpq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 31755 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4x2_t vuzpq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 31774 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8x2_t vuzpq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8x2_t __ret;
  __builtin_neon_vuzpq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 31793 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8x2_t vuzp_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 31812 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2x2_t vuzp_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 31831 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4x2_t vuzp_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 31850 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8x2_t vuzp_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 31869 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2x2_t vuzp_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 31888 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2x2_t vuzp_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 31907 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4x2_t vuzp_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4x2_t __ret;
  __builtin_neon_vuzp_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 31926 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8x2_t vzip_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 4);
  return __ret;
}
# 31945 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4x2_t vzip_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 5);
  return __ret;
}
# 31964 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16x2_t vzipq_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 36);
  return __ret;
}
# 31983 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8x2_t vzipq_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 37);
  return __ret;
}
# 32002 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16x2_t vzipq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 32021 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4x2_t vzipq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 32040 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8x2_t vzipq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 32059 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16x2_t vzipq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 32078 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4x2_t vzipq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 32097 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4x2_t vzipq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 32116 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8x2_t vzipq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8x2_t __ret;
  __builtin_neon_vzipq_v(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 32135 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8x2_t vzip_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 32154 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2x2_t vzip_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 32173 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4x2_t vzip_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 32192 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8x2_t vzip_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 32211 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2x2_t vzip_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 32230 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2x2_t vzip_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 32249 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4x2_t vzip_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4x2_t __ret;
  __builtin_neon_vzip_v(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 32364 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x4_t vbfdotq_f32(float32x4_t __p0, bfloat16x8_t __p1, bfloat16x8_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vbfdotq_f32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 32387 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x2_t vbfdot_f32(float32x2_t __p0, bfloat16x4_t __p1, bfloat16x4_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vbfdot_f32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 32522 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x4_t vbfmlalbq_f32(float32x4_t __p0, bfloat16x8_t __p1, bfloat16x8_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vbfmlalbq_f32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 32545 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x4_t vbfmlaltq_f32(float32x4_t __p0, bfloat16x8_t __p1, bfloat16x8_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vbfmlaltq_f32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 32568 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x4_t vbfmmlaq_f32(float32x4_t __p0, bfloat16x8_t __p1, bfloat16x8_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vbfmmlaq_f32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 32586 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vcombine_bf16(bfloat16x4_t __p0, bfloat16x4_t __p1) {
  bfloat16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1, 2, 3, 4, 5, 6, 7);
  return __ret;
}
# 32614 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x4_t vcvt_f32_bf16(bfloat16x4_t __p0_134) {
  float32x4_t __ret_134;
bfloat16x4_t __reint_134 = __p0_134;
int32x4_t __reint1_134 = __extension__ ({ int32x4_t __ret; int16x4_t __s0 = *(int16x4_t *) &__reint_134; __ret = (int32x4_t) __builtin_neon_vshll_n_v((int8x8_t)__s0, 16, 34); __ret; });
  __ret_134 = *(float32x4_t *) &__reint1_134;
  return __ret_134;
}
# 32640 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32_t vcvtah_f32_bf16(bfloat16_t __p0) {
  float32_t __ret;
bfloat16_t __reint = __p0;
int32_t __reint1 = *(int32_t *) &__reint << 16;
  __ret = *(float32_t *) &__reint1;
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16_t vcvth_bf16_f32(float32_t __p0) {
  bfloat16_t __ret;
  __ret = (bfloat16_t) __builtin_neon_vcvth_bf16_f32(__p0);
  return __ret;
}
# 32759 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vdupq_n_bf16(bfloat16_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t) {__p0, __p0, __p0, __p0, __p0, __p0, __p0, __p0};
  return __ret;
}
# 32774 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vdup_n_bf16(bfloat16_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t) {__p0, __p0, __p0, __p0};
  return __ret;
}
# 32789 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vget_high_bf16(bfloat16x8_t __p0) {
  bfloat16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 4, 5, 6, 7);
  return __ret;
}
# 32856 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vget_low_bf16(bfloat16x8_t __p0) {
  bfloat16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0, 1, 2, 3);
  return __ret;
}
# 33835 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("dotprod"))) uint32x4_t vdotq_u32(uint32x4_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vdotq_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 33858 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("dotprod"))) int32x4_t vdotq_s32(int32x4_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vdotq_s32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 33881 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("dotprod"))) uint32x2_t vdot_u32(uint32x2_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vdot_u32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 18);
  return __ret;
}
# 33904 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("dotprod"))) int32x2_t vdot_s32(int32x2_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vdot_s32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 2);
  return __ret;
}
# 34039 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vabdq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vabdq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 34056 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vabd_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vabd_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 34073 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vabsq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vabsq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 34089 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vabs_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vabs_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 34105 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vaddq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 34122 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vadd_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 34139 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vbslq_f16(uint16x8_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vbslq_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 40);
  return __ret;
}
# 34157 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vbsl_f16(uint16x4_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vbsl_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 8);
  return __ret;
}
# 34175 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcageq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcageq_f16((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 34192 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcage_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcage_f16((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 34209 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcagtq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcagtq_f16((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 34226 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcagt_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcagt_f16((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 34243 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcaleq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcaleq_f16((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 34260 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcale_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcale_f16((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 34277 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcaltq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcaltq_f16((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 34294 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcalt_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcalt_f16((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 34311 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vceqq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 == __p1);
  return __ret;
}
# 34328 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vceq_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 == __p1);
  return __ret;
}
# 34345 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vceqzq_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vceqzq_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 34361 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vceqz_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vceqz_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 34377 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcgeq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 >= __p1);
  return __ret;
}
# 34394 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcge_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 >= __p1);
  return __ret;
}
# 34411 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcgezq_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcgezq_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 34427 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcgez_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcgez_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 34443 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcgtq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 > __p1);
  return __ret;
}
# 34460 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcgt_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 > __p1);
  return __ret;
}
# 34477 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcgtzq_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcgtzq_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 34493 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcgtz_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcgtz_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 34509 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcleq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 <= __p1);
  return __ret;
}
# 34526 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcle_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 <= __p1);
  return __ret;
}
# 34543 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vclezq_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vclezq_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 34559 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vclez_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vclez_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 34575 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcltq_f16(float16x8_t __p0, float16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0 < __p1);
  return __ret;
}
# 34592 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vclt_f16(float16x4_t __p0, float16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0 < __p1);
  return __ret;
}
# 34609 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcltzq_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcltzq_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 34625 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcltz_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcltz_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 34641 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vcvtq_f16_u16(uint16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vcvtq_f16_u16((int8x16_t)__p0, 49);
  return __ret;
}
# 34657 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vcvtq_f16_s16(int16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vcvtq_f16_s16((int8x16_t)__p0, 33);
  return __ret;
}
# 34673 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vcvt_f16_u16(uint16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcvt_f16_u16((int8x8_t)__p0, 17);
  return __ret;
}
# 34689 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vcvt_f16_s16(int16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcvt_f16_s16((int8x8_t)__p0, 1);
  return __ret;
}
# 34849 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x8_t vcvtq_s16_f16(float16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vcvtq_s16_f16((int8x16_t)__p0, 33);
  return __ret;
}
# 34865 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x4_t vcvt_s16_f16(float16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vcvt_s16_f16((int8x8_t)__p0, 1);
  return __ret;
}
# 34881 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcvtq_u16_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcvtq_u16_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 34897 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcvt_u16_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcvt_u16_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 34913 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x8_t vcvtaq_s16_f16(float16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vcvtaq_s16_f16((int8x16_t)__p0, 33);
  return __ret;
}
# 34929 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x4_t vcvta_s16_f16(float16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vcvta_s16_f16((int8x8_t)__p0, 1);
  return __ret;
}
# 34945 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcvtaq_u16_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcvtaq_u16_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 34961 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcvta_u16_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcvta_u16_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 34977 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x8_t vcvtmq_s16_f16(float16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vcvtmq_s16_f16((int8x16_t)__p0, 33);
  return __ret;
}
# 34993 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x4_t vcvtm_s16_f16(float16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vcvtm_s16_f16((int8x8_t)__p0, 1);
  return __ret;
}
# 35009 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcvtmq_u16_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcvtmq_u16_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 35025 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcvtm_u16_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcvtm_u16_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 35041 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x8_t vcvtnq_s16_f16(float16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vcvtnq_s16_f16((int8x16_t)__p0, 33);
  return __ret;
}
# 35057 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x4_t vcvtn_s16_f16(float16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vcvtn_s16_f16((int8x8_t)__p0, 1);
  return __ret;
}
# 35073 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcvtnq_u16_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcvtnq_u16_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 35089 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcvtn_u16_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcvtn_u16_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 35105 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x8_t vcvtpq_s16_f16(float16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vcvtpq_s16_f16((int8x16_t)__p0, 33);
  return __ret;
}
# 35121 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) int16x4_t vcvtp_s16_f16(float16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vcvtp_s16_f16((int8x8_t)__p0, 1);
  return __ret;
}
# 35137 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x8_t vcvtpq_u16_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcvtpq_u16_f16((int8x16_t)__p0, 49);
  return __ret;
}
# 35153 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) uint16x4_t vcvtp_u16_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcvtp_u16_f16((int8x8_t)__p0, 17);
  return __ret;
}
# 35211 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vfmaq_f16(float16x8_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vfmaq_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 40);
  return __ret;
}
# 35234 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vfma_f16(float16x4_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vfma_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 8);
  return __ret;
}
# 35257 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vfmsq_f16(float16x8_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float16x8_t __ret;
  __ret = vfmaq_f16(__p0, -__p1, __p2);
  return __ret;
}
# 35275 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vfms_f16(float16x4_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float16x4_t __ret;
  __ret = vfma_f16(__p0, -__p1, __p2);
  return __ret;
}
# 35293 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vmaxq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vmaxq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 35310 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vmax_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vmax_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35327 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vminq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vminq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 35344 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vmin_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vmin_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35361 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vmulq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 35378 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vmul_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 35477 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vnegq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = -__p0;
  return __ret;
}
# 35493 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vneg_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = -__p0;
  return __ret;
}
# 35509 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vpadd_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vpadd_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35526 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vpmax_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vpmax_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35543 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vpmin_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vpmin_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35560 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrecpeq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrecpeq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 35576 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrecpe_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrecpe_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 35592 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrecpsq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrecpsq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 35609 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrecps_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrecps_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35626 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrev64q_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0, 7, 6, 5, 4);
  return __ret;
}
# 35642 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrev64_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 3, 2, 1, 0);
  return __ret;
}
# 35658 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrsqrteq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrsqrteq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 35674 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrsqrte_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrsqrte_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 35690 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrsqrtsq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrsqrtsq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 35707 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrsqrts_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrsqrts_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35724 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vsubq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 35741 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vsub_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 35758 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8x2_t vtrnq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8x2_t __ret;
  __builtin_neon_vtrnq_f16(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 35777 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4x2_t vtrn_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4x2_t __ret;
  __builtin_neon_vtrn_f16(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35796 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8x2_t vuzpq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8x2_t __ret;
  __builtin_neon_vuzpq_f16(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 35815 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4x2_t vuzp_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4x2_t __ret;
  __builtin_neon_vuzp_f16(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35834 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8x2_t vzipq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8x2_t __ret;
  __builtin_neon_vzipq_f16(&__ret, (int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 35853 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4x2_t vzip_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4x2_t __ret;
  __builtin_neon_vzip_f16(&__ret, (int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 35872 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("i8mm"))) uint32x4_t vmmlaq_u32(uint32x4_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vmmlaq_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 35890 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("i8mm"))) int32x4_t vmmlaq_s32(int32x4_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vmmlaq_s32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 35908 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("i8mm"))) int32x4_t vusdotq_s32(int32x4_t __p0, uint8x16_t __p1, int8x16_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vusdotq_s32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 35931 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("i8mm"))) int32x2_t vusdot_s32(int32x2_t __p0, uint8x8_t __p1, int8x8_t __p2) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vusdot_s32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 2);
  return __ret;
}
# 36006 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("i8mm"))) int32x4_t vusmmlaq_s32(int32x4_t __p0, uint8x16_t __p1, int8x16_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vusmmlaq_s32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 36024 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int32x4_t vqrdmlahq_s32(int32x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqrdmlahq_s32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 36047 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int16x8_t vqrdmlahq_s16(int16x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqrdmlahq_s16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 33);
  return __ret;
}
# 36070 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int32x2_t vqrdmlah_s32(int32x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqrdmlah_s32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 2);
  return __ret;
}
# 36093 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int16x4_t vqrdmlah_s16(int16x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqrdmlah_s16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 1);
  return __ret;
}
# 36212 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int32x4_t vqrdmlshq_s32(int32x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vqrdmlshq_s32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 36235 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int16x8_t vqrdmlshq_s16(int16x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vqrdmlshq_s16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 33);
  return __ret;
}
# 36258 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int32x2_t vqrdmlsh_s32(int32x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vqrdmlsh_s32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 2);
  return __ret;
}
# 36281 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int16x4_t vqrdmlsh_s16(int16x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vqrdmlsh_s16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 1);
  return __ret;
}
# 36400 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x2_t vcadd_rot270_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcadd_rot270_f32((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 36417 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x2_t vcadd_rot90_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcadd_rot90_f32((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 36434 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x4_t vcaddq_rot270_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcaddq_rot270_f32((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 36451 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x4_t vcaddq_rot90_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcaddq_rot90_f32((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 36468 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x4_t vcmlaq_f32(float32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcmlaq_f32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 36491 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x2_t vcmla_f32(float32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcmla_f32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 36626 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x4_t vcmlaq_rot180_f32(float32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcmlaq_rot180_f32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 36649 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x2_t vcmla_rot180_f32(float32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcmla_rot180_f32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 36784 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x4_t vcmlaq_rot270_f32(float32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcmlaq_rot270_f32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 36807 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x2_t vcmla_rot270_f32(float32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcmla_rot270_f32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 36942 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x4_t vcmlaq_rot90_f32(float32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcmlaq_rot90_f32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 36965 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float32x2_t vcmla_rot90_f32(float32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcmla_rot90_f32((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 37100 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x4_t vcadd_rot270_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcadd_rot270_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 37117 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x4_t vcadd_rot90_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcadd_rot90_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 37134 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x8_t vcaddq_rot270_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vcaddq_rot270_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 37151 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x8_t vcaddq_rot90_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vcaddq_rot90_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 37168 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x8_t vcmlaq_f16(float16x8_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vcmlaq_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 40);
  return __ret;
}
# 37191 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x4_t vcmla_f16(float16x4_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcmla_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 8);
  return __ret;
}
# 37326 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x8_t vcmlaq_rot180_f16(float16x8_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vcmlaq_rot180_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 40);
  return __ret;
}
# 37349 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x4_t vcmla_rot180_f16(float16x4_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcmla_rot180_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 8);
  return __ret;
}
# 37484 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x8_t vcmlaq_rot270_f16(float16x8_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vcmlaq_rot270_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 40);
  return __ret;
}
# 37507 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x4_t vcmla_rot270_f16(float16x4_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcmla_rot270_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 8);
  return __ret;
}
# 37642 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x8_t vcmlaq_rot90_f16(float16x8_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vcmlaq_rot90_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 40);
  return __ret;
}
# 37665 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a,fullfp16"))) float16x4_t vcmla_rot90_f16(float16x4_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcmla_rot90_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 8);
  return __ret;
}
# 39621 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vcvt_f16_f32(float32x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vcvt_f16_f32((int8x16_t)__p0, 41);
  return __ret;
}
# 39642 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vcvt_f32_f16(float16x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vcvt_f32_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 40569 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vcvtaq_s32_f32(float32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vcvtaq_s32_v((int8x16_t)__p0, 34);
  return __ret;
}
# 40585 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vcvta_s32_f32(float32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vcvta_s32_v((int8x8_t)__p0, 2);
  return __ret;
}
# 40601 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcvtaq_u32_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcvtaq_u32_v((int8x16_t)__p0, 50);
  return __ret;
}
# 40617 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcvta_u32_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcvta_u32_v((int8x8_t)__p0, 18);
  return __ret;
}
# 40633 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vcvtmq_s32_f32(float32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vcvtmq_s32_v((int8x16_t)__p0, 34);
  return __ret;
}
# 40649 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vcvtm_s32_f32(float32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vcvtm_s32_v((int8x8_t)__p0, 2);
  return __ret;
}
# 40665 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcvtmq_u32_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcvtmq_u32_v((int8x16_t)__p0, 50);
  return __ret;
}
# 40681 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcvtm_u32_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcvtm_u32_v((int8x8_t)__p0, 18);
  return __ret;
}
# 40697 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vcvtnq_s32_f32(float32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vcvtnq_s32_v((int8x16_t)__p0, 34);
  return __ret;
}
# 40713 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vcvtn_s32_f32(float32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vcvtn_s32_v((int8x8_t)__p0, 2);
  return __ret;
}
# 40729 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcvtnq_u32_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcvtnq_u32_v((int8x16_t)__p0, 50);
  return __ret;
}
# 40745 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcvtn_u32_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcvtn_u32_v((int8x8_t)__p0, 18);
  return __ret;
}
# 40761 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vcvtpq_s32_f32(float32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vcvtpq_s32_v((int8x16_t)__p0, 34);
  return __ret;
}
# 40777 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vcvtp_s32_f32(float32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vcvtp_s32_v((int8x8_t)__p0, 2);
  return __ret;
}
# 40793 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcvtpq_u32_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcvtpq_u32_v((int8x16_t)__p0, 50);
  return __ret;
}
# 40809 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcvtp_u32_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcvtp_u32_v((int8x8_t)__p0, 18);
  return __ret;
}
# 40825 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("aes"))) uint8x16_t vaesdq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vaesdq_u8((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 40842 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("aes"))) uint8x16_t vaeseq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vaeseq_u8((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 40859 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("aes"))) uint8x16_t vaesimcq_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vaesimcq_u8((int8x16_t)__p0, 48);
  return __ret;
}
# 40875 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("aes"))) uint8x16_t vaesmcq_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vaesmcq_u8((int8x16_t)__p0, 48);
  return __ret;
}
# 40891 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha1cq_u32(uint32x4_t __p0, uint32_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha1cq_u32(__p0, __p1, __p2);
  return __ret;
}
# 40907 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32_t vsha1h_u32(uint32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vsha1h_u32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha1mq_u32(uint32x4_t __p0, uint32_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha1mq_u32(__p0, __p1, __p2);
  return __ret;
}
# 40930 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha1pq_u32(uint32x4_t __p0, uint32_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha1pq_u32(__p0, __p1, __p2);
  return __ret;
}
# 40947 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha1su0q_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha1su0q_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 40965 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha1su1q_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha1su1q_u32((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 40982 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha256hq_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha256hq_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 41000 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha256h2q_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha256h2q_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 41018 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha256su0q_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha256su0q_u32((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 41035 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha2"))) uint32x4_t vsha256su1q_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsha256su1q_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 41055 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrndq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrndq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 41071 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrnd_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrnd_v((int8x8_t)__p0, 9);
  return __ret;
}
# 41087 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrndaq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrndaq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 41103 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrnda_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrnda_v((int8x8_t)__p0, 9);
  return __ret;
}
# 41119 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrndiq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrndiq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 41135 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrndi_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrndi_v((int8x8_t)__p0, 9);
  return __ret;
}
# 41151 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrndmq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrndmq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 41167 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrndm_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrndm_v((int8x8_t)__p0, 9);
  return __ret;
}
# 41183 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrndnq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrndnq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 41199 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrndn_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrndn_v((int8x8_t)__p0, 9);
  return __ret;
}
# 41214 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vrndns_f32(float32_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vrndns_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrndpq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrndpq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 41236 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrndp_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrndp_v((int8x8_t)__p0, 9);
  return __ret;
}
# 41252 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vrndxq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrndxq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 41268 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vrndx_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrndx_v((int8x8_t)__p0, 9);
  return __ret;
}
# 41284 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrndq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrndq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 41300 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrnd_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrnd_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 41316 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrndaq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrndaq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 41332 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrnda_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrnda_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 41348 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrndmq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrndmq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 41364 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrndm_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrndm_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 41380 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrndnq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrndnq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 41396 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrndn_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrndn_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 41412 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrndpq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrndpq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 41428 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrndp_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrndp_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 41444 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrndxq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrndxq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 41460 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrndx_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrndx_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 41478 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmaxnmq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vmaxnmq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 41495 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmaxnm_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vmaxnm_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 41512 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vminnmq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vminnmq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 41529 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vminnm_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vminnm_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 41546 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vmaxnmq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vmaxnmq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 41563 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vmaxnm_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vmaxnm_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 41580 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vminnmq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vminnmq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 41597 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vminnm_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vminnm_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 41616 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vfmaq_f32(float32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vfmaq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 41639 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vfma_f32(float32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vfma_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 41662 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vfmaq_n_f32(float32x4_t __p0, float32x4_t __p1, float32_t __p2) {
  float32x4_t __ret;
  __ret = vfmaq_f32(__p0, __p1, (float32x4_t) {__p2, __p2, __p2, __p2});
  return __ret;
}
# 41679 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vfma_n_f32(float32x2_t __p0, float32x2_t __p1, float32_t __p2) {
  float32x2_t __ret;
  __ret = vfma_f32(__p0, __p1, (float32x2_t) {__p2, __p2});
  return __ret;
}
# 41696 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vfmsq_f32(float32x4_t __p0, float32x4_t __p1, float32x4_t __p2) {
  float32x4_t __ret;
  __ret = vfmaq_f32(__p0, -__p1, __p2);
  return __ret;
}
# 41714 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vfms_f32(float32x2_t __p0, float32x2_t __p1, float32x2_t __p2) {
  float32x2_t __ret;
  __ret = vfma_f32(__p0, -__p1, __p2);
  return __ret;
}
# 41734 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vabdq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vabdq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 41750 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vabd_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vabd_v((int8x8_t)__p0, (int8x8_t)__p1, 10);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vabdd_f64(float64_t __p0, float64_t __p1) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vabdd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vabds_f32(float32_t __p0, float32_t __p1) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vabds_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vabsq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vabsq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 41782 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vabsq_s64(int64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vabsq_v((int8x16_t)__p0, 35);
  return __ret;
}
# 41797 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vabs_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vabs_v((int8x8_t)__p0, 10);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vabs_s64(int64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vabs_v((int8x8_t)__p0, 3);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vabsd_s64(int64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vabsd_s64(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vaddq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
# 41829 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vadd_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = __p0 + __p1;
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vaddd_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vaddd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vaddd_s64(int64_t __p0, int64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vaddd_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vaddq_p128(poly128_t __p0, poly128_t __p1) {
  poly128_t __ret;
  __ret = (poly128_t) __builtin_neon_vaddq_p128(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vaddhn_high_u32(uint16x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint16x8_t __ret;
  __ret = vcombine_u16(__p0, vaddhn_u32(__p1, __p2));
  return __ret;
}
# 41868 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vaddhn_high_u64(uint32x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint32x4_t __ret;
  __ret = vcombine_u32(__p0, vaddhn_u64(__p1, __p2));
  return __ret;
}
# 41886 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vaddhn_high_u16(uint8x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint8x16_t __ret;
  __ret = vcombine_u8(__p0, vaddhn_u16(__p1, __p2));
  return __ret;
}
# 41904 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vaddhn_high_s32(int16x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int16x8_t __ret;
  __ret = vcombine_s16(__p0, vaddhn_s32(__p1, __p2));
  return __ret;
}
# 41922 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vaddhn_high_s64(int32x2_t __p0, int64x2_t __p1, int64x2_t __p2) {
  int32x4_t __ret;
  __ret = vcombine_s32(__p0, vaddhn_s64(__p1, __p2));
  return __ret;
}
# 41940 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vaddhn_high_s16(int8x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int8x16_t __ret;
  __ret = vcombine_s8(__p0, vaddhn_s16(__p1, __p2));
  return __ret;
}
# 41958 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vaddlvq_u8(uint8x16_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vaddlvq_u8(__p0);
  return __ret;
}
# 41973 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vaddlvq_u32(uint32x4_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vaddlvq_u32(__p0);
  return __ret;
}
# 41988 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vaddlvq_u16(uint16x8_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vaddlvq_u16(__p0);
  return __ret;
}
# 42003 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vaddlvq_s8(int8x16_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vaddlvq_s8(__p0);
  return __ret;
}
# 42018 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vaddlvq_s32(int32x4_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vaddlvq_s32(__p0);
  return __ret;
}
# 42033 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vaddlvq_s16(int16x8_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vaddlvq_s16(__p0);
  return __ret;
}
# 42048 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vaddlv_u8(uint8x8_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vaddlv_u8(__p0);
  return __ret;
}
# 42063 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vaddlv_u32(uint32x2_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vaddlv_u32(__p0);
  return __ret;
}
# 42078 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vaddlv_u16(uint16x4_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vaddlv_u16(__p0);
  return __ret;
}
# 42093 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vaddlv_s8(int8x8_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vaddlv_s8(__p0);
  return __ret;
}
# 42108 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vaddlv_s32(int32x2_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vaddlv_s32(__p0);
  return __ret;
}
# 42123 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vaddlv_s16(int16x4_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vaddlv_s16(__p0);
  return __ret;
}
# 42138 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vaddvq_u8(uint8x16_t __p0) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vaddvq_u8(__p0);
  return __ret;
}
# 42153 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vaddvq_u32(uint32x4_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vaddvq_u32(__p0);
  return __ret;
}
# 42168 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vaddvq_u64(uint64x2_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vaddvq_u64(__p0);
  return __ret;
}
# 42183 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vaddvq_u16(uint16x8_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vaddvq_u16(__p0);
  return __ret;
}
# 42198 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vaddvq_s8(int8x16_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vaddvq_s8(__p0);
  return __ret;
}
# 42213 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vaddvq_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vaddvq_f64(__p0);
  return __ret;
}
# 42228 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vaddvq_f32(float32x4_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vaddvq_f32(__p0);
  return __ret;
}
# 42243 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vaddvq_s32(int32x4_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vaddvq_s32(__p0);
  return __ret;
}
# 42258 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vaddvq_s64(int64x2_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vaddvq_s64(__p0);
  return __ret;
}
# 42273 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vaddvq_s16(int16x8_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vaddvq_s16(__p0);
  return __ret;
}
# 42288 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vaddv_u8(uint8x8_t __p0) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vaddv_u8(__p0);
  return __ret;
}
# 42303 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vaddv_u32(uint32x2_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vaddv_u32(__p0);
  return __ret;
}
# 42318 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vaddv_u16(uint16x4_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vaddv_u16(__p0);
  return __ret;
}
# 42333 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vaddv_s8(int8x8_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vaddv_s8(__p0);
  return __ret;
}
# 42348 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vaddv_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vaddv_f32(__p0);
  return __ret;
}
# 42363 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vaddv_s32(int32x2_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vaddv_s32(__p0);
  return __ret;
}
# 42378 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vaddv_s16(int16x4_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vaddv_s16(__p0);
  return __ret;
}
# 42392 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vbsl_p64(uint64x1_t __p0, poly64x1_t __p1, poly64x1_t __p2) {
  poly64x1_t __ret;
  __ret = (poly64x1_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 6);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vbslq_p64(uint64x2_t __p0, poly64x2_t __p1, poly64x2_t __p2) {
  poly64x2_t __ret;
  __ret = (poly64x2_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 38);
  return __ret;
}
# 42416 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vbslq_f64(uint64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vbslq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 42);
  return __ret;
}
# 42433 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vbsl_f64(uint64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vbsl_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcageq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcageq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 42455 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcage_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcage_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcaged_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcaged_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcages_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcages_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcagtq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcagtq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 42487 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcagt_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcagt_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcagtd_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcagtd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcagts_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcagts_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcaleq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcaleq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 42519 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcale_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcale_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcaled_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcaled_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcales_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcales_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcaltq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcaltq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 42551 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcalt_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcalt_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcaltd_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcaltd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcalts_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcalts_f32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vceq_p64(poly64x1_t __p0, poly64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 == __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vceqq_p64(poly64x2_t __p0, poly64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 == __p1);
  return __ret;
}
# 42589 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vceqq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 == __p1);
  return __ret;
}
# 42606 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vceqq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 == __p1);
  return __ret;
}
# 42623 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vceqq_s64(int64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 == __p1);
  return __ret;
}
# 42639 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vceq_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 == __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vceq_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 == __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vceq_s64(int64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 == __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vceqd_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vceqd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vceqd_s64(int64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vceqd_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vceqd_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vceqd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vceqs_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vceqs_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vceqz_p8(poly8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 16);
  return __ret;
}
# 42690 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vceqz_p64(poly64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vceqzq_p8(poly8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 42712 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vceqzq_p64(poly64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 42728 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vceqzq_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 42744 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vceqzq_u32(uint32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 42760 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vceqzq_u64(uint64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 42776 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vceqzq_u16(uint16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 49);
  return __ret;
}
# 42792 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vceqzq_s8(int8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 42808 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vceqzq_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 42824 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vceqzq_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 42840 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vceqzq_s32(int32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 42856 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vceqzq_s64(int64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 42872 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vceqzq_s16(int16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vceqzq_v((int8x16_t)__p0, 49);
  return __ret;
}
# 42888 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vceqz_u8(uint8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 16);
  return __ret;
}
# 42904 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vceqz_u32(uint32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 18);
  return __ret;
}
# 42919 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vceqz_u64(uint64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vceqz_u16(uint16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 17);
  return __ret;
}
# 42941 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vceqz_s8(int8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 16);
  return __ret;
}
# 42956 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vceqz_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vceqz_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 18);
  return __ret;
}
# 42978 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vceqz_s32(int32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 18);
  return __ret;
}
# 42993 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vceqz_s64(int64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vceqz_s16(int16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vceqz_v((int8x8_t)__p0, 17);
  return __ret;
}
# 43014 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vceqzd_u64(uint64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vceqzd_u64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vceqzd_s64(int64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vceqzd_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vceqzd_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vceqzd_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vceqzs_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vceqzs_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgeq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 >= __p1);
  return __ret;
}
# 43052 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgeq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 >= __p1);
  return __ret;
}
# 43069 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgeq_s64(int64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 >= __p1);
  return __ret;
}
# 43085 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcge_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 >= __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcge_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 >= __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcge_s64(int64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 >= __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcged_s64(int64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcged_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcged_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcged_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcged_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcged_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcges_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcges_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcgezq_s8(int8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vcgezq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 43137 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgezq_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcgezq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 43153 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgezq_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcgezq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 43169 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgezq_s32(int32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcgezq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 43185 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgezq_s64(int64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcgezq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 43201 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcgezq_s16(int16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcgezq_v((int8x16_t)__p0, 49);
  return __ret;
}
# 43217 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcgez_s8(int8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vcgez_v((int8x8_t)__p0, 16);
  return __ret;
}
# 43232 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcgez_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcgez_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcgez_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcgez_v((int8x8_t)__p0, 18);
  return __ret;
}
# 43254 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcgez_s32(int32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcgez_v((int8x8_t)__p0, 18);
  return __ret;
}
# 43269 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcgez_s64(int64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcgez_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcgez_s16(int16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcgez_v((int8x8_t)__p0, 17);
  return __ret;
}
# 43290 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcgezd_s64(int64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcgezd_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcgezd_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcgezd_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcgezs_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcgezs_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgtq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 > __p1);
  return __ret;
}
# 43323 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgtq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 > __p1);
  return __ret;
}
# 43340 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgtq_s64(int64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 > __p1);
  return __ret;
}
# 43356 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcgt_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 > __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcgt_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 > __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcgt_s64(int64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 > __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcgtd_s64(int64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcgtd_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcgtd_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcgtd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcgtd_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcgtd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcgts_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcgts_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcgtzq_s8(int8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vcgtzq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 43408 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgtzq_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcgtzq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 43424 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgtzq_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcgtzq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 43440 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcgtzq_s32(int32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcgtzq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 43456 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcgtzq_s64(int64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcgtzq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 43472 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcgtzq_s16(int16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcgtzq_v((int8x16_t)__p0, 49);
  return __ret;
}
# 43488 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcgtz_s8(int8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vcgtz_v((int8x8_t)__p0, 16);
  return __ret;
}
# 43503 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcgtz_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcgtz_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcgtz_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcgtz_v((int8x8_t)__p0, 18);
  return __ret;
}
# 43525 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcgtz_s32(int32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcgtz_v((int8x8_t)__p0, 18);
  return __ret;
}
# 43540 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcgtz_s64(int64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcgtz_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcgtz_s16(int16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcgtz_v((int8x8_t)__p0, 17);
  return __ret;
}
# 43561 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcgtzd_s64(int64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcgtzd_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcgtzd_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcgtzd_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcgtzs_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcgtzs_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcleq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 <= __p1);
  return __ret;
}
# 43594 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcleq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 <= __p1);
  return __ret;
}
# 43611 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcleq_s64(int64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 <= __p1);
  return __ret;
}
# 43627 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcle_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 <= __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcle_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 <= __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcle_s64(int64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 <= __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcled_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcled_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcled_s64(int64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcled_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcled_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcled_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcles_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcles_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vclezq_s8(int8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vclezq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 43679 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vclezq_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vclezq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 43695 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vclezq_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vclezq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 43711 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vclezq_s32(int32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vclezq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 43727 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vclezq_s64(int64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vclezq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 43743 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vclezq_s16(int16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vclezq_v((int8x16_t)__p0, 49);
  return __ret;
}
# 43759 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vclez_s8(int8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vclez_v((int8x8_t)__p0, 16);
  return __ret;
}
# 43774 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vclez_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vclez_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vclez_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vclez_v((int8x8_t)__p0, 18);
  return __ret;
}
# 43796 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vclez_s32(int32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vclez_v((int8x8_t)__p0, 18);
  return __ret;
}
# 43811 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vclez_s64(int64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vclez_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vclez_s16(int16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vclez_v((int8x8_t)__p0, 17);
  return __ret;
}
# 43832 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vclezd_s64(int64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vclezd_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vclezd_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vclezd_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vclezs_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vclezs_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcltq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 < __p1);
  return __ret;
}
# 43865 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcltq_f64(float64x2_t __p0, float64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 < __p1);
  return __ret;
}
# 43882 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcltq_s64(int64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0 < __p1);
  return __ret;
}
# 43898 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vclt_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 < __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vclt_f64(float64x1_t __p0, float64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 < __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vclt_s64(int64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0 < __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcltd_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcltd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcltd_s64(int64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcltd_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcltd_f64(float64_t __p0, float64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcltd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vclts_f32(float32_t __p0, float32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vclts_f32(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vcltzq_s8(int8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vcltzq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 43950 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcltzq_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcltzq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 43966 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcltzq_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcltzq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 43982 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vcltzq_s32(int32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vcltzq_v((int8x16_t)__p0, 50);
  return __ret;
}
# 43998 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcltzq_s64(int64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcltzq_v((int8x16_t)__p0, 51);
  return __ret;
}
# 44014 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vcltzq_s16(int16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vcltzq_v((int8x16_t)__p0, 49);
  return __ret;
}
# 44030 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vcltz_s8(int8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vcltz_v((int8x8_t)__p0, 16);
  return __ret;
}
# 44045 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcltz_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcltz_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcltz_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcltz_v((int8x8_t)__p0, 18);
  return __ret;
}
# 44067 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vcltz_s32(int32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vcltz_v((int8x8_t)__p0, 18);
  return __ret;
}
# 44082 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcltz_s64(int64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcltz_v((int8x8_t)__p0, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vcltz_s16(int16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vcltz_v((int8x8_t)__p0, 17);
  return __ret;
}
# 44103 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcltzd_s64(int64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcltzd_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcltzd_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcltzd_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcltzs_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcltzs_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vcombine_p64(poly64x1_t __p0, poly64x1_t __p1) {
  poly64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1);
  return __ret;
}
# 44134 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vcombine_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 1);
  return __ret;
}
# 45050 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vcvts_f32_s32(int32_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vcvts_f32_s32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vcvts_f32_u32(uint32_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vcvts_f32_u32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vcvt_f32_f64(float64x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcvt_f32_f64((int8x16_t)__p0, 9);
  return __ret;
}
# 45081 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vcvtd_f64_s64(int64_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vcvtd_f64_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vcvtd_f64_u64(uint64_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vcvtd_f64_u64(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vcvtq_f64_u64(uint64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcvtq_f64_v((int8x16_t)__p0, 51);
  return __ret;
}
# 45108 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vcvtq_f64_s64(int64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcvtq_f64_v((int8x16_t)__p0, 35);
  return __ret;
}
# 45123 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vcvt_f64_u64(uint64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vcvt_f64_v((int8x8_t)__p0, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vcvt_f64_s64(int64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vcvt_f64_v((int8x8_t)__p0, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vcvt_f64_f32(float32x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcvt_f64_f32((int8x8_t)__p0, 42);
  return __ret;
}
# 45155 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vcvt_high_f16_f32(float16x4_t __p0, float32x4_t __p1) {
  float16x8_t __ret;
  __ret = vcombine_f16(__p0, vcvt_f16_f32(__p1));
  return __ret;
}
# 45172 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vcvt_high_f32_f16(float16x8_t __p0) {
  float32x4_t __ret;
  __ret = vcvt_f32_f16(vget_high_f16(__p0));
  return __ret;
}
# 45188 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vcvt_high_f32_f64(float32x2_t __p0, float64x2_t __p1) {
  float32x4_t __ret;
  __ret = vcombine_f32(__p0, vcvt_f32_f64(__p1));
  return __ret;
}
# 45205 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vcvt_high_f64_f32(float32x4_t __p0) {
  float64x2_t __ret;
  __ret = vcvt_f64_f32(vget_high_f32(__p0));
  return __ret;
}
# 45364 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vcvts_s32_f32(float32_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vcvts_s32_f32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vcvtd_s64_f64(float64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vcvtd_s64_f64(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vcvtq_s64_f64(float64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vcvtq_s64_v((int8x16_t)__p0, 35);
  return __ret;
}
# 45390 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vcvt_s64_f64(float64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vcvt_s64_v((int8x8_t)__p0, 3);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcvts_u32_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcvts_u32_f32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcvtd_u64_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcvtd_u64_f64(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcvtq_u64_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcvtq_u64_v((int8x16_t)__p0, 51);
  return __ret;
}
# 45421 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcvt_u64_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcvt_u64_v((int8x8_t)__p0, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vcvtas_s32_f32(float32_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vcvtas_s32_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vcvtaq_s64_f64(float64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vcvtaq_s64_v((int8x16_t)__p0, 35);
  return __ret;
}
# 45447 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vcvta_s64_f64(float64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vcvta_s64_v((int8x8_t)__p0, 3);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vcvtad_s64_f64(float64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vcvtad_s64_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcvtas_u32_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcvtas_u32_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcvtaq_u64_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcvtaq_u64_v((int8x16_t)__p0, 51);
  return __ret;
}
# 45478 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcvta_u64_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcvta_u64_v((int8x8_t)__p0, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcvtad_u64_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcvtad_u64_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vcvtms_s32_f32(float32_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vcvtms_s32_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vcvtmq_s64_f64(float64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vcvtmq_s64_v((int8x16_t)__p0, 35);
  return __ret;
}
# 45509 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vcvtm_s64_f64(float64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vcvtm_s64_v((int8x8_t)__p0, 3);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vcvtmd_s64_f64(float64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vcvtmd_s64_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcvtms_u32_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcvtms_u32_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcvtmq_u64_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcvtmq_u64_v((int8x16_t)__p0, 51);
  return __ret;
}
# 45540 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcvtm_u64_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcvtm_u64_v((int8x8_t)__p0, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcvtmd_u64_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcvtmd_u64_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vcvtns_s32_f32(float32_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vcvtns_s32_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vcvtnq_s64_f64(float64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vcvtnq_s64_v((int8x16_t)__p0, 35);
  return __ret;
}
# 45571 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vcvtn_s64_f64(float64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vcvtn_s64_v((int8x8_t)__p0, 3);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vcvtnd_s64_f64(float64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vcvtnd_s64_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcvtns_u32_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcvtns_u32_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcvtnq_u64_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcvtnq_u64_v((int8x16_t)__p0, 51);
  return __ret;
}
# 45602 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcvtn_u64_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcvtn_u64_v((int8x8_t)__p0, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcvtnd_u64_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcvtnd_u64_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vcvtps_s32_f32(float32_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vcvtps_s32_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vcvtpq_s64_f64(float64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vcvtpq_s64_v((int8x16_t)__p0, 35);
  return __ret;
}
# 45633 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vcvtp_s64_f64(float64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vcvtp_s64_v((int8x8_t)__p0, 3);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vcvtpd_s64_f64(float64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vcvtpd_s64_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vcvtps_u32_f32(float32_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vcvtps_u32_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vcvtpq_u64_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vcvtpq_u64_v((int8x16_t)__p0, 51);
  return __ret;
}
# 45664 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vcvtp_u64_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vcvtp_u64_v((int8x8_t)__p0, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vcvtpd_u64_f64(float64_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vcvtpd_u64_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vcvtxd_f32_f64(float64_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vcvtxd_f32_f64(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vcvtx_f32_f64(float64x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vcvtx_f32_v((int8x16_t)__p0, 42);
  return __ret;
}
# 45701 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vcvtx_high_f32_f64(float32x2_t __p0, float64x2_t __p1) {
  float32x4_t __ret;
  __ret = vcombine_f32(__p0, vcvtx_f32_f64(__p1));
  return __ret;
}
# 45718 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vdivq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __p0 / __p1;
  return __ret;
}
# 45735 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vdivq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __p0 / __p1;
  return __ret;
}
# 45751 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vdiv_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = __p0 / __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vdiv_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __p0 / __p1;
  return __ret;
}
# 46694 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vdup_n_p64(poly64_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t) {__p0};
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vdupq_n_p64(poly64_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t) {__p0, __p0};
  return __ret;
}
# 46715 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vdupq_n_f64(float64_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) {__p0, __p0};
  return __ret;
}
# 46729 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vdup_n_f64(float64_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) {__p0};
  return __ret;
}
# 46791 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vfmaq_f64(float64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vfmaq_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 42);
  return __ret;
}
# 46813 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vfma_f64(float64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vfma_v((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 10);
  return __ret;
}
# 47142 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vfmaq_n_f64(float64x2_t __p0, float64x2_t __p1, float64_t __p2) {
  float64x2_t __ret;
  __ret = vfmaq_f64(__p0, __p1, (float64x2_t) {__p2, __p2});
  return __ret;
}
# 47158 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vfma_n_f64(float64x1_t __p0, float64x1_t __p1, float64_t __p2) {
  float64x1_t __ret;
  __ret = vfma_f64(__p0, __p1, (float64x1_t) {__p2});
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vfmsq_f64(float64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = vfmaq_f64(__p0, -__p1, __p2);
  return __ret;
}
# 47181 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vfms_f64(float64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = vfma_f64(__p0, -__p1, __p2);
  return __ret;
}
# 47430 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vfmsq_n_f64(float64x2_t __p0, float64x2_t __p1, float64_t __p2) {
  float64x2_t __ret;
  __ret = vfmaq_f64(__p0, -__p1, (float64x2_t) {__p2, __p2});
  return __ret;
}
# 47447 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vfmsq_n_f32(float32x4_t __p0, float32x4_t __p1, float32_t __p2) {
  float32x4_t __ret;
  __ret = vfmaq_f32(__p0, -__p1, (float32x4_t) {__p2, __p2, __p2, __p2});
  return __ret;
}
# 47463 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vfms_n_f64(float64x1_t __p0, float64x1_t __p1, float64_t __p2) {
  float64x1_t __ret;
  __ret = vfma_f64(__p0, -__p1, (float64x1_t) {__p2});
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vfms_n_f32(float32x2_t __p0, float32x2_t __p1, float32_t __p2) {
  float32x2_t __ret;
  __ret = vfma_f32(__p0, -__p1, (float32x2_t) {__p2, __p2});
  return __ret;
}
# 47486 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vget_high_p64(poly64x2_t __p0) {
  poly64x1_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1);
  return __ret;
}
# 47506 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vget_high_f64(float64x2_t __p0) {
  float64x1_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 1);
  return __ret;
}
# 47579 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vget_low_p64(poly64x2_t __p0) {
  poly64x1_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0);
  return __ret;
}
# 47594 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vget_low_f64(float64x2_t __p0) {
  float64x1_t __ret;
  __ret = __builtin_shufflevector(__p0, __p0, 0);
  return __ret;
}
# 48840 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vmaxq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 48856 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmax_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vmax_v((int8x8_t)__p0, (int8x8_t)__p1, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vmaxnmvq_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vmaxnmvq_f64(__p0);
  return __ret;
}
# 48877 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vmaxnmvq_f32(float32x4_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vmaxnmvq_f32(__p0);
  return __ret;
}
# 48892 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vmaxnmv_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vmaxnmv_f32(__p0);
  return __ret;
}
# 48907 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vmaxvq_u8(uint8x16_t __p0) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vmaxvq_u8(__p0);
  return __ret;
}
# 48922 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vmaxvq_u32(uint32x4_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vmaxvq_u32(__p0);
  return __ret;
}
# 48937 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vmaxvq_u16(uint16x8_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vmaxvq_u16(__p0);
  return __ret;
}
# 48952 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vmaxvq_s8(int8x16_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vmaxvq_s8(__p0);
  return __ret;
}
# 48967 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vmaxvq_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vmaxvq_f64(__p0);
  return __ret;
}
# 48982 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vmaxvq_f32(float32x4_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vmaxvq_f32(__p0);
  return __ret;
}
# 48997 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vmaxvq_s32(int32x4_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vmaxvq_s32(__p0);
  return __ret;
}
# 49012 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vmaxvq_s16(int16x8_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vmaxvq_s16(__p0);
  return __ret;
}
# 49027 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vmaxv_u8(uint8x8_t __p0) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vmaxv_u8(__p0);
  return __ret;
}
# 49042 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vmaxv_u32(uint32x2_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vmaxv_u32(__p0);
  return __ret;
}
# 49057 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vmaxv_u16(uint16x4_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vmaxv_u16(__p0);
  return __ret;
}
# 49072 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vmaxv_s8(int8x8_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vmaxv_s8(__p0);
  return __ret;
}
# 49087 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vmaxv_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vmaxv_f32(__p0);
  return __ret;
}
# 49102 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vmaxv_s32(int32x2_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vmaxv_s32(__p0);
  return __ret;
}
# 49117 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vmaxv_s16(int16x4_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vmaxv_s16(__p0);
  return __ret;
}
# 49132 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vminq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vminq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 49148 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmin_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vmin_v((int8x8_t)__p0, (int8x8_t)__p1, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vminnmvq_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vminnmvq_f64(__p0);
  return __ret;
}
# 49169 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vminnmvq_f32(float32x4_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vminnmvq_f32(__p0);
  return __ret;
}
# 49184 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vminnmv_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vminnmv_f32(__p0);
  return __ret;
}
# 49199 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vminvq_u8(uint8x16_t __p0) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vminvq_u8(__p0);
  return __ret;
}
# 49214 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vminvq_u32(uint32x4_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vminvq_u32(__p0);
  return __ret;
}
# 49229 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vminvq_u16(uint16x8_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vminvq_u16(__p0);
  return __ret;
}
# 49244 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vminvq_s8(int8x16_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vminvq_s8(__p0);
  return __ret;
}
# 49259 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vminvq_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vminvq_f64(__p0);
  return __ret;
}
# 49274 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vminvq_f32(float32x4_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vminvq_f32(__p0);
  return __ret;
}
# 49289 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vminvq_s32(int32x4_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vminvq_s32(__p0);
  return __ret;
}
# 49304 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vminvq_s16(int16x8_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vminvq_s16(__p0);
  return __ret;
}
# 49319 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vminv_u8(uint8x8_t __p0) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vminv_u8(__p0);
  return __ret;
}
# 49334 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vminv_u32(uint32x2_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vminv_u32(__p0);
  return __ret;
}
# 49349 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vminv_u16(uint16x4_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vminv_u16(__p0);
  return __ret;
}
# 49364 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vminv_s8(int8x8_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vminv_s8(__p0);
  return __ret;
}
# 49379 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vminv_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vminv_f32(__p0);
  return __ret;
}
# 49394 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vminv_s32(int32x2_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vminv_s32(__p0);
  return __ret;
}
# 49409 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vminv_s16(int16x4_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vminv_s16(__p0);
  return __ret;
}
# 49424 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vmlaq_f64(float64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 49441 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmla_f64(float64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = __p0 + __p1 * __p2;
  return __ret;
}
# 49975 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vmlsq_f64(float64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 49992 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmls_f64(float64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = __p0 - __p1 * __p2;
  return __ret;
}
# 50525 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vmov_n_p64(poly64_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t) {__p0};
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vmovq_n_p64(poly64_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t) {__p0, __p0};
  return __ret;
}
# 50546 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vmovq_n_f64(float64_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) {__p0, __p0};
  return __ret;
}
# 50560 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmov_n_f64(float64_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) {__p0};
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmovl_high_u8(uint8x16_t __p0_515) {
  uint16x8_t __ret_515;
  uint8x8_t __a1_515 = vget_high_u8(__p0_515);
  __ret_515 = (uint16x8_t)(__extension__ ({ uint16x8_t __ret; uint8x8_t __s0 = __a1_515; __ret = (uint16x8_t) __builtin_neon_vshll_n_v((int8x8_t)__s0, 0, 49); __ret; }));
  return __ret_515;
}
# 50590 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmovl_high_u32(uint32x4_t __p0_518) {
  uint64x2_t __ret_518;
  uint32x2_t __a1_518 = vget_high_u32(__p0_518);
  __ret_518 = (uint64x2_t)(__extension__ ({ uint64x2_t __ret; uint32x2_t __s0 = __a1_518; __ret = (uint64x2_t) __builtin_neon_vshll_n_v((int8x8_t)__s0, 0, 51); __ret; }));
  return __ret_518;
}
# 50614 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmovl_high_u16(uint16x8_t __p0_521) {
  uint32x4_t __ret_521;
  uint16x4_t __a1_521 = vget_high_u16(__p0_521);
  __ret_521 = (uint32x4_t)(__extension__ ({ uint32x4_t __ret; uint16x4_t __s0 = __a1_521; __ret = (uint32x4_t) __builtin_neon_vshll_n_v((int8x8_t)__s0, 0, 50); __ret; }));
  return __ret_521;
}
# 50638 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmovl_high_s8(int8x16_t __p0_524) {
  int16x8_t __ret_524;
  int8x8_t __a1_524 = vget_high_s8(__p0_524);
  __ret_524 = (int16x8_t)(__extension__ ({ int16x8_t __ret; int8x8_t __s0 = __a1_524; __ret = (int16x8_t) __builtin_neon_vshll_n_v((int8x8_t)__s0, 0, 33); __ret; }));
  return __ret_524;
}
# 50662 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmovl_high_s32(int32x4_t __p0_527) {
  int64x2_t __ret_527;
  int32x2_t __a1_527 = vget_high_s32(__p0_527);
  __ret_527 = (int64x2_t)(__extension__ ({ int64x2_t __ret; int32x2_t __s0 = __a1_527; __ret = (int64x2_t) __builtin_neon_vshll_n_v((int8x8_t)__s0, 0, 35); __ret; }));
  return __ret_527;
}
# 50686 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmovl_high_s16(int16x8_t __p0_530) {
  int32x4_t __ret_530;
  int16x4_t __a1_530 = vget_high_s16(__p0_530);
  __ret_530 = (int32x4_t)(__extension__ ({ int32x4_t __ret; int16x4_t __s0 = __a1_530; __ret = (int32x4_t) __builtin_neon_vshll_n_v((int8x8_t)__s0, 0, 34); __ret; }));
  return __ret_530;
}
# 50710 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmovn_high_u32(uint16x4_t __p0, uint32x4_t __p1) {
  uint16x8_t __ret;
  __ret = vcombine_u16(__p0, vmovn_u32(__p1));
  return __ret;
}
# 50727 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmovn_high_u64(uint32x2_t __p0, uint64x2_t __p1) {
  uint32x4_t __ret;
  __ret = vcombine_u32(__p0, vmovn_u64(__p1));
  return __ret;
}
# 50744 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vmovn_high_u16(uint8x8_t __p0, uint16x8_t __p1) {
  uint8x16_t __ret;
  __ret = vcombine_u8(__p0, vmovn_u16(__p1));
  return __ret;
}
# 50761 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmovn_high_s32(int16x4_t __p0, int32x4_t __p1) {
  int16x8_t __ret;
  __ret = vcombine_s16(__p0, vmovn_s32(__p1));
  return __ret;
}
# 50778 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmovn_high_s64(int32x2_t __p0, int64x2_t __p1) {
  int32x4_t __ret;
  __ret = vcombine_s32(__p0, vmovn_s64(__p1));
  return __ret;
}
# 50795 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vmovn_high_s16(int8x8_t __p0, int16x8_t __p1) {
  int8x16_t __ret;
  __ret = vcombine_s8(__p0, vmovn_s16(__p1));
  return __ret;
}
# 50812 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vmulq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 50828 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmul_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = __p0 * __p1;
  return __ret;
}
# 51174 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmul_n_f64(float64x1_t __p0, float64_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vmul_n_f64((float64x1_t)__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vmulq_n_f64(float64x2_t __p0, float64_t __p1) {
  float64x2_t __ret;
  __ret = __p0 * (float64x2_t) {__p1, __p1};
  return __ret;
}
# 51196 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vmull_high_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly16x8_t __ret;
  __ret = vmull_p8(vget_high_p8(__p0), vget_high_p8(__p1));
  return __ret;
}
# 51213 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmull_high_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint16x8_t __ret;
  __ret = vmull_u8(vget_high_u8(__p0), vget_high_u8(__p1));
  return __ret;
}
# 51230 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmull_high_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint64x2_t __ret;
  __ret = vmull_u32(vget_high_u32(__p0), vget_high_u32(__p1));
  return __ret;
}
# 51247 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmull_high_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint32x4_t __ret;
  __ret = vmull_u16(vget_high_u16(__p0), vget_high_u16(__p1));
  return __ret;
}
# 51264 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmull_high_s8(int8x16_t __p0, int8x16_t __p1) {
  int16x8_t __ret;
  __ret = vmull_s8(vget_high_s8(__p0), vget_high_s8(__p1));
  return __ret;
}
# 51281 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmull_high_s32(int32x4_t __p0, int32x4_t __p1) {
  int64x2_t __ret;
  __ret = vmull_s32(vget_high_s32(__p0), vget_high_s32(__p1));
  return __ret;
}
# 51298 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmull_high_s16(int16x8_t __p0, int16x8_t __p1) {
  int32x4_t __ret;
  __ret = vmull_s16(vget_high_s16(__p0), vget_high_s16(__p1));
  return __ret;
}
# 51483 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmull_high_n_u32(uint32x4_t __p0, uint32_t __p1) {
  uint64x2_t __ret;
  __ret = vmull_n_u32(vget_high_u32(__p0), __p1);
  return __ret;
}
# 51499 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmull_high_n_u16(uint16x8_t __p0, uint16_t __p1) {
  uint32x4_t __ret;
  __ret = vmull_n_u16(vget_high_u16(__p0), __p1);
  return __ret;
}
# 51515 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmull_high_n_s32(int32x4_t __p0, int32_t __p1) {
  int64x2_t __ret;
  __ret = vmull_n_s32(vget_high_s32(__p0), __p1);
  return __ret;
}
# 51531 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmull_high_n_s16(int16x8_t __p0, int16_t __p1) {
  int32x4_t __ret;
  __ret = vmull_n_s16(vget_high_s16(__p0), __p1);
  return __ret;
}
# 51631 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vmulxq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vmulxq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 51653 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vmulxq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vmulxq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 51674 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmulx_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vmulx_v((int8x8_t)__p0, (int8x8_t)__p1, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vmulx_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vmulx_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 51701 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vmulxd_f64(float64_t __p0, float64_t __p1) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vmulxd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vmulxs_f32(float32_t __p0, float32_t __p1) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vmulxs_f32(__p0, __p1);
  return __ret;
}
# 51901 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vnegq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = -__p0;
  return __ret;
}
# 51917 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vnegq_s64(int64x2_t __p0) {
  int64x2_t __ret;
  __ret = -__p0;
  return __ret;
}
# 51932 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vneg_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = -__p0;
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vneg_s64(int64x1_t __p0) {
  int64x1_t __ret;
  __ret = -__p0;
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vnegd_s64(int64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vnegd_s64(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vpaddq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 51965 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vpaddq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 51982 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vpaddq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 51999 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vpaddq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 52016 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vpaddq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 52033 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vpaddq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 52050 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vpaddq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 52067 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vpaddq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 52084 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vpaddq_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 52101 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vpaddq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vpaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 52118 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vpaddd_u64(uint64x2_t __p0) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vpaddd_u64(__p0);
  return __ret;
}
# 52133 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vpaddd_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vpaddd_f64(__p0);
  return __ret;
}
# 52148 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vpaddd_s64(int64x2_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vpaddd_s64(__p0);
  return __ret;
}
# 52163 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vpadds_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vpadds_f32(__p0);
  return __ret;
}
# 52178 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vpmaxq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vpmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 52195 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vpmaxq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vpmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 52212 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vpmaxq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vpmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 52229 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vpmaxq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vpmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 52246 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vpmaxq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vpmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 52263 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vpmaxq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vpmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 52280 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vpmaxq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vpmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 52297 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vpmaxq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vpmaxq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 52314 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vpmaxqd_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vpmaxqd_f64(__p0);
  return __ret;
}
# 52329 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vpmaxs_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vpmaxs_f32(__p0);
  return __ret;
}
# 52344 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vpmaxnmq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vpmaxnmq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 52361 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vpmaxnmq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vpmaxnmq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 52378 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vpmaxnm_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vpmaxnm_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 52395 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vpmaxnmqd_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vpmaxnmqd_f64(__p0);
  return __ret;
}
# 52410 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vpmaxnms_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vpmaxnms_f32(__p0);
  return __ret;
}
# 52425 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vpminq_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vpminq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 52442 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vpminq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vpminq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 52459 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vpminq_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vpminq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 52476 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vpminq_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vpminq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 52493 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vpminq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vpminq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 52510 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vpminq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vpminq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 52527 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vpminq_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vpminq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 52544 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vpminq_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vpminq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 52561 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vpminqd_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vpminqd_f64(__p0);
  return __ret;
}
# 52576 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vpmins_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vpmins_f32(__p0);
  return __ret;
}
# 52591 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vpminnmq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vpminnmq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 52608 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vpminnmq_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vpminnmq_v((int8x16_t)__p0, (int8x16_t)__p1, 41);
  return __ret;
}
# 52625 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vpminnm_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vpminnm_v((int8x8_t)__p0, (int8x8_t)__p1, 9);
  return __ret;
}
# 52642 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vpminnmqd_f64(float64x2_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vpminnmqd_f64(__p0);
  return __ret;
}
# 52657 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vpminnms_f32(float32x2_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vpminnms_f32(__p0);
  return __ret;
}
# 52672 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqabsq_s64(int64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqabsq_v((int8x16_t)__p0, 35);
  return __ret;
}
# 52687 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vqabs_s64(int64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vqabs_v((int8x8_t)__p0, 3);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vqabsb_s8(int8_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vqabsb_s8(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqabss_s32(int32_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqabss_s32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqabsd_s64(int64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqabsd_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqabsh_s16(int16_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqabsh_s16(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vqaddb_u8(uint8_t __p0, uint8_t __p1) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vqaddb_u8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vqadds_u32(uint32_t __p0, uint32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vqadds_u32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vqaddd_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vqaddd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vqaddh_u16(uint16_t __p0, uint16_t __p1) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vqaddh_u16(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vqaddb_s8(int8_t __p0, int8_t __p1) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vqaddb_s8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqadds_s32(int32_t __p0, int32_t __p1) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqadds_s32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqaddd_s64(int64_t __p0, int64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqaddd_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqaddh_s16(int16_t __p0, int16_t __p1) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqaddh_s16(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqdmlals_s32(int64_t __p0, int32_t __p1, int32_t __p2) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqdmlals_s32(__p0, __p1, __p2);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqdmlalh_s16(int32_t __p0, int16_t __p1, int16_t __p2) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqdmlalh_s16(__p0, __p1, __p2);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmlal_high_s32(int64x2_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int64x2_t __ret;
  __ret = vqdmlal_s32(__p0, vget_high_s32(__p1), vget_high_s32(__p2));
  return __ret;
}
# 52781 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmlal_high_s16(int32x4_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int32x4_t __ret;
  __ret = vqdmlal_s16(__p0, vget_high_s16(__p1), vget_high_s16(__p2));
  return __ret;
}
# 52895 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmlal_high_n_s32(int64x2_t __p0, int32x4_t __p1, int32_t __p2) {
  int64x2_t __ret;
  __ret = vqdmlal_n_s32(__p0, vget_high_s32(__p1), __p2);
  return __ret;
}
# 52912 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmlal_high_n_s16(int32x4_t __p0, int16x8_t __p1, int16_t __p2) {
  int32x4_t __ret;
  __ret = vqdmlal_n_s16(__p0, vget_high_s16(__p1), __p2);
  return __ret;
}
# 53060 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqdmlsls_s32(int64_t __p0, int32_t __p1, int32_t __p2) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqdmlsls_s32(__p0, __p1, __p2);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqdmlslh_s16(int32_t __p0, int16_t __p1, int16_t __p2) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqdmlslh_s16(__p0, __p1, __p2);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmlsl_high_s32(int64x2_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int64x2_t __ret;
  __ret = vqdmlsl_s32(__p0, vget_high_s32(__p1), vget_high_s32(__p2));
  return __ret;
}
# 53089 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmlsl_high_s16(int32x4_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int32x4_t __ret;
  __ret = vqdmlsl_s16(__p0, vget_high_s16(__p1), vget_high_s16(__p2));
  return __ret;
}
# 53203 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmlsl_high_n_s32(int64x2_t __p0, int32x4_t __p1, int32_t __p2) {
  int64x2_t __ret;
  __ret = vqdmlsl_n_s32(__p0, vget_high_s32(__p1), __p2);
  return __ret;
}
# 53220 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmlsl_high_n_s16(int32x4_t __p0, int16x8_t __p1, int16_t __p2) {
  int32x4_t __ret;
  __ret = vqdmlsl_n_s16(__p0, vget_high_s16(__p1), __p2);
  return __ret;
}
# 53368 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqdmulhs_s32(int32_t __p0, int32_t __p1) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqdmulhs_s32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqdmulhh_s16(int16_t __p0, int16_t __p1) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqdmulhh_s16(__p0, __p1);
  return __ret;
}
# 53622 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqdmulls_s32(int32_t __p0, int32_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqdmulls_s32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqdmullh_s16(int16_t __p0, int16_t __p1) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqdmullh_s16(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmull_high_s32(int32x4_t __p0, int32x4_t __p1) {
  int64x2_t __ret;
  __ret = vqdmull_s32(vget_high_s32(__p0), vget_high_s32(__p1));
  return __ret;
}
# 53650 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmull_high_s16(int16x8_t __p0, int16x8_t __p1) {
  int32x4_t __ret;
  __ret = vqdmull_s16(vget_high_s16(__p0), vget_high_s16(__p1));
  return __ret;
}
# 53751 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqdmull_high_n_s32(int32x4_t __p0, int32_t __p1) {
  int64x2_t __ret;
  __ret = vqdmull_n_s32(vget_high_s32(__p0), __p1);
  return __ret;
}
# 53767 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqdmull_high_n_s16(int16x8_t __p0, int16_t __p1) {
  int32x4_t __ret;
  __ret = vqdmull_n_s16(vget_high_s16(__p0), __p1);
  return __ret;
}
# 53900 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqmovns_s32(int32_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqmovns_s32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqmovnd_s64(int64_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqmovnd_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vqmovnh_s16(int16_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vqmovnh_s16(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vqmovns_u32(uint32_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vqmovns_u32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vqmovnd_u64(uint64_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vqmovnd_u64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vqmovnh_u16(uint16_t __p0) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vqmovnh_u16(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vqmovn_high_u32(uint16x4_t __p0, uint32x4_t __p1) {
  uint16x8_t __ret;
  __ret = vcombine_u16(__p0, vqmovn_u32(__p1));
  return __ret;
}
# 53948 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vqmovn_high_u64(uint32x2_t __p0, uint64x2_t __p1) {
  uint32x4_t __ret;
  __ret = vcombine_u32(__p0, vqmovn_u64(__p1));
  return __ret;
}
# 53965 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqmovn_high_u16(uint8x8_t __p0, uint16x8_t __p1) {
  uint8x16_t __ret;
  __ret = vcombine_u8(__p0, vqmovn_u16(__p1));
  return __ret;
}
# 53982 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vqmovn_high_s32(int16x4_t __p0, int32x4_t __p1) {
  int16x8_t __ret;
  __ret = vcombine_s16(__p0, vqmovn_s32(__p1));
  return __ret;
}
# 53999 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vqmovn_high_s64(int32x2_t __p0, int64x2_t __p1) {
  int32x4_t __ret;
  __ret = vcombine_s32(__p0, vqmovn_s64(__p1));
  return __ret;
}
# 54016 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqmovn_high_s16(int8x8_t __p0, int16x8_t __p1) {
  int8x16_t __ret;
  __ret = vcombine_s8(__p0, vqmovn_s16(__p1));
  return __ret;
}
# 54032 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vqmovuns_s32(int32_t __p0) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vqmovuns_s32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vqmovund_s64(int64_t __p0) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vqmovund_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vqmovunh_s16(int16_t __p0) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vqmovunh_s16(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vqmovun_high_s32(uint16x4_t __p0, int32x4_t __p1) {
  uint16x8_t __ret;
  __ret = vcombine_u16((uint16x4_t)(__p0), vqmovun_s32(__p1));
  return __ret;
}
# 54065 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vqmovun_high_s64(uint32x2_t __p0, int64x2_t __p1) {
  uint32x4_t __ret;
  __ret = vcombine_u32((uint32x2_t)(__p0), vqmovun_s64(__p1));
  return __ret;
}
# 54082 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqmovun_high_s16(uint8x8_t __p0, int16x8_t __p1) {
  uint8x16_t __ret;
  __ret = vcombine_u8((uint8x8_t)(__p0), vqmovun_s16(__p1));
  return __ret;
}
# 54099 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vqnegq_s64(int64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vqnegq_v((int8x16_t)__p0, 35);
  return __ret;
}
# 54114 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vqneg_s64(int64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vqneg_v((int8x8_t)__p0, 3);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vqnegb_s8(int8_t __p0) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vqnegb_s8(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqnegs_s32(int32_t __p0) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqnegs_s32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqnegd_s64(int64_t __p0) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqnegd_s64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqnegh_s16(int16_t __p0) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqnegh_s16(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqrdmulhs_s32(int32_t __p0, int32_t __p1) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqrdmulhs_s32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqrdmulhh_s16(int16_t __p0, int16_t __p1) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqrdmulhh_s16(__p0, __p1);
  return __ret;
}
# 54393 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vqrshlb_u8(uint8_t __p0, int8_t __p1) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vqrshlb_u8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vqrshls_u32(uint32_t __p0, int32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vqrshls_u32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vqrshld_u64(uint64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vqrshld_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vqrshlh_u16(uint16_t __p0, int16_t __p1) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vqrshlh_u16(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vqrshlb_s8(int8_t __p0, int8_t __p1) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vqrshlb_s8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqrshls_s32(int32_t __p0, int32_t __p1) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqrshls_s32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqrshld_s64(int64_t __p0, int64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqrshld_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqrshlh_s16(int16_t __p0, int16_t __p1) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqrshlh_s16(__p0, __p1);
  return __ret;
}
# 54676 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vqshlb_u8(uint8_t __p0, int8_t __p1) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vqshlb_u8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vqshls_u32(uint32_t __p0, int32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vqshls_u32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vqshld_u64(uint64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vqshld_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vqshlh_u16(uint16_t __p0, int16_t __p1) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vqshlh_u16(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vqshlb_s8(int8_t __p0, int8_t __p1) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vqshlb_s8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqshls_s32(int32_t __p0, int32_t __p1) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqshls_s32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqshld_s64(int64_t __p0, int64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqshld_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqshlh_s16(int16_t __p0, int16_t __p1) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqshlh_s16(__p0, __p1);
  return __ret;
}
# 55031 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vqsubb_u8(uint8_t __p0, uint8_t __p1) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vqsubb_u8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vqsubs_u32(uint32_t __p0, uint32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vqsubs_u32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vqsubd_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vqsubd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vqsubh_u16(uint16_t __p0, uint16_t __p1) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vqsubh_u16(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vqsubb_s8(int8_t __p0, int8_t __p1) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vqsubb_s8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vqsubs_s32(int32_t __p0, int32_t __p1) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqsubs_s32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vqsubd_s64(int64_t __p0, int64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vqsubd_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vqsubh_s16(int16_t __p0, int16_t __p1) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqsubh_s16(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vqtbl1_p8(poly8x16_t __p0, uint8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vqtbl1_v((int8x16_t)__p0, (int8x8_t)__p1, 4);
  return __ret;
}
# 55089 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vqtbl1q_p8(poly8x16_t __p0, uint8x16_t __p1) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vqtbl1q_v((int8x16_t)__p0, (int8x16_t)__p1, 36);
  return __ret;
}
# 55106 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqtbl1q_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqtbl1q_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 55123 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqtbl1q_s8(int8x16_t __p0, uint8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqtbl1q_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 55140 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqtbl1_u8(uint8x16_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqtbl1_v((int8x16_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 55157 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqtbl1_s8(int8x16_t __p0, uint8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqtbl1_v((int8x16_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 55174 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vqtbl2_p8(poly8x16x2_t __p0, uint8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vqtbl2_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x8_t)__p1, 4);
  return __ret;
}
# 55193 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vqtbl2q_p8(poly8x16x2_t __p0, uint8x16_t __p1) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vqtbl2q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p1, 36);
  return __ret;
}
# 55212 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqtbl2q_u8(uint8x16x2_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqtbl2q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p1, 48);
  return __ret;
}
# 55231 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqtbl2q_s8(int8x16x2_t __p0, uint8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqtbl2q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p1, 32);
  return __ret;
}
# 55250 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqtbl2_u8(uint8x16x2_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqtbl2_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x8_t)__p1, 16);
  return __ret;
}
# 55269 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqtbl2_s8(int8x16x2_t __p0, uint8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqtbl2_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x8_t)__p1, 0);
  return __ret;
}
# 55288 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vqtbl3_p8(poly8x16x3_t __p0, uint8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vqtbl3_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x8_t)__p1, 4);
  return __ret;
}
# 55308 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vqtbl3q_p8(poly8x16x3_t __p0, uint8x16_t __p1) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vqtbl3q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p1, 36);
  return __ret;
}
# 55328 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqtbl3q_u8(uint8x16x3_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqtbl3q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p1, 48);
  return __ret;
}
# 55348 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqtbl3q_s8(int8x16x3_t __p0, uint8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqtbl3q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p1, 32);
  return __ret;
}
# 55368 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqtbl3_u8(uint8x16x3_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqtbl3_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x8_t)__p1, 16);
  return __ret;
}
# 55388 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqtbl3_s8(int8x16x3_t __p0, uint8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqtbl3_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x8_t)__p1, 0);
  return __ret;
}
# 55408 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vqtbl4_p8(poly8x16x4_t __p0, uint8x8_t __p1) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vqtbl4_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p0.val[3], (int8x8_t)__p1, 4);
  return __ret;
}
# 55429 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vqtbl4q_p8(poly8x16x4_t __p0, uint8x16_t __p1) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vqtbl4q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p0.val[3], (int8x16_t)__p1, 36);
  return __ret;
}
# 55450 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqtbl4q_u8(uint8x16x4_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqtbl4q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p0.val[3], (int8x16_t)__p1, 48);
  return __ret;
}
# 55471 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqtbl4q_s8(int8x16x4_t __p0, uint8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqtbl4q_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p0.val[3], (int8x16_t)__p1, 32);
  return __ret;
}
# 55492 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqtbl4_u8(uint8x16x4_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqtbl4_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p0.val[3], (int8x8_t)__p1, 16);
  return __ret;
}
# 55513 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqtbl4_s8(int8x16x4_t __p0, uint8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqtbl4_v((int8x16_t)__p0.val[0], (int8x16_t)__p0.val[1], (int8x16_t)__p0.val[2], (int8x16_t)__p0.val[3], (int8x8_t)__p1, 0);
  return __ret;
}
# 55534 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vqtbx1_p8(poly8x8_t __p0, poly8x16_t __p1, uint8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vqtbx1_v((int8x8_t)__p0, (int8x16_t)__p1, (int8x8_t)__p2, 4);
  return __ret;
}
# 55552 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vqtbx1q_p8(poly8x16_t __p0, poly8x16_t __p1, uint8x16_t __p2) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vqtbx1q_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 36);
  return __ret;
}
# 55570 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqtbx1q_u8(uint8x16_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqtbx1q_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 48);
  return __ret;
}
# 55588 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqtbx1q_s8(int8x16_t __p0, int8x16_t __p1, uint8x16_t __p2) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqtbx1q_v((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 32);
  return __ret;
}
# 55606 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqtbx1_u8(uint8x8_t __p0, uint8x16_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqtbx1_v((int8x8_t)__p0, (int8x16_t)__p1, (int8x8_t)__p2, 16);
  return __ret;
}
# 55624 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqtbx1_s8(int8x8_t __p0, int8x16_t __p1, uint8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqtbx1_v((int8x8_t)__p0, (int8x16_t)__p1, (int8x8_t)__p2, 0);
  return __ret;
}
# 55642 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vqtbx2_p8(poly8x8_t __p0, poly8x16x2_t __p1, uint8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vqtbx2_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x8_t)__p2, 4);
  return __ret;
}
# 55662 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vqtbx2q_p8(poly8x16_t __p0, poly8x16x2_t __p1, uint8x16_t __p2) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vqtbx2q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p2, 36);
  return __ret;
}
# 55682 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqtbx2q_u8(uint8x16_t __p0, uint8x16x2_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqtbx2q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p2, 48);
  return __ret;
}
# 55702 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqtbx2q_s8(int8x16_t __p0, int8x16x2_t __p1, uint8x16_t __p2) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqtbx2q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p2, 32);
  return __ret;
}
# 55722 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqtbx2_u8(uint8x8_t __p0, uint8x16x2_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqtbx2_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x8_t)__p2, 16);
  return __ret;
}
# 55742 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqtbx2_s8(int8x8_t __p0, int8x16x2_t __p1, uint8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqtbx2_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x8_t)__p2, 0);
  return __ret;
}
# 55762 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vqtbx3_p8(poly8x8_t __p0, poly8x16x3_t __p1, uint8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vqtbx3_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x8_t)__p2, 4);
  return __ret;
}
# 55783 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vqtbx3q_p8(poly8x16_t __p0, poly8x16x3_t __p1, uint8x16_t __p2) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vqtbx3q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p2, 36);
  return __ret;
}
# 55804 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqtbx3q_u8(uint8x16_t __p0, uint8x16x3_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqtbx3q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p2, 48);
  return __ret;
}
# 55825 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqtbx3q_s8(int8x16_t __p0, int8x16x3_t __p1, uint8x16_t __p2) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqtbx3q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p2, 32);
  return __ret;
}
# 55846 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqtbx3_u8(uint8x8_t __p0, uint8x16x3_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqtbx3_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x8_t)__p2, 16);
  return __ret;
}
# 55867 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqtbx3_s8(int8x8_t __p0, int8x16x3_t __p1, uint8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqtbx3_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x8_t)__p2, 0);
  return __ret;
}
# 55888 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vqtbx4_p8(poly8x8_t __p0, poly8x16x4_t __p1, uint8x8_t __p2) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vqtbx4_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p1.val[3], (int8x8_t)__p2, 4);
  return __ret;
}
# 55910 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vqtbx4q_p8(poly8x16_t __p0, poly8x16x4_t __p1, uint8x16_t __p2) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vqtbx4q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p1.val[3], (int8x16_t)__p2, 36);
  return __ret;
}
# 55932 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vqtbx4q_u8(uint8x16_t __p0, uint8x16x4_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vqtbx4q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p1.val[3], (int8x16_t)__p2, 48);
  return __ret;
}
# 55954 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vqtbx4q_s8(int8x16_t __p0, int8x16x4_t __p1, uint8x16_t __p2) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vqtbx4q_v((int8x16_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p1.val[3], (int8x16_t)__p2, 32);
  return __ret;
}
# 55976 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vqtbx4_u8(uint8x8_t __p0, uint8x16x4_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vqtbx4_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p1.val[3], (int8x8_t)__p2, 16);
  return __ret;
}
# 55998 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vqtbx4_s8(int8x8_t __p0, int8x16x4_t __p1, uint8x8_t __p2) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vqtbx4_v((int8x8_t)__p0, (int8x16_t)__p1.val[0], (int8x16_t)__p1.val[1], (int8x16_t)__p1.val[2], (int8x16_t)__p1.val[3], (int8x8_t)__p2, 0);
  return __ret;
}
# 56020 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vraddhn_high_u32(uint16x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint16x8_t __ret;
  __ret = vcombine_u16(__p0, vraddhn_u32(__p1, __p2));
  return __ret;
}
# 56038 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vraddhn_high_u64(uint32x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint32x4_t __ret;
  __ret = vcombine_u32(__p0, vraddhn_u64(__p1, __p2));
  return __ret;
}
# 56056 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vraddhn_high_u16(uint8x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint8x16_t __ret;
  __ret = vcombine_u8(__p0, vraddhn_u16(__p1, __p2));
  return __ret;
}
# 56074 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vraddhn_high_s32(int16x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int16x8_t __ret;
  __ret = vcombine_s16(__p0, vraddhn_s32(__p1, __p2));
  return __ret;
}
# 56092 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vraddhn_high_s64(int32x2_t __p0, int64x2_t __p1, int64x2_t __p2) {
  int32x4_t __ret;
  __ret = vcombine_s32(__p0, vraddhn_s64(__p1, __p2));
  return __ret;
}
# 56110 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vraddhn_high_s16(int8x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int8x16_t __ret;
  __ret = vcombine_s8(__p0, vraddhn_s16(__p1, __p2));
  return __ret;
}
# 56128 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vrbit_p8(poly8x8_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t) __builtin_neon_vrbit_v((int8x8_t)__p0, 4);
  return __ret;
}
# 56144 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vrbitq_p8(poly8x16_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t) __builtin_neon_vrbitq_v((int8x16_t)__p0, 36);
  return __ret;
}
# 56160 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vrbitq_u8(uint8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vrbitq_v((int8x16_t)__p0, 48);
  return __ret;
}
# 56176 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vrbitq_s8(int8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vrbitq_v((int8x16_t)__p0, 32);
  return __ret;
}
# 56192 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vrbit_u8(uint8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vrbit_v((int8x8_t)__p0, 16);
  return __ret;
}
# 56208 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vrbit_s8(int8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vrbit_v((int8x8_t)__p0, 0);
  return __ret;
}
# 56224 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrecpeq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrecpeq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 56239 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrecpe_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrecpe_v((int8x8_t)__p0, 10);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vrecped_f64(float64_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vrecped_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vrecpes_f32(float32_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vrecpes_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrecpsq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrecpsq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 56271 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrecps_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrecps_v((int8x8_t)__p0, (int8x8_t)__p1, 10);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vrecpsd_f64(float64_t __p0, float64_t __p1) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vrecpsd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vrecpss_f32(float32_t __p0, float32_t __p1) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vrecpss_f32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vrecpxd_f64(float64_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vrecpxd_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vrecpxs_f32(float32_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vrecpxs_f32(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_p64(poly64x1_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_p16(poly16x4_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_u8(uint8x8_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_u32(uint32x2_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_u64(uint64x1_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_u16(uint16x4_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_s8(int8x8_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_f64(float64x1_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_f32(float32x2_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_f16(float16x4_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_s32(int32x2_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_s64(int64x1_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vreinterpret_p8_s16(int16x4_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_p8(poly8x8_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_p16(poly16x4_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_u8(uint8x8_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_u32(uint32x2_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_u64(uint64x1_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_u16(uint16x4_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_s8(int8x8_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_f64(float64x1_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_f32(float32x2_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_f16(float16x4_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_s32(int32x2_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_s64(int64x1_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x1_t vreinterpret_p64_s16(int16x4_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_p8(poly8x8_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_p64(poly64x1_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_u8(uint8x8_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_u32(uint32x2_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_u64(uint64x1_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_u16(uint16x4_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_s8(int8x8_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_f64(float64x1_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_f32(float32x2_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_f16(float16x4_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_s32(int32x2_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_s64(int64x1_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vreinterpret_p16_s16(int16x4_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_p128(poly128_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_p64(poly64x2_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_p16(poly16x8_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_u8(uint8x16_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_u32(uint32x4_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_u64(uint64x2_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_u16(uint16x8_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_s8(int8x16_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_f64(float64x2_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_f32(float32x4_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_f16(float16x8_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_s32(int32x4_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_s64(int64x2_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vreinterpretq_p8_s16(int16x8_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_p8(poly8x16_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_p64(poly64x2_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_p16(poly16x8_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_u8(uint8x16_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_u32(uint32x4_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_u64(uint64x2_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_u16(uint16x8_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_s8(int8x16_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_f64(float64x2_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_f32(float32x4_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_f16(float16x8_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_s32(int32x4_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_s64(int64x2_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly128_t vreinterpretq_p128_s16(int16x8_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_p8(poly8x16_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_p128(poly128_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_p16(poly16x8_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_u8(uint8x16_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_u32(uint32x4_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_u64(uint64x2_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_u16(uint16x8_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_s8(int8x16_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_f64(float64x2_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_f32(float32x4_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_f16(float16x8_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_s32(int32x4_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_s64(int64x2_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vreinterpretq_p64_s16(int16x8_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_p8(poly8x16_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_p128(poly128_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_p64(poly64x2_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_u8(uint8x16_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_u32(uint32x4_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_u64(uint64x2_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_u16(uint16x8_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_s8(int8x16_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_f64(float64x2_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_f32(float32x4_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_f16(float16x8_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_s32(int32x4_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_s64(int64x2_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vreinterpretq_p16_s16(int16x8_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_p8(poly8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_p128(poly128_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_p64(poly64x2_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_p16(poly16x8_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_u32(uint32x4_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_u64(uint64x2_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_u16(uint16x8_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_s8(int8x16_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_f64(float64x2_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_f32(float32x4_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_f16(float16x8_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_s32(int32x4_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_s64(int64x2_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vreinterpretq_u8_s16(int16x8_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_p8(poly8x16_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_p128(poly128_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_p64(poly64x2_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_p16(poly16x8_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_u8(uint8x16_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_u64(uint64x2_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_u16(uint16x8_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_s8(int8x16_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_f64(float64x2_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_f32(float32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_f16(float16x8_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_s32(int32x4_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_s64(int64x2_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vreinterpretq_u32_s16(int16x8_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_p8(poly8x16_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_p128(poly128_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_p64(poly64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_p16(poly16x8_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_u8(uint8x16_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_u32(uint32x4_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_u16(uint16x8_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_s8(int8x16_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_f64(float64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_f32(float32x4_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_f16(float16x8_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_s32(int32x4_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_s64(int64x2_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vreinterpretq_u64_s16(int16x8_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_p8(poly8x16_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_p128(poly128_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_p64(poly64x2_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_p16(poly16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_u8(uint8x16_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_u32(uint32x4_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_u64(uint64x2_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_s8(int8x16_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_f64(float64x2_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_f32(float32x4_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_f16(float16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_s32(int32x4_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_s64(int64x2_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vreinterpretq_u16_s16(int16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_p8(poly8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_p128(poly128_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_p64(poly64x2_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_p16(poly16x8_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_u8(uint8x16_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_u32(uint32x4_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_u64(uint64x2_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_u16(uint16x8_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_f64(float64x2_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_f32(float32x4_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_f16(float16x8_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_s32(int32x4_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_s64(int64x2_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vreinterpretq_s8_s16(int16x8_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_p8(poly8x16_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_p128(poly128_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_p64(poly64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_p16(poly16x8_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_u8(uint8x16_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_u32(uint32x4_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_u64(uint64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_u16(uint16x8_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_s8(int8x16_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_f32(float32x4_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_f16(float16x8_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_s32(int32x4_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_s64(int64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vreinterpretq_f64_s16(int16x8_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_p8(poly8x16_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_p128(poly128_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_p64(poly64x2_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_p16(poly16x8_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_u8(uint8x16_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_u32(uint32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_u64(uint64x2_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_u16(uint16x8_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_s8(int8x16_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_f64(float64x2_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_f16(float16x8_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_s32(int32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_s64(int64x2_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vreinterpretq_f32_s16(int16x8_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_p8(poly8x16_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_p128(poly128_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_p64(poly64x2_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_p16(poly16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_u8(uint8x16_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_u32(uint32x4_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_u64(uint64x2_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_u16(uint16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_s8(int8x16_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_f64(float64x2_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_f32(float32x4_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_s32(int32x4_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_s64(int64x2_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x8_t vreinterpretq_f16_s16(int16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_p8(poly8x16_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_p128(poly128_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_p64(poly64x2_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_p16(poly16x8_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_u8(uint8x16_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_u32(uint32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_u64(uint64x2_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_u16(uint16x8_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_s8(int8x16_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_f64(float64x2_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_f32(float32x4_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_f16(float16x8_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_s64(int64x2_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vreinterpretq_s32_s16(int16x8_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_p8(poly8x16_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_p128(poly128_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_p64(poly64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_p16(poly16x8_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_u8(uint8x16_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_u32(uint32x4_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_u64(uint64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_u16(uint16x8_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_s8(int8x16_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_f64(float64x2_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_f32(float32x4_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_f16(float16x8_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_s32(int32x4_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vreinterpretq_s64_s16(int16x8_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_p8(poly8x16_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_p128(poly128_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_p64(poly64x2_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_p16(poly16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_u8(uint8x16_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_u32(uint32x4_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_u64(uint64x2_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_u16(uint16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_s8(int8x16_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_f64(float64x2_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_f32(float32x4_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_f16(float16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_s32(int32x4_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vreinterpretq_s16_s64(int64x2_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_p8(poly8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_p64(poly64x1_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_p16(poly16x4_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_u32(uint32x2_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_u64(uint64x1_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_u16(uint16x4_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_s8(int8x8_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_f64(float64x1_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_f32(float32x2_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_f16(float16x4_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_s32(int32x2_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_s64(int64x1_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vreinterpret_u8_s16(int16x4_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_p8(poly8x8_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_p64(poly64x1_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_p16(poly16x4_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_u8(uint8x8_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_u64(uint64x1_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_u16(uint16x4_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_s8(int8x8_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_f64(float64x1_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_f32(float32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_f16(float16x4_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_s32(int32x2_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_s64(int64x1_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vreinterpret_u32_s16(int16x4_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_p8(poly8x8_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_p64(poly64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_p16(poly16x4_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_u8(uint8x8_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_u32(uint32x2_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_u16(uint16x4_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_s8(int8x8_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_f64(float64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_f32(float32x2_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_f16(float16x4_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_s32(int32x2_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_s64(int64x1_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vreinterpret_u64_s16(int16x4_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_p8(poly8x8_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_p64(poly64x1_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_p16(poly16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_u8(uint8x8_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_u32(uint32x2_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_u64(uint64x1_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_s8(int8x8_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_f64(float64x1_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_f32(float32x2_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_f16(float16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_s32(int32x2_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_s64(int64x1_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vreinterpret_u16_s16(int16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_p8(poly8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_p64(poly64x1_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_p16(poly16x4_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_u8(uint8x8_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_u32(uint32x2_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_u64(uint64x1_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_u16(uint16x4_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_f64(float64x1_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_f32(float32x2_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_f16(float16x4_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_s32(int32x2_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_s64(int64x1_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vreinterpret_s8_s16(int16x4_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_p8(poly8x8_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_p64(poly64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_p16(poly16x4_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_u8(uint8x8_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_u32(uint32x2_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_u64(uint64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_u16(uint16x4_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_s8(int8x8_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_f32(float32x2_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_f16(float16x4_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_s32(int32x2_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_s64(int64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vreinterpret_f64_s16(int16x4_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_p8(poly8x8_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_p64(poly64x1_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_p16(poly16x4_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_u8(uint8x8_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_u32(uint32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_u64(uint64x1_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_u16(uint16x4_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_s8(int8x8_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_f64(float64x1_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_f16(float16x4_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_s32(int32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_s64(int64x1_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vreinterpret_f32_s16(int16x4_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_p8(poly8x8_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_p64(poly64x1_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_p16(poly16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_u8(uint8x8_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_u32(uint32x2_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_u64(uint64x1_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_u16(uint16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_s8(int8x8_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_f64(float64x1_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_f32(float32x2_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_s32(int32x2_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_s64(int64x1_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float16x4_t vreinterpret_f16_s16(int16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_p8(poly8x8_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_p64(poly64x1_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_p16(poly16x4_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_u8(uint8x8_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_u32(uint32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_u64(uint64x1_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_u16(uint16x4_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_s8(int8x8_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_f64(float64x1_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_f32(float32x2_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_f16(float16x4_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_s64(int64x1_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vreinterpret_s32_s16(int16x4_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_p8(poly8x8_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_p64(poly64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_p16(poly16x4_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_u8(uint8x8_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_u32(uint32x2_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_u64(uint64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_u16(uint16x4_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_s8(int8x8_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_f64(float64x1_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_f32(float32x2_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_f16(float16x4_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_s32(int32x2_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vreinterpret_s64_s16(int16x4_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_p8(poly8x8_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_p64(poly64x1_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_p16(poly16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_u8(uint8x8_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_u32(uint32x2_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_u64(uint64x1_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_u16(uint16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_s8(int8x8_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_f64(float64x1_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_f32(float32x2_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_f16(float16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_s32(int32x2_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vreinterpret_s16_s64(int64x1_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vrshld_u64(uint64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vrshld_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vrshld_s64(int64_t __p0, int64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vrshld_s64(__p0, __p1);
  return __ret;
}
# 58405 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrsqrteq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrsqrteq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 58420 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrsqrte_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrsqrte_v((int8x8_t)__p0, 10);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vrsqrted_f64(float64_t __p0) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vrsqrted_f64(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vrsqrtes_f32(float32_t __p0) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vrsqrtes_f32(__p0);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrsqrtsq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrsqrtsq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 58452 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrsqrts_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrsqrts_v((int8x8_t)__p0, (int8x8_t)__p1, 10);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64_t vrsqrtsd_f64(float64_t __p0, float64_t __p1) {
  float64_t __ret;
  __ret = (float64_t) __builtin_neon_vrsqrtsd_f64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32_t vrsqrtss_f32(float32_t __p0, float32_t __p1) {
  float32_t __ret;
  __ret = (float32_t) __builtin_neon_vrsqrtss_f32(__p0, __p1);
  return __ret;
}
# 58482 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vrsubhn_high_u32(uint16x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint16x8_t __ret;
  __ret = vcombine_u16(__p0, vrsubhn_u32(__p1, __p2));
  return __ret;
}
# 58500 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vrsubhn_high_u64(uint32x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint32x4_t __ret;
  __ret = vcombine_u32(__p0, vrsubhn_u64(__p1, __p2));
  return __ret;
}
# 58518 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vrsubhn_high_u16(uint8x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint8x16_t __ret;
  __ret = vcombine_u8(__p0, vrsubhn_u16(__p1, __p2));
  return __ret;
}
# 58536 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vrsubhn_high_s32(int16x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int16x8_t __ret;
  __ret = vcombine_s16(__p0, vrsubhn_s32(__p1, __p2));
  return __ret;
}
# 58554 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vrsubhn_high_s64(int32x2_t __p0, int64x2_t __p1, int64x2_t __p2) {
  int32x4_t __ret;
  __ret = vcombine_s32(__p0, vrsubhn_s64(__p1, __p2));
  return __ret;
}
# 58572 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vrsubhn_high_s16(int8x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int8x16_t __ret;
  __ret = vcombine_s8(__p0, vrsubhn_s16(__p1, __p2));
  return __ret;
}
# 58657 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vshld_u64(uint64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vshld_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vshld_s64(int64_t __p0, int64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vshld_s64(__p0, __p1);
  return __ret;
}
# 58967 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8_t vsqaddb_u8(uint8_t __p0, int8_t __p1) {
  uint8_t __ret;
  __ret = (uint8_t) __builtin_neon_vsqaddb_u8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32_t vsqadds_u32(uint32_t __p0, int32_t __p1) {
  uint32_t __ret;
  __ret = (uint32_t) __builtin_neon_vsqadds_u32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vsqaddd_u64(uint64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vsqaddd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16_t vsqaddh_u16(uint16_t __p0, int16_t __p1) {
  uint16_t __ret;
  __ret = (uint16_t) __builtin_neon_vsqaddh_u16(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vsqaddq_u8(uint8x16_t __p0, int8x16_t __p1) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vsqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 48);
  return __ret;
}
# 59005 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vsqaddq_u32(uint32x4_t __p0, int32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 59022 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vsqaddq_u64(uint64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vsqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 59039 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vsqaddq_u16(uint16x8_t __p0, int16x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vsqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 49);
  return __ret;
}
# 59056 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vsqadd_u8(uint8x8_t __p0, int8x8_t __p1) {
  uint8x8_t __ret;
  __ret = (uint8x8_t) __builtin_neon_vsqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 16);
  return __ret;
}
# 59073 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vsqadd_u32(uint32x2_t __p0, int32x2_t __p1) {
  uint32x2_t __ret;
  __ret = (uint32x2_t) __builtin_neon_vsqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 18);
  return __ret;
}
# 59089 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vsqadd_u64(uint64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vsqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vsqadd_u16(uint16x4_t __p0, int16x4_t __p1) {
  uint16x4_t __ret;
  __ret = (uint16x4_t) __builtin_neon_vsqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 17);
  return __ret;
}
# 59112 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vsqrtq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vsqrtq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 59128 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vsqrtq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vsqrtq_v((int8x16_t)__p0, 41);
  return __ret;
}
# 59143 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vsqrt_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vsqrt_v((int8x8_t)__p0, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vsqrt_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vsqrt_v((int8x8_t)__p0, 9);
  return __ret;
}
# 60012 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vsubd_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vsubd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vsubd_s64(int64_t __p0, int64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vsubd_s64(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vsubq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}
# 60039 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vsub_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = __p0 - __p1;
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vsubhn_high_u32(uint16x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint16x8_t __ret;
  __ret = vcombine_u16(__p0, vsubhn_u32(__p1, __p2));
  return __ret;
}
# 60063 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vsubhn_high_u64(uint32x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint32x4_t __ret;
  __ret = vcombine_u32(__p0, vsubhn_u64(__p1, __p2));
  return __ret;
}
# 60081 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vsubhn_high_u16(uint8x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint8x16_t __ret;
  __ret = vcombine_u8(__p0, vsubhn_u16(__p1, __p2));
  return __ret;
}
# 60099 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vsubhn_high_s32(int16x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int16x8_t __ret;
  __ret = vcombine_s16(__p0, vsubhn_s32(__p1, __p2));
  return __ret;
}
# 60117 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vsubhn_high_s64(int32x2_t __p0, int64x2_t __p1, int64x2_t __p2) {
  int32x4_t __ret;
  __ret = vcombine_s32(__p0, vsubhn_s64(__p1, __p2));
  return __ret;
}
# 60135 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vsubhn_high_s16(int8x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int8x16_t __ret;
  __ret = vcombine_s8(__p0, vsubhn_s16(__p1, __p2));
  return __ret;
}
# 60153 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vsubl_high_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint16x8_t __ret;
  __ret = vmovl_high_u8(__p0) - vmovl_high_u8(__p1);
  return __ret;
}
# 60170 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vsubl_high_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint64x2_t __ret;
  __ret = vmovl_high_u32(__p0) - vmovl_high_u32(__p1);
  return __ret;
}
# 60187 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vsubl_high_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint32x4_t __ret;
  __ret = vmovl_high_u16(__p0) - vmovl_high_u16(__p1);
  return __ret;
}
# 60204 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vsubl_high_s8(int8x16_t __p0, int8x16_t __p1) {
  int16x8_t __ret;
  __ret = vmovl_high_s8(__p0) - vmovl_high_s8(__p1);
  return __ret;
}
# 60221 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vsubl_high_s32(int32x4_t __p0, int32x4_t __p1) {
  int64x2_t __ret;
  __ret = vmovl_high_s32(__p0) - vmovl_high_s32(__p1);
  return __ret;
}
# 60238 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vsubl_high_s16(int16x8_t __p0, int16x8_t __p1) {
  int32x4_t __ret;
  __ret = vmovl_high_s16(__p0) - vmovl_high_s16(__p1);
  return __ret;
}
# 60255 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vsubw_high_u8(uint16x8_t __p0, uint8x16_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 - vmovl_high_u8(__p1);
  return __ret;
}
# 60272 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vsubw_high_u32(uint64x2_t __p0, uint32x4_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 - vmovl_high_u32(__p1);
  return __ret;
}
# 60289 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vsubw_high_u16(uint32x4_t __p0, uint16x8_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 - vmovl_high_u16(__p1);
  return __ret;
}
# 60306 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vsubw_high_s8(int16x8_t __p0, int8x16_t __p1) {
  int16x8_t __ret;
  __ret = __p0 - vmovl_high_s8(__p1);
  return __ret;
}
# 60323 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vsubw_high_s32(int64x2_t __p0, int32x4_t __p1) {
  int64x2_t __ret;
  __ret = __p0 - vmovl_high_s32(__p1);
  return __ret;
}
# 60340 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vsubw_high_s16(int32x4_t __p0, int16x8_t __p1) {
  int32x4_t __ret;
  __ret = __p0 - vmovl_high_s16(__p1);
  return __ret;
}
# 60357 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtrn1_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 2, 10, 4, 12, 6, 14);
  return __ret;
}
# 60374 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vtrn1_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 2, 6);
  return __ret;
}
# 60391 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vtrn1q_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30);
  return __ret;
}
# 60408 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vtrn1q_p64(poly64x2_t __p0, poly64x2_t __p1) {
  poly64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 60425 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vtrn1q_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 2, 10, 4, 12, 6, 14);
  return __ret;
}
# 60442 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vtrn1q_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30);
  return __ret;
}
# 60459 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vtrn1q_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 2, 6);
  return __ret;
}
# 60476 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vtrn1q_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 60493 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vtrn1q_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 2, 10, 4, 12, 6, 14);
  return __ret;
}
# 60510 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vtrn1q_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30);
  return __ret;
}
# 60527 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vtrn1q_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 60544 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vtrn1q_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 2, 6);
  return __ret;
}
# 60561 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vtrn1q_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 2, 6);
  return __ret;
}
# 60578 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vtrn1q_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 60595 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vtrn1q_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 2, 10, 4, 12, 6, 14);
  return __ret;
}
# 60612 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtrn1_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 2, 10, 4, 12, 6, 14);
  return __ret;
}
# 60629 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vtrn1_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 60646 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vtrn1_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 2, 6);
  return __ret;
}
# 60663 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtrn1_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 2, 10, 4, 12, 6, 14);
  return __ret;
}
# 60680 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vtrn1_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 60697 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vtrn1_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 60714 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vtrn1_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 2, 6);
  return __ret;
}
# 60731 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vtrn2_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 9, 3, 11, 5, 13, 7, 15);
  return __ret;
}
# 60748 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vtrn2_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 5, 3, 7);
  return __ret;
}
# 60765 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vtrn2q_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31);
  return __ret;
}
# 60782 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vtrn2q_p64(poly64x2_t __p0, poly64x2_t __p1) {
  poly64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 60799 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vtrn2q_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 9, 3, 11, 5, 13, 7, 15);
  return __ret;
}
# 60816 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vtrn2q_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31);
  return __ret;
}
# 60833 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vtrn2q_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 5, 3, 7);
  return __ret;
}
# 60850 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vtrn2q_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 60867 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vtrn2q_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 9, 3, 11, 5, 13, 7, 15);
  return __ret;
}
# 60884 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vtrn2q_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31);
  return __ret;
}
# 60901 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vtrn2q_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 60918 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vtrn2q_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 5, 3, 7);
  return __ret;
}
# 60935 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vtrn2q_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 5, 3, 7);
  return __ret;
}
# 60952 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vtrn2q_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 60969 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vtrn2q_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 9, 3, 11, 5, 13, 7, 15);
  return __ret;
}
# 60986 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vtrn2_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 9, 3, 11, 5, 13, 7, 15);
  return __ret;
}
# 61003 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vtrn2_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 61020 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vtrn2_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 5, 3, 7);
  return __ret;
}
# 61037 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vtrn2_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 9, 3, 11, 5, 13, 7, 15);
  return __ret;
}
# 61054 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vtrn2_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 61071 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vtrn2_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 61088 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vtrn2_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 5, 3, 7);
  return __ret;
}
# 61104 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vtst_p64(poly64x1_t __p0, poly64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vtstq_p64(poly64x2_t __p0, poly64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 61127 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vtstq_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 61144 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vtstq_s64(int64x2_t __p0, int64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vtstq_v((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 61160 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vtst_u64(uint64x1_t __p0, uint64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x1_t vtst_s64(int64x1_t __p0, int64x1_t __p1) {
  uint64x1_t __ret;
  __ret = (uint64x1_t) __builtin_neon_vtst_v((int8x8_t)__p0, (int8x8_t)__p1, 19);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vtstd_u64(uint64_t __p0, uint64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vtstd_u64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64_t vtstd_s64(int64_t __p0, int64_t __p1) {
  uint64_t __ret;
  __ret = (uint64_t) __builtin_neon_vtstd_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8_t vuqaddb_s8(int8_t __p0, uint8_t __p1) {
  int8_t __ret;
  __ret = (int8_t) __builtin_neon_vuqaddb_s8(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32_t vuqadds_s32(int32_t __p0, uint32_t __p1) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vuqadds_s32(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64_t vuqaddd_s64(int64_t __p0, uint64_t __p1) {
  int64_t __ret;
  __ret = (int64_t) __builtin_neon_vuqaddd_s64(__p0, __p1);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16_t vuqaddh_s16(int16_t __p0, uint16_t __p1) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vuqaddh_s16(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vuqaddq_s8(int8x16_t __p0, uint8x16_t __p1) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vuqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 32);
  return __ret;
}
# 61218 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vuqaddq_s32(int32x4_t __p0, uint32x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vuqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 34);
  return __ret;
}
# 61235 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vuqaddq_s64(int64x2_t __p0, uint64x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vuqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 35);
  return __ret;
}
# 61252 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vuqaddq_s16(int16x8_t __p0, uint16x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vuqaddq_v((int8x16_t)__p0, (int8x16_t)__p1, 33);
  return __ret;
}
# 61269 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vuqadd_s8(int8x8_t __p0, uint8x8_t __p1) {
  int8x8_t __ret;
  __ret = (int8x8_t) __builtin_neon_vuqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 0);
  return __ret;
}
# 61286 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vuqadd_s32(int32x2_t __p0, uint32x2_t __p1) {
  int32x2_t __ret;
  __ret = (int32x2_t) __builtin_neon_vuqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 2);
  return __ret;
}
# 61302 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x1_t vuqadd_s64(int64x1_t __p0, uint64x1_t __p1) {
  int64x1_t __ret;
  __ret = (int64x1_t) __builtin_neon_vuqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 3);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vuqadd_s16(int16x4_t __p0, uint16x4_t __p1) {
  int16x4_t __ret;
  __ret = (int16x4_t) __builtin_neon_vuqadd_v((int8x8_t)__p0, (int8x8_t)__p1, 1);
  return __ret;
}
# 61325 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vuzp1_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14);
  return __ret;
}
# 61342 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vuzp1_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6);
  return __ret;
}
# 61359 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vuzp1q_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30);
  return __ret;
}
# 61376 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vuzp1q_p64(poly64x2_t __p0, poly64x2_t __p1) {
  poly64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 61393 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vuzp1q_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14);
  return __ret;
}
# 61410 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vuzp1q_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30);
  return __ret;
}
# 61427 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vuzp1q_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6);
  return __ret;
}
# 61444 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vuzp1q_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 61461 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vuzp1q_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14);
  return __ret;
}
# 61478 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vuzp1q_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30);
  return __ret;
}
# 61495 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vuzp1q_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 61512 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vuzp1q_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6);
  return __ret;
}
# 61529 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vuzp1q_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6);
  return __ret;
}
# 61546 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vuzp1q_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 61563 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vuzp1q_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14);
  return __ret;
}
# 61580 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vuzp1_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14);
  return __ret;
}
# 61597 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vuzp1_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 61614 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vuzp1_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6);
  return __ret;
}
# 61631 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vuzp1_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14);
  return __ret;
}
# 61648 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vuzp1_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 61665 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vuzp1_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 61682 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vuzp1_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6);
  return __ret;
}
# 61699 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vuzp2_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15);
  return __ret;
}
# 61716 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vuzp2_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7);
  return __ret;
}
# 61733 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vuzp2q_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31);
  return __ret;
}
# 61750 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vuzp2q_p64(poly64x2_t __p0, poly64x2_t __p1) {
  poly64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 61767 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vuzp2q_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15);
  return __ret;
}
# 61784 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vuzp2q_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31);
  return __ret;
}
# 61801 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vuzp2q_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7);
  return __ret;
}
# 61818 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vuzp2q_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 61835 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vuzp2q_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15);
  return __ret;
}
# 61852 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vuzp2q_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31);
  return __ret;
}
# 61869 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vuzp2q_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 61886 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vuzp2q_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7);
  return __ret;
}
# 61903 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vuzp2q_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7);
  return __ret;
}
# 61920 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vuzp2q_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 61937 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vuzp2q_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15);
  return __ret;
}
# 61954 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vuzp2_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15);
  return __ret;
}
# 61971 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vuzp2_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 61988 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vuzp2_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7);
  return __ret;
}
# 62005 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vuzp2_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15);
  return __ret;
}
# 62022 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vuzp2_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62039 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vuzp2_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62056 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vuzp2_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7);
  return __ret;
}
# 62073 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vzip1_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 1, 9, 2, 10, 3, 11);
  return __ret;
}
# 62090 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vzip1_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 1, 5);
  return __ret;
}
# 62107 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vzip1q_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23);
  return __ret;
}
# 62124 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vzip1q_p64(poly64x2_t __p0, poly64x2_t __p1) {
  poly64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 62141 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vzip1q_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 1, 9, 2, 10, 3, 11);
  return __ret;
}
# 62158 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vzip1q_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23);
  return __ret;
}
# 62175 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vzip1q_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 1, 5);
  return __ret;
}
# 62192 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vzip1q_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 62209 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vzip1q_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 1, 9, 2, 10, 3, 11);
  return __ret;
}
# 62226 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vzip1q_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23);
  return __ret;
}
# 62243 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vzip1q_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 62260 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vzip1q_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 1, 5);
  return __ret;
}
# 62277 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vzip1q_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 1, 5);
  return __ret;
}
# 62294 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vzip1q_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 62311 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vzip1q_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 1, 9, 2, 10, 3, 11);
  return __ret;
}
# 62328 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vzip1_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 1, 9, 2, 10, 3, 11);
  return __ret;
}
# 62345 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vzip1_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 62362 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vzip1_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 1, 5);
  return __ret;
}
# 62379 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vzip1_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 1, 9, 2, 10, 3, 11);
  return __ret;
}
# 62396 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vzip1_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 62413 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vzip1_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2);
  return __ret;
}
# 62430 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vzip1_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 1, 5);
  return __ret;
}
# 62447 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x8_t vzip2_p8(poly8x8_t __p0, poly8x8_t __p1) {
  poly8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 4, 12, 5, 13, 6, 14, 7, 15);
  return __ret;
}
# 62464 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x4_t vzip2_p16(poly16x4_t __p0, poly16x4_t __p1) {
  poly16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 2, 6, 3, 7);
  return __ret;
}
# 62481 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly8x16_t vzip2q_p8(poly8x16_t __p0, poly8x16_t __p1) {
  poly8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31);
  return __ret;
}
# 62498 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly64x2_t vzip2q_p64(poly64x2_t __p0, poly64x2_t __p1) {
  poly64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62515 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) poly16x8_t vzip2q_p16(poly16x8_t __p0, poly16x8_t __p1) {
  poly16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 4, 12, 5, 13, 6, 14, 7, 15);
  return __ret;
}
# 62532 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vzip2q_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31);
  return __ret;
}
# 62549 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vzip2q_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 2, 6, 3, 7);
  return __ret;
}
# 62566 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vzip2q_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62583 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vzip2q_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 4, 12, 5, 13, 6, 14, 7, 15);
  return __ret;
}
# 62600 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vzip2q_s8(int8x16_t __p0, int8x16_t __p1) {
  int8x16_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31);
  return __ret;
}
# 62617 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vzip2q_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62634 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x4_t vzip2q_f32(float32x4_t __p0, float32x4_t __p1) {
  float32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 2, 6, 3, 7);
  return __ret;
}
# 62651 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vzip2q_s32(int32x4_t __p0, int32x4_t __p1) {
  int32x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 2, 6, 3, 7);
  return __ret;
}
# 62668 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vzip2q_s64(int64x2_t __p0, int64x2_t __p1) {
  int64x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62685 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vzip2q_s16(int16x8_t __p0, int16x8_t __p1) {
  int16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 4, 12, 5, 13, 6, 14, 7, 15);
  return __ret;
}
# 62702 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vzip2_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 4, 12, 5, 13, 6, 14, 7, 15);
  return __ret;
}
# 62719 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vzip2_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62736 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vzip2_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 2, 6, 3, 7);
  return __ret;
}
# 62753 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vzip2_s8(int8x8_t __p0, int8x8_t __p1) {
  int8x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 4, 12, 5, 13, 6, 14, 7, 15);
  return __ret;
}
# 62770 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float32x2_t vzip2_f32(float32x2_t __p0, float32x2_t __p1) {
  float32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62787 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vzip2_s32(int32x2_t __p0, int32x2_t __p1) {
  int32x2_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3);
  return __ret;
}
# 62804 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vzip2_s16(int16x4_t __p0, int16x4_t __p1) {
  int16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 2, 6, 3, 7);
  return __ret;
}
# 62820 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("aes"))) poly128_t vmull_p64(poly64_t __p0, poly64_t __p1) {
  poly128_t __ret;
  __ret = (poly128_t) __builtin_neon_vmull_p64(__p0, __p1);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("aes"))) poly128_t vmull_high_p64(poly64x2_t __p0, poly64x2_t __p1) {
  poly128_t __ret;
  __ret = vmull_p64((poly64_t)(vget_high_p64(__p0)), (poly64_t)(vget_high_p64(__p1)));
  return __ret;
}
# 62842 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t __a64_vcvtq_low_bf16_f32(float32x4_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t) __builtin_neon___a64_vcvtq_low_bf16_f32((int8x16_t)__p0, 43);
  return __ret;
}
# 62947 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vcvt_bf16_f32(float32x4_t __p0) {
  bfloat16x4_t __ret;
  __ret = vget_low_bf16(__a64_vcvtq_low_bf16_f32(__p0));
  return __ret;
}
# 62963 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vcvtq_high_bf16_f32(bfloat16x8_t __p0, float32x4_t __p1) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t) __builtin_neon_vcvtq_high_bf16_f32((int8x16_t)__p0, (int8x16_t)__p1, 43);
  return __ret;
}
# 62980 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vcvtq_low_bf16_f32(float32x4_t __p0) {
  bfloat16x8_t __ret;
  __ret = __a64_vcvtq_low_bf16_f32(__p0);
  return __ret;
}
# 62995 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) poly8x8_t vreinterpret_p8_bf16(bfloat16x4_t __p0) {
  poly8x8_t __ret;
  __ret = (poly8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) poly64x1_t vreinterpret_p64_bf16(bfloat16x4_t __p0) {
  poly64x1_t __ret;
  __ret = (poly64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) poly16x4_t vreinterpret_p16_bf16(bfloat16x4_t __p0) {
  poly16x4_t __ret;
  __ret = (poly16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) poly8x16_t vreinterpretq_p8_bf16(bfloat16x8_t __p0) {
  poly8x16_t __ret;
  __ret = (poly8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) poly128_t vreinterpretq_p128_bf16(bfloat16x8_t __p0) {
  poly128_t __ret;
  __ret = (poly128_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) poly64x2_t vreinterpretq_p64_bf16(bfloat16x8_t __p0) {
  poly64x2_t __ret;
  __ret = (poly64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) poly16x8_t vreinterpretq_p16_bf16(bfloat16x8_t __p0) {
  poly16x8_t __ret;
  __ret = (poly16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) uint8x16_t vreinterpretq_u8_bf16(bfloat16x8_t __p0) {
  uint8x16_t __ret;
  __ret = (uint8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) uint32x4_t vreinterpretq_u32_bf16(bfloat16x8_t __p0) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) uint64x2_t vreinterpretq_u64_bf16(bfloat16x8_t __p0) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) uint16x8_t vreinterpretq_u16_bf16(bfloat16x8_t __p0) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) int8x16_t vreinterpretq_s8_bf16(bfloat16x8_t __p0) {
  int8x16_t __ret;
  __ret = (int8x16_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float64x2_t vreinterpretq_f64_bf16(bfloat16x8_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x4_t vreinterpretq_f32_bf16(bfloat16x8_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float16x8_t vreinterpretq_f16_bf16(bfloat16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) int32x4_t vreinterpretq_s32_bf16(bfloat16x8_t __p0) {
  int32x4_t __ret;
  __ret = (int32x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) int64x2_t vreinterpretq_s64_bf16(bfloat16x8_t __p0) {
  int64x2_t __ret;
  __ret = (int64x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) int16x8_t vreinterpretq_s16_bf16(bfloat16x8_t __p0) {
  int16x8_t __ret;
  __ret = (int16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) uint8x8_t vreinterpret_u8_bf16(bfloat16x4_t __p0) {
  uint8x8_t __ret;
  __ret = (uint8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) uint32x2_t vreinterpret_u32_bf16(bfloat16x4_t __p0) {
  uint32x2_t __ret;
  __ret = (uint32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) uint64x1_t vreinterpret_u64_bf16(bfloat16x4_t __p0) {
  uint64x1_t __ret;
  __ret = (uint64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) uint16x4_t vreinterpret_u16_bf16(bfloat16x4_t __p0) {
  uint16x4_t __ret;
  __ret = (uint16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) int8x8_t vreinterpret_s8_bf16(bfloat16x4_t __p0) {
  int8x8_t __ret;
  __ret = (int8x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float64x1_t vreinterpret_f64_bf16(bfloat16x4_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x2_t vreinterpret_f32_bf16(bfloat16x4_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float16x4_t vreinterpret_f16_bf16(bfloat16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) int32x2_t vreinterpret_s32_bf16(bfloat16x4_t __p0) {
  int32x2_t __ret;
  __ret = (int32x2_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) int64x1_t vreinterpret_s64_bf16(bfloat16x4_t __p0) {
  int64x1_t __ret;
  __ret = (int64x1_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) int16x4_t vreinterpret_s16_bf16(bfloat16x4_t __p0) {
  int16x4_t __ret;
  __ret = (int16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_p8(poly8x16_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_p128(poly128_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_p64(poly64x2_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_p16(poly16x8_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_u8(uint8x16_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_u32(uint32x4_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_u64(uint64x2_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_u16(uint16x8_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_s8(int8x16_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_f64(float64x2_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_f32(float32x4_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_f16(float16x8_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_s32(int32x4_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_s64(int64x2_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x8_t vreinterpretq_bf16_s16(int16x8_t __p0) {
  bfloat16x8_t __ret;
  __ret = (bfloat16x8_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_p8(poly8x8_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_p64(poly64x1_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_p16(poly16x4_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_u8(uint8x8_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_u32(uint32x2_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_u64(uint64x1_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_u16(uint16x4_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_s8(int8x8_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_f64(float64x1_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_f32(float32x2_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_f16(float16x4_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_s32(int32x2_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_s64(int64x1_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) bfloat16x4_t vreinterpret_bf16_s16(int16x4_t __p0) {
  bfloat16x4_t __ret;
  __ret = (bfloat16x4_t)(__p0);
  return __ret;
}
# 63398 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fp16fml"))) float32x4_t vfmlalq_high_f16(float32x4_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vfmlalq_high_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 63421 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fp16fml"))) float32x2_t vfmlal_high_f16(float32x2_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vfmlal_high_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 63444 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fp16fml"))) float32x4_t vfmlalq_low_f16(float32x4_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vfmlalq_low_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 63467 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fp16fml"))) float32x2_t vfmlal_low_f16(float32x2_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vfmlal_low_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 63490 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fp16fml"))) float32x4_t vfmlslq_high_f16(float32x4_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vfmlslq_high_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 63513 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fp16fml"))) float32x2_t vfmlsl_high_f16(float32x2_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vfmlsl_high_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 63536 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fp16fml"))) float32x4_t vfmlslq_low_f16(float32x4_t __p0, float16x8_t __p1, float16x8_t __p2) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vfmlslq_low_f16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 41);
  return __ret;
}
# 63559 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fp16fml"))) float32x2_t vfmlsl_low_f16(float32x2_t __p0, float16x4_t __p1, float16x4_t __p2) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vfmlsl_low_f16((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 9);
  return __ret;
}
# 63582 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vdivq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __p0 / __p1;
  return __ret;
}
# 63599 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vdiv_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __p0 / __p1;
  return __ret;
}
# 64244 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vmulxq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vmulxq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 64266 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vmulx_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vmulx_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 64450 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vpaddq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vpaddq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 64467 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vpmaxq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vpmaxq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 64484 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vpmaxnmq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vpmaxnmq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 64501 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vpmaxnm_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vpmaxnm_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 64518 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vpminq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vpminq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 64535 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vpminnmq_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vpminnmq_f16((int8x16_t)__p0, (int8x16_t)__p1, 40);
  return __ret;
}
# 64552 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vpminnm_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vpminnm_f16((int8x8_t)__p0, (int8x8_t)__p1, 8);
  return __ret;
}
# 64569 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vrndiq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vrndiq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 64585 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vrndi_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vrndi_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 64601 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vsqrtq_f16(float16x8_t __p0) {
  float16x8_t __ret;
  __ret = (float16x8_t) __builtin_neon_vsqrtq_f16((int8x16_t)__p0, 40);
  return __ret;
}
# 64617 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vsqrt_f16(float16x4_t __p0) {
  float16x4_t __ret;
  __ret = (float16x4_t) __builtin_neon_vsqrt_f16((int8x8_t)__p0, 8);
  return __ret;
}
# 64633 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vtrn1q_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 2, 10, 4, 12, 6, 14);
  return __ret;
}
# 64650 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vtrn1_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 2, 6);
  return __ret;
}
# 64667 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vtrn2q_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 9, 3, 11, 5, 13, 7, 15);
  return __ret;
}
# 64684 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vtrn2_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 5, 3, 7);
  return __ret;
}
# 64701 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vuzp1q_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6, 8, 10, 12, 14);
  return __ret;
}
# 64718 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vuzp1_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 2, 4, 6);
  return __ret;
}
# 64735 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vuzp2q_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7, 9, 11, 13, 15);
  return __ret;
}
# 64752 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vuzp2_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 1, 3, 5, 7);
  return __ret;
}
# 64769 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vzip1q_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 8, 1, 9, 2, 10, 3, 11);
  return __ret;
}
# 64786 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vzip1_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 0, 4, 1, 5);
  return __ret;
}
# 64803 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x8_t vzip2q_f16(float16x8_t __p0, float16x8_t __p1) {
  float16x8_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 4, 12, 5, 13, 6, 14, 7, 15);
  return __ret;
}
# 64820 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("fullfp16"))) float16x4_t vzip2_f16(float16x4_t __p0, float16x4_t __p1) {
  float16x4_t __ret;
  __ret = __builtin_shufflevector(__p0, __p1, 2, 6, 3, 7);
  return __ret;
}
# 65105 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint8x16_t vbcaxq_u8(uint8x16_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_vbcaxq_u8((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 48);
  return __ret;
}
# 65123 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint32x4_t vbcaxq_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vbcaxq_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 65141 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint64x2_t vbcaxq_u64(uint64x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vbcaxq_u64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 51);
  return __ret;
}
# 65159 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint16x8_t vbcaxq_u16(uint16x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_vbcaxq_u16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 49);
  return __ret;
}
# 65177 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) int8x16_t vbcaxq_s8(int8x16_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_vbcaxq_s8((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 32);
  return __ret;
}
# 65195 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) int32x4_t vbcaxq_s32(int32x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_vbcaxq_s32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 65213 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) int64x2_t vbcaxq_s64(int64x2_t __p0, int64x2_t __p1, int64x2_t __p2) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_vbcaxq_s64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 35);
  return __ret;
}
# 65231 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) int16x8_t vbcaxq_s16(int16x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_vbcaxq_s16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 33);
  return __ret;
}
# 65249 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint8x16_t veor3q_u8(uint8x16_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = (uint8x16_t) __builtin_neon_veor3q_u8((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 48);
  return __ret;
}
# 65267 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint32x4_t veor3q_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_veor3q_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 65285 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint64x2_t veor3q_u64(uint64x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_veor3q_u64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 51);
  return __ret;
}
# 65303 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint16x8_t veor3q_u16(uint16x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint16x8_t __ret;
  __ret = (uint16x8_t) __builtin_neon_veor3q_u16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 49);
  return __ret;
}
# 65321 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) int8x16_t veor3q_s8(int8x16_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int8x16_t __ret;
  __ret = (int8x16_t) __builtin_neon_veor3q_s8((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 32);
  return __ret;
}
# 65339 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) int32x4_t veor3q_s32(int32x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int32x4_t __ret;
  __ret = (int32x4_t) __builtin_neon_veor3q_s32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 34);
  return __ret;
}
# 65357 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) int64x2_t veor3q_s64(int64x2_t __p0, int64x2_t __p1, int64x2_t __p2) {
  int64x2_t __ret;
  __ret = (int64x2_t) __builtin_neon_veor3q_s64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 35);
  return __ret;
}
# 65375 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) int16x8_t veor3q_s16(int16x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int16x8_t __ret;
  __ret = (int16x8_t) __builtin_neon_veor3q_s16((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 33);
  return __ret;
}
# 65393 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint64x2_t vrax1q_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vrax1q_u64((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 65410 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint64x2_t vsha512hq_u64(uint64x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vsha512hq_u64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 51);
  return __ret;
}
# 65428 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint64x2_t vsha512h2q_u64(uint64x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vsha512h2q_u64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 51);
  return __ret;
}
# 65446 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint64x2_t vsha512su0q_u64(uint64x2_t __p0, uint64x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vsha512su0q_u64((int8x16_t)__p0, (int8x16_t)__p1, 51);
  return __ret;
}
# 65463 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sha3"))) uint64x2_t vsha512su1q_u64(uint64x2_t __p0, uint64x2_t __p1, uint64x2_t __p2) {
  uint64x2_t __ret;
  __ret = (uint64x2_t) __builtin_neon_vsha512su1q_u64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 51);
  return __ret;
}
# 65502 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sm4"))) uint32x4_t vsm3partw1q_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsm3partw1q_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 65520 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sm4"))) uint32x4_t vsm3partw2q_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsm3partw2q_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 65538 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sm4"))) uint32x4_t vsm3ss1q_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsm3ss1q_u32((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 50);
  return __ret;
}
# 65652 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sm4"))) uint32x4_t vsm4eq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsm4eq_u32((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 65669 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("sm4"))) uint32x4_t vsm4ekeyq_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t) __builtin_neon_vsm4ekeyq_u32((int8x16_t)__p0, (int8x16_t)__p1, 50);
  return __ret;
}
# 65685 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int32_t vqrdmlahs_s32(int32_t __p0, int32_t __p1, int32_t __p2) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqrdmlahs_s32(__p0, __p1, __p2);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int16_t vqrdmlahh_s16(int16_t __p0, int16_t __p1, int16_t __p2) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqrdmlahh_s16(__p0, __p1, __p2);
  return __ret;
}
# 65875 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int32_t vqrdmlshs_s32(int32_t __p0, int32_t __p1, int32_t __p2) {
  int32_t __ret;
  __ret = (int32_t) __builtin_neon_vqrdmlshs_s32(__p0, __p1, __p2);
  return __ret;
}
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.1a"))) int16_t vqrdmlshh_s16(int16_t __p0, int16_t __p1, int16_t __p2) {
  int16_t __ret;
  __ret = (int16_t) __builtin_neon_vqrdmlshh_s16(__p0, __p1, __p2);
  return __ret;
}
# 66066 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x2_t vcaddq_rot270_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcaddq_rot270_f64((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 66083 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x2_t vcaddq_rot90_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcaddq_rot90_f64((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 66100 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x2_t vcmlaq_f64(float64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcmlaq_f64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 42);
  return __ret;
}
# 66122 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x1_t vcmla_f64(float64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vcmla_f64((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 10);
  return __ret;
}
# 66218 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x2_t vcmlaq_rot180_f64(float64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcmlaq_rot180_f64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 42);
  return __ret;
}
# 66240 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x1_t vcmla_rot180_f64(float64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vcmla_rot180_f64((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 10);
  return __ret;
}
# 66336 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x2_t vcmlaq_rot270_f64(float64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcmlaq_rot270_f64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 42);
  return __ret;
}
# 66358 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x1_t vcmla_rot270_f64(float64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vcmla_rot270_f64((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 10);
  return __ret;
}
# 66454 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x2_t vcmlaq_rot90_f64(float64x2_t __p0, float64x2_t __p1, float64x2_t __p2) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vcmlaq_rot90_f64((int8x16_t)__p0, (int8x16_t)__p1, (int8x16_t)__p2, 42);
  return __ret;
}
# 66476 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.3a"))) float64x1_t vcmla_rot90_f64(float64x1_t __p0, float64x1_t __p1, float64x1_t __p2) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vcmla_rot90_f64((int8x8_t)__p0, (int8x8_t)__p1, (int8x8_t)__p2, 10);
  return __ret;
}
# 66572 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.5a"))) float32x4_t vrnd32xq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrnd32xq_f32((int8x16_t)__p0, 41);
  return __ret;
}
# 66588 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.5a"))) float32x2_t vrnd32x_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrnd32x_f32((int8x8_t)__p0, 9);
  return __ret;
}
# 66604 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.5a"))) float32x4_t vrnd32zq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrnd32zq_f32((int8x16_t)__p0, 41);
  return __ret;
}
# 66620 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.5a"))) float32x2_t vrnd32z_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrnd32z_f32((int8x8_t)__p0, 9);
  return __ret;
}
# 66636 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.5a"))) float32x4_t vrnd64xq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrnd64xq_f32((int8x16_t)__p0, 41);
  return __ret;
}
# 66652 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.5a"))) float32x2_t vrnd64x_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrnd64x_f32((int8x8_t)__p0, 9);
  return __ret;
}
# 66668 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.5a"))) float32x4_t vrnd64zq_f32(float32x4_t __p0) {
  float32x4_t __ret;
  __ret = (float32x4_t) __builtin_neon_vrnd64zq_f32((int8x16_t)__p0, 41);
  return __ret;
}
# 66684 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("v8.5a"))) float32x2_t vrnd64z_f32(float32x2_t __p0) {
  float32x2_t __ret;
  __ret = (float32x2_t) __builtin_neon_vrnd64z_f32((int8x8_t)__p0, 9);
  return __ret;
}
# 66702 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrndq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrndq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 66717 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrnd_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrnd_v((int8x8_t)__p0, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrndaq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrndaq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 66738 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrnda_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrnda_v((int8x8_t)__p0, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrndiq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrndiq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 66759 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrndi_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrndi_v((int8x8_t)__p0, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrndmq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrndmq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 66780 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrndm_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrndm_v((int8x8_t)__p0, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrndnq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrndnq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 66801 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrndn_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrndn_v((int8x8_t)__p0, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrndpq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrndpq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 66822 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrndp_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrndp_v((int8x8_t)__p0, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vrndxq_f64(float64x2_t __p0) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vrndxq_v((int8x16_t)__p0, 42);
  return __ret;
}
# 66843 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vrndx_f64(float64x1_t __p0) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vrndx_v((int8x8_t)__p0, 10);
  return __ret;
}



static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vmaxnmq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vmaxnmq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 66867 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vmaxnm_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vmaxnm_v((int8x8_t)__p0, (int8x8_t)__p1, 10);
  return __ret;
}

static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x2_t vminnmq_f64(float64x2_t __p0, float64x2_t __p1) {
  float64x2_t __ret;
  __ret = (float64x2_t) __builtin_neon_vminnmq_v((int8x16_t)__p0, (int8x16_t)__p1, 42);
  return __ret;
}
# 66889 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) float64x1_t vminnm_f64(float64x1_t __p0, float64x1_t __p1) {
  float64x1_t __ret;
  __ret = (float64x1_t) __builtin_neon_vminnm_v((int8x8_t)__p0, (int8x8_t)__p1, 10);
  return __ret;
}


static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x16_t vabaq_u8(uint8x16_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint8x16_t __ret;
  __ret = __p0 + vabdq_u8(__p1, __p2);
  return __ret;
}
# 66914 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vabaq_u32(uint32x4_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 + vabdq_u32(__p1, __p2);
  return __ret;
}
# 66932 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vabaq_u16(uint16x8_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint16x8_t __ret;
  __ret = __p0 + vabdq_u16(__p1, __p2);
  return __ret;
}
# 66950 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x16_t vabaq_s8(int8x16_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int8x16_t __ret;
  __ret = __p0 + vabdq_s8(__p1, __p2);
  return __ret;
}
# 66968 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vabaq_s32(int32x4_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int32x4_t __ret;
  __ret = __p0 + vabdq_s32(__p1, __p2);
  return __ret;
}
# 66986 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vabaq_s16(int16x8_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int16x8_t __ret;
  __ret = __p0 + vabdq_s16(__p1, __p2);
  return __ret;
}
# 67004 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint8x8_t vaba_u8(uint8x8_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint8x8_t __ret;
  __ret = __p0 + vabd_u8(__p1, __p2);
  return __ret;
}
# 67022 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x2_t vaba_u32(uint32x2_t __p0, uint32x2_t __p1, uint32x2_t __p2) {
  uint32x2_t __ret;
  __ret = __p0 + vabd_u32(__p1, __p2);
  return __ret;
}
# 67040 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x4_t vaba_u16(uint16x4_t __p0, uint16x4_t __p1, uint16x4_t __p2) {
  uint16x4_t __ret;
  __ret = __p0 + vabd_u16(__p1, __p2);
  return __ret;
}
# 67058 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int8x8_t vaba_s8(int8x8_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int8x8_t __ret;
  __ret = __p0 + vabd_s8(__p1, __p2);
  return __ret;
}
# 67076 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x2_t vaba_s32(int32x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int32x2_t __ret;
  __ret = __p0 + vabd_s32(__p1, __p2);
  return __ret;
}
# 67094 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x4_t vaba_s16(int16x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int16x4_t __ret;
  __ret = __p0 + vabd_s16(__p1, __p2);
  return __ret;
}
# 67112 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vabdl_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint16x8_t __ret;
  __ret = (uint16x8_t)(vmovl_u8((uint8x8_t)(vabd_u8(__p0, __p1))));
  return __ret;
}
# 67134 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vabdl_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint64x2_t __ret;
  __ret = (uint64x2_t)(vmovl_u32((uint32x2_t)(vabd_u32(__p0, __p1))));
  return __ret;
}
# 67156 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vabdl_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint32x4_t __ret;
  __ret = (uint32x4_t)(vmovl_u16((uint16x4_t)(vabd_u16(__p0, __p1))));
  return __ret;
}
# 67178 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vabdl_s8(int8x8_t __p0, int8x8_t __p1) {
  int16x8_t __ret;
  __ret = (int16x8_t)(vmovl_u8((uint8x8_t)(vabd_s8(__p0, __p1))));
  return __ret;
}
# 67200 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vabdl_s32(int32x2_t __p0, int32x2_t __p1) {
  int64x2_t __ret;
  __ret = (int64x2_t)(vmovl_u32((uint32x2_t)(vabd_s32(__p0, __p1))));
  return __ret;
}
# 67222 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vabdl_s16(int16x4_t __p0, int16x4_t __p1) {
  int32x4_t __ret;
  __ret = (int32x4_t)(vmovl_u16((uint16x4_t)(vabd_s16(__p0, __p1))));
  return __ret;
}
# 67244 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vaddl_u8(uint8x8_t __p0, uint8x8_t __p1) {
  uint16x8_t __ret;
  __ret = vmovl_u8(__p0) + vmovl_u8(__p1);
  return __ret;
}
# 67261 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vaddl_u32(uint32x2_t __p0, uint32x2_t __p1) {
  uint64x2_t __ret;
  __ret = vmovl_u32(__p0) + vmovl_u32(__p1);
  return __ret;
}
# 67278 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vaddl_u16(uint16x4_t __p0, uint16x4_t __p1) {
  uint32x4_t __ret;
  __ret = vmovl_u16(__p0) + vmovl_u16(__p1);
  return __ret;
}
# 67295 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vaddl_s8(int8x8_t __p0, int8x8_t __p1) {
  int16x8_t __ret;
  __ret = vmovl_s8(__p0) + vmovl_s8(__p1);
  return __ret;
}
# 67312 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vaddl_s32(int32x2_t __p0, int32x2_t __p1) {
  int64x2_t __ret;
  __ret = vmovl_s32(__p0) + vmovl_s32(__p1);
  return __ret;
}
# 67329 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vaddl_s16(int16x4_t __p0, int16x4_t __p1) {
  int32x4_t __ret;
  __ret = vmovl_s16(__p0) + vmovl_s16(__p1);
  return __ret;
}
# 67346 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vaddw_u8(uint16x8_t __p0, uint8x8_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 + vmovl_u8(__p1);
  return __ret;
}
# 67363 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vaddw_u32(uint64x2_t __p0, uint32x2_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 + vmovl_u32(__p1);
  return __ret;
}
# 67380 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vaddw_u16(uint32x4_t __p0, uint16x4_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 + vmovl_u16(__p1);
  return __ret;
}
# 67397 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vaddw_s8(int16x8_t __p0, int8x8_t __p1) {
  int16x8_t __ret;
  __ret = __p0 + vmovl_s8(__p1);
  return __ret;
}
# 67414 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vaddw_s32(int64x2_t __p0, int32x2_t __p1) {
  int64x2_t __ret;
  __ret = __p0 + vmovl_s32(__p1);
  return __ret;
}
# 67431 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vaddw_s16(int32x4_t __p0, int16x4_t __p1) {
  int32x4_t __ret;
  __ret = __p0 + vmovl_s16(__p1);
  return __ret;
}
# 67506 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmlal_u8(uint16x8_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint16x8_t __ret;
  __ret = __p0 + vmull_u8(__p1, __p2);
  return __ret;
}
# 67529 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmlal_u32(uint64x2_t __p0, uint32x2_t __p1, uint32x2_t __p2) {
  uint64x2_t __ret;
  __ret = __p0 + vmull_u32(__p1, __p2);
  return __ret;
}
# 67552 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlal_u16(uint32x4_t __p0, uint16x4_t __p1, uint16x4_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 + vmull_u16(__p1, __p2);
  return __ret;
}
# 67575 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmlal_s8(int16x8_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int16x8_t __ret;
  __ret = __p0 + vmull_s8(__p1, __p2);
  return __ret;
}
# 67598 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmlal_s32(int64x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int64x2_t __ret;
  __ret = __p0 + vmull_s32(__p1, __p2);
  return __ret;
}
# 67621 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlal_s16(int32x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int32x4_t __ret;
  __ret = __p0 + vmull_s16(__p1, __p2);
  return __ret;
}
# 67740 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmlal_n_u32(uint64x2_t __p0, uint32x2_t __p1, uint32_t __p2) {
  uint64x2_t __ret;
  __ret = __p0 + vmull_u32(__p1, (uint32x2_t) {__p2, __p2});
  return __ret;
}
# 67762 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlal_n_u16(uint32x4_t __p0, uint16x4_t __p1, uint16_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 + vmull_u16(__p1, (uint16x4_t) {__p2, __p2, __p2, __p2});
  return __ret;
}
# 67784 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmlal_n_s32(int64x2_t __p0, int32x2_t __p1, int32_t __p2) {
  int64x2_t __ret;
  __ret = __p0 + vmull_s32(__p1, (int32x2_t) {__p2, __p2});
  return __ret;
}
# 67806 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlal_n_s16(int32x4_t __p0, int16x4_t __p1, int16_t __p2) {
  int32x4_t __ret;
  __ret = __p0 + vmull_s16(__p1, (int16x4_t) {__p2, __p2, __p2, __p2});
  return __ret;
}
# 67828 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmlsl_u8(uint16x8_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint16x8_t __ret;
  __ret = __p0 - vmull_u8(__p1, __p2);
  return __ret;
}
# 67851 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmlsl_u32(uint64x2_t __p0, uint32x2_t __p1, uint32x2_t __p2) {
  uint64x2_t __ret;
  __ret = __p0 - vmull_u32(__p1, __p2);
  return __ret;
}
# 67874 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlsl_u16(uint32x4_t __p0, uint16x4_t __p1, uint16x4_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 - vmull_u16(__p1, __p2);
  return __ret;
}
# 67897 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmlsl_s8(int16x8_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int16x8_t __ret;
  __ret = __p0 - vmull_s8(__p1, __p2);
  return __ret;
}
# 67920 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmlsl_s32(int64x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int64x2_t __ret;
  __ret = __p0 - vmull_s32(__p1, __p2);
  return __ret;
}
# 67943 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlsl_s16(int32x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int32x4_t __ret;
  __ret = __p0 - vmull_s16(__p1, __p2);
  return __ret;
}
# 68062 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmlsl_n_u32(uint64x2_t __p0, uint32x2_t __p1, uint32_t __p2) {
  uint64x2_t __ret;
  __ret = __p0 - vmull_u32(__p1, (uint32x2_t) {__p2, __p2});
  return __ret;
}
# 68084 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlsl_n_u16(uint32x4_t __p0, uint16x4_t __p1, uint16_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 - vmull_u16(__p1, (uint16x4_t) {__p2, __p2, __p2, __p2});
  return __ret;
}
# 68106 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmlsl_n_s32(int64x2_t __p0, int32x2_t __p1, int32_t __p2) {
  int64x2_t __ret;
  __ret = __p0 - vmull_s32(__p1, (int32x2_t) {__p2, __p2});
  return __ret;
}
# 68128 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlsl_n_s16(int32x4_t __p0, int16x4_t __p1, int16_t __p2) {
  int32x4_t __ret;
  __ret = __p0 - vmull_s16(__p1, (int16x4_t) {__p2, __p2, __p2, __p2});
  return __ret;
}
# 68298 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x4_t vcvtq_high_f32_bf16(bfloat16x8_t __p0) {
  float32x4_t __ret;
  __ret = vcvt_f32_bf16(vget_high_bf16(__p0));
  return __ret;
}
# 68314 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) __attribute__((target("bf16"))) float32x4_t vcvtq_low_f32_bf16(bfloat16x8_t __p0) {
  float32x4_t __ret;
  __ret = vcvt_f32_bf16(vget_low_bf16(__p0));
  return __ret;
}
# 68383 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vabdl_high_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint16x8_t __ret;
  __ret = vabdl_u8(vget_high_u8(__p0), vget_high_u8(__p1));
  return __ret;
}
# 68400 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vabdl_high_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint64x2_t __ret;
  __ret = vabdl_u32(vget_high_u32(__p0), vget_high_u32(__p1));
  return __ret;
}
# 68417 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vabdl_high_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint32x4_t __ret;
  __ret = vabdl_u16(vget_high_u16(__p0), vget_high_u16(__p1));
  return __ret;
}
# 68434 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vabdl_high_s8(int8x16_t __p0, int8x16_t __p1) {
  int16x8_t __ret;
  __ret = vabdl_s8(vget_high_s8(__p0), vget_high_s8(__p1));
  return __ret;
}
# 68451 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vabdl_high_s32(int32x4_t __p0, int32x4_t __p1) {
  int64x2_t __ret;
  __ret = vabdl_s32(vget_high_s32(__p0), vget_high_s32(__p1));
  return __ret;
}
# 68468 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vabdl_high_s16(int16x8_t __p0, int16x8_t __p1) {
  int32x4_t __ret;
  __ret = vabdl_s16(vget_high_s16(__p0), vget_high_s16(__p1));
  return __ret;
}
# 68485 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vaddl_high_u8(uint8x16_t __p0, uint8x16_t __p1) {
  uint16x8_t __ret;
  __ret = vmovl_high_u8(__p0) + vmovl_high_u8(__p1);
  return __ret;
}
# 68502 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vaddl_high_u32(uint32x4_t __p0, uint32x4_t __p1) {
  uint64x2_t __ret;
  __ret = vmovl_high_u32(__p0) + vmovl_high_u32(__p1);
  return __ret;
}
# 68519 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vaddl_high_u16(uint16x8_t __p0, uint16x8_t __p1) {
  uint32x4_t __ret;
  __ret = vmovl_high_u16(__p0) + vmovl_high_u16(__p1);
  return __ret;
}
# 68536 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vaddl_high_s8(int8x16_t __p0, int8x16_t __p1) {
  int16x8_t __ret;
  __ret = vmovl_high_s8(__p0) + vmovl_high_s8(__p1);
  return __ret;
}
# 68553 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vaddl_high_s32(int32x4_t __p0, int32x4_t __p1) {
  int64x2_t __ret;
  __ret = vmovl_high_s32(__p0) + vmovl_high_s32(__p1);
  return __ret;
}
# 68570 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vaddl_high_s16(int16x8_t __p0, int16x8_t __p1) {
  int32x4_t __ret;
  __ret = vmovl_high_s16(__p0) + vmovl_high_s16(__p1);
  return __ret;
}
# 68587 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vaddw_high_u8(uint16x8_t __p0, uint8x16_t __p1) {
  uint16x8_t __ret;
  __ret = __p0 + vmovl_high_u8(__p1);
  return __ret;
}
# 68604 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vaddw_high_u32(uint64x2_t __p0, uint32x4_t __p1) {
  uint64x2_t __ret;
  __ret = __p0 + vmovl_high_u32(__p1);
  return __ret;
}
# 68621 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vaddw_high_u16(uint32x4_t __p0, uint16x8_t __p1) {
  uint32x4_t __ret;
  __ret = __p0 + vmovl_high_u16(__p1);
  return __ret;
}
# 68638 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vaddw_high_s8(int16x8_t __p0, int8x16_t __p1) {
  int16x8_t __ret;
  __ret = __p0 + vmovl_high_s8(__p1);
  return __ret;
}
# 68655 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vaddw_high_s32(int64x2_t __p0, int32x4_t __p1) {
  int64x2_t __ret;
  __ret = __p0 + vmovl_high_s32(__p1);
  return __ret;
}
# 68672 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vaddw_high_s16(int32x4_t __p0, int16x8_t __p1) {
  int32x4_t __ret;
  __ret = __p0 + vmovl_high_s16(__p1);
  return __ret;
}
# 68823 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmlal_high_u8(uint16x8_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint16x8_t __ret;
  __ret = vmlal_u8(__p0, vget_high_u8(__p1), vget_high_u8(__p2));
  return __ret;
}
# 68841 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmlal_high_u32(uint64x2_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint64x2_t __ret;
  __ret = vmlal_u32(__p0, vget_high_u32(__p1), vget_high_u32(__p2));
  return __ret;
}
# 68859 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlal_high_u16(uint32x4_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint32x4_t __ret;
  __ret = vmlal_u16(__p0, vget_high_u16(__p1), vget_high_u16(__p2));
  return __ret;
}
# 68877 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmlal_high_s8(int16x8_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int16x8_t __ret;
  __ret = vmlal_s8(__p0, vget_high_s8(__p1), vget_high_s8(__p2));
  return __ret;
}
# 68895 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmlal_high_s32(int64x2_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int64x2_t __ret;
  __ret = vmlal_s32(__p0, vget_high_s32(__p1), vget_high_s32(__p2));
  return __ret;
}
# 68913 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlal_high_s16(int32x4_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int32x4_t __ret;
  __ret = vmlal_s16(__p0, vget_high_s16(__p1), vget_high_s16(__p2));
  return __ret;
}
# 68931 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmlal_high_n_u32(uint64x2_t __p0, uint32x4_t __p1, uint32_t __p2) {
  uint64x2_t __ret;
  __ret = vmlal_n_u32(__p0, vget_high_u32(__p1), __p2);
  return __ret;
}
# 68948 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlal_high_n_u16(uint32x4_t __p0, uint16x8_t __p1, uint16_t __p2) {
  uint32x4_t __ret;
  __ret = vmlal_n_u16(__p0, vget_high_u16(__p1), __p2);
  return __ret;
}
# 68965 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmlal_high_n_s32(int64x2_t __p0, int32x4_t __p1, int32_t __p2) {
  int64x2_t __ret;
  __ret = vmlal_n_s32(__p0, vget_high_s32(__p1), __p2);
  return __ret;
}
# 68982 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlal_high_n_s16(int32x4_t __p0, int16x8_t __p1, int16_t __p2) {
  int32x4_t __ret;
  __ret = vmlal_n_s16(__p0, vget_high_s16(__p1), __p2);
  return __ret;
}
# 68999 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vmlsl_high_u8(uint16x8_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint16x8_t __ret;
  __ret = vmlsl_u8(__p0, vget_high_u8(__p1), vget_high_u8(__p2));
  return __ret;
}
# 69017 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmlsl_high_u32(uint64x2_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint64x2_t __ret;
  __ret = vmlsl_u32(__p0, vget_high_u32(__p1), vget_high_u32(__p2));
  return __ret;
}
# 69035 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlsl_high_u16(uint32x4_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint32x4_t __ret;
  __ret = vmlsl_u16(__p0, vget_high_u16(__p1), vget_high_u16(__p2));
  return __ret;
}
# 69053 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vmlsl_high_s8(int16x8_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int16x8_t __ret;
  __ret = vmlsl_s8(__p0, vget_high_s8(__p1), vget_high_s8(__p2));
  return __ret;
}
# 69071 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmlsl_high_s32(int64x2_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int64x2_t __ret;
  __ret = vmlsl_s32(__p0, vget_high_s32(__p1), vget_high_s32(__p2));
  return __ret;
}
# 69089 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlsl_high_s16(int32x4_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int32x4_t __ret;
  __ret = vmlsl_s16(__p0, vget_high_s16(__p1), vget_high_s16(__p2));
  return __ret;
}
# 69107 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vmlsl_high_n_u32(uint64x2_t __p0, uint32x4_t __p1, uint32_t __p2) {
  uint64x2_t __ret;
  __ret = vmlsl_n_u32(__p0, vget_high_u32(__p1), __p2);
  return __ret;
}
# 69124 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vmlsl_high_n_u16(uint32x4_t __p0, uint16x8_t __p1, uint16_t __p2) {
  uint32x4_t __ret;
  __ret = vmlsl_n_u16(__p0, vget_high_u16(__p1), __p2);
  return __ret;
}
# 69141 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vmlsl_high_n_s32(int64x2_t __p0, int32x4_t __p1, int32_t __p2) {
  int64x2_t __ret;
  __ret = vmlsl_n_s32(__p0, vget_high_s32(__p1), __p2);
  return __ret;
}
# 69158 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vmlsl_high_n_s16(int32x4_t __p0, int16x8_t __p1, int16_t __p2) {
  int32x4_t __ret;
  __ret = vmlsl_n_s16(__p0, vget_high_s16(__p1), __p2);
  return __ret;
}
# 69633 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vabal_u8(uint16x8_t __p0, uint8x8_t __p1, uint8x8_t __p2) {
  uint16x8_t __ret;
  __ret = __p0 + vabdl_u8(__p1, __p2);
  return __ret;
}
# 69656 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vabal_u32(uint64x2_t __p0, uint32x2_t __p1, uint32x2_t __p2) {
  uint64x2_t __ret;
  __ret = __p0 + vabdl_u32(__p1, __p2);
  return __ret;
}
# 69679 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vabal_u16(uint32x4_t __p0, uint16x4_t __p1, uint16x4_t __p2) {
  uint32x4_t __ret;
  __ret = __p0 + vabdl_u16(__p1, __p2);
  return __ret;
}
# 69702 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vabal_s8(int16x8_t __p0, int8x8_t __p1, int8x8_t __p2) {
  int16x8_t __ret;
  __ret = __p0 + vabdl_s8(__p1, __p2);
  return __ret;
}
# 69725 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vabal_s32(int64x2_t __p0, int32x2_t __p1, int32x2_t __p2) {
  int64x2_t __ret;
  __ret = __p0 + vabdl_s32(__p1, __p2);
  return __ret;
}
# 69748 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vabal_s16(int32x4_t __p0, int16x4_t __p1, int16x4_t __p2) {
  int32x4_t __ret;
  __ret = __p0 + vabdl_s16(__p1, __p2);
  return __ret;
}
# 69772 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint16x8_t vabal_high_u8(uint16x8_t __p0, uint8x16_t __p1, uint8x16_t __p2) {
  uint16x8_t __ret;
  __ret = vabal_u8(__p0, vget_high_u8(__p1), vget_high_u8(__p2));
  return __ret;
}
# 69790 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint64x2_t vabal_high_u32(uint64x2_t __p0, uint32x4_t __p1, uint32x4_t __p2) {
  uint64x2_t __ret;
  __ret = vabal_u32(__p0, vget_high_u32(__p1), vget_high_u32(__p2));
  return __ret;
}
# 69808 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) uint32x4_t vabal_high_u16(uint32x4_t __p0, uint16x8_t __p1, uint16x8_t __p2) {
  uint32x4_t __ret;
  __ret = vabal_u16(__p0, vget_high_u16(__p1), vget_high_u16(__p2));
  return __ret;
}
# 69826 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int16x8_t vabal_high_s8(int16x8_t __p0, int8x16_t __p1, int8x16_t __p2) {
  int16x8_t __ret;
  __ret = vabal_s8(__p0, vget_high_s8(__p1), vget_high_s8(__p2));
  return __ret;
}
# 69844 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int64x2_t vabal_high_s32(int64x2_t __p0, int32x4_t __p1, int32x4_t __p2) {
  int64x2_t __ret;
  __ret = vabal_s32(__p0, vget_high_s32(__p1), vget_high_s32(__p2));
  return __ret;
}
# 69862 "/Library/Developer/CommandLineTools/usr/lib/clang/16/include/arm_neon.h" 3
static __inline__ __attribute__((__always_inline__, __nodebug__)) int32x4_t vabal_high_s16(int32x4_t __p0, int16x8_t __p1, int16x8_t __p2) {
  int32x4_t __ret;
  __ret = vabal_s16(__p0, vget_high_s16(__p1), vget_high_s16(__p2));
  return __ret;
}
# 90 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h" 2
# 136 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 137 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h" 2
# 158 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) int SDL_GetCPUCount(void);
# 170 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) int SDL_GetCPUCacheLineSize(void);
# 192 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasRDTSC(void);
# 215 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasAltiVec(void);
# 237 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasMMX(void);
# 259 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_Has3DNow(void);
# 281 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasSSE(void);
# 303 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasSSE2(void);
# 325 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasSSE3(void);
# 347 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasSSE41(void);
# 369 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasSSE42(void);
# 391 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasAVX(void);
# 413 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasAVX2(void);
# 426 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasAVX512F(void);
# 441 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasARMSIMD(void);
# 452 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasNEON(void);
# 465 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasLSX(void);
# 478 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasLASX(void);
# 487 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) int SDL_GetSystemRAM(void);
# 506 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) size_t SDL_SIMDGetAlignment(void);
# 545 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) void * SDL_SIMDAlloc(const size_t len);
# 569 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) void * SDL_SIMDRealloc(void *mem, const size_t len);
# 593 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h"
extern __attribute__ ((visibility("default"))) void SDL_SIMDFree(void *ptr);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 600 "/opt/homebrew/include/SDL2/SDL_cpuinfo.h" 2
# 38 "/opt/homebrew/include/SDL2/SDL.h" 2


# 1 "/opt/homebrew/include/SDL2/SDL_events.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_events.h"
# 1 "/opt/homebrew/include/SDL2/SDL_video.h" 1
# 32 "/opt/homebrew/include/SDL2/SDL_video.h"
# 1 "/opt/homebrew/include/SDL2/SDL_pixels.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_pixels.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 35 "/opt/homebrew/include/SDL2/SDL_pixels.h" 2
# 51 "/opt/homebrew/include/SDL2/SDL_pixels.h"
typedef enum
{
    SDL_PIXELTYPE_UNKNOWN,
    SDL_PIXELTYPE_INDEX1,
    SDL_PIXELTYPE_INDEX4,
    SDL_PIXELTYPE_INDEX8,
    SDL_PIXELTYPE_PACKED8,
    SDL_PIXELTYPE_PACKED16,
    SDL_PIXELTYPE_PACKED32,
    SDL_PIXELTYPE_ARRAYU8,
    SDL_PIXELTYPE_ARRAYU16,
    SDL_PIXELTYPE_ARRAYU32,
    SDL_PIXELTYPE_ARRAYF16,
    SDL_PIXELTYPE_ARRAYF32,


    SDL_PIXELTYPE_INDEX2
} SDL_PixelType;


typedef enum
{
    SDL_BITMAPORDER_NONE,
    SDL_BITMAPORDER_4321,
    SDL_BITMAPORDER_1234
} SDL_BitmapOrder;


typedef enum
{
    SDL_PACKEDORDER_NONE,
    SDL_PACKEDORDER_XRGB,
    SDL_PACKEDORDER_RGBX,
    SDL_PACKEDORDER_ARGB,
    SDL_PACKEDORDER_RGBA,
    SDL_PACKEDORDER_XBGR,
    SDL_PACKEDORDER_BGRX,
    SDL_PACKEDORDER_ABGR,
    SDL_PACKEDORDER_BGRA
} SDL_PackedOrder;




typedef enum
{
    SDL_ARRAYORDER_NONE,
    SDL_ARRAYORDER_RGB,
    SDL_ARRAYORDER_RGBA,
    SDL_ARRAYORDER_ARGB,
    SDL_ARRAYORDER_BGR,
    SDL_ARRAYORDER_BGRA,
    SDL_ARRAYORDER_ABGR
} SDL_ArrayOrder;


typedef enum
{
    SDL_PACKEDLAYOUT_NONE,
    SDL_PACKEDLAYOUT_332,
    SDL_PACKEDLAYOUT_4444,
    SDL_PACKEDLAYOUT_1555,
    SDL_PACKEDLAYOUT_5551,
    SDL_PACKEDLAYOUT_565,
    SDL_PACKEDLAYOUT_8888,
    SDL_PACKEDLAYOUT_2101010,
    SDL_PACKEDLAYOUT_1010102
} SDL_PackedLayout;
# 175 "/opt/homebrew/include/SDL2/SDL_pixels.h"
typedef enum
{
    SDL_PIXELFORMAT_UNKNOWN,
    SDL_PIXELFORMAT_INDEX1LSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX1) << 24) | ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((1) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX1MSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX1) << 24) | ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((1) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX2LSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX2) << 24) | ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((2) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX2MSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX2) << 24) | ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((2) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX4LSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX4) << 24) | ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((4) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX4MSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX4) << 24) | ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((4) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX8 =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX8) << 24) | ((0) << 20) | ((0) << 16) | ((8) << 8) | ((1) << 0)),
    SDL_PIXELFORMAT_RGB332 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED8) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_332) << 16) | ((8) << 8) | ((1) << 0)),

    SDL_PIXELFORMAT_XRGB4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((12) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGB444 = SDL_PIXELFORMAT_XRGB4444,
    SDL_PIXELFORMAT_XBGR4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((12) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGR444 = SDL_PIXELFORMAT_XBGR4444,
    SDL_PIXELFORMAT_XRGB1555 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((15) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGB555 = SDL_PIXELFORMAT_XRGB1555,
    SDL_PIXELFORMAT_XBGR1555 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((15) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGR555 = SDL_PIXELFORMAT_XBGR1555,
    SDL_PIXELFORMAT_ARGB4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGBA4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_ABGR4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGRA4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_ARGB1555 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGBA5551 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_5551) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_ABGR1555 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGRA5551 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_5551) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGB565 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_565) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGR565 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_565) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGB24 =
        ((1 << 28) | ((SDL_PIXELTYPE_ARRAYU8) << 24) | ((SDL_ARRAYORDER_RGB) << 20) | ((0) << 16) | ((24) << 8) | ((3) << 0)),

    SDL_PIXELFORMAT_BGR24 =
        ((1 << 28) | ((SDL_PIXELTYPE_ARRAYU8) << 24) | ((SDL_ARRAYORDER_BGR) << 20) | ((0) << 16) | ((24) << 8) | ((3) << 0)),

    SDL_PIXELFORMAT_XRGB8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_RGB888 = SDL_PIXELFORMAT_XRGB8888,
    SDL_PIXELFORMAT_RGBX8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_RGBX) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_XBGR8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_BGR888 = SDL_PIXELFORMAT_XBGR8888,
    SDL_PIXELFORMAT_BGRX8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_BGRX) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_ARGB8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_RGBA8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_ABGR8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_BGRA8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_ARGB2101010 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_2101010) << 16) | ((32) << 8) | ((4) << 0)),
# 294 "/opt/homebrew/include/SDL2/SDL_pixels.h"
    SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888,
    SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888,
    SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888,
    SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888,
    SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_XBGR8888,
    SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_BGRX8888,
    SDL_PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_XRGB8888,
    SDL_PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_RGBX8888,


    SDL_PIXELFORMAT_YV12 =
        ((((Uint32)(((Uint8)(('Y'))))) << 0) | (((Uint32)(((Uint8)(('V'))))) << 8) | (((Uint32)(((Uint8)(('1'))))) << 16) | (((Uint32)(((Uint8)(('2'))))) << 24)),
    SDL_PIXELFORMAT_IYUV =
        ((((Uint32)(((Uint8)(('I'))))) << 0) | (((Uint32)(((Uint8)(('Y'))))) << 8) | (((Uint32)(((Uint8)(('U'))))) << 16) | (((Uint32)(((Uint8)(('V'))))) << 24)),
    SDL_PIXELFORMAT_YUY2 =
        ((((Uint32)(((Uint8)(('Y'))))) << 0) | (((Uint32)(((Uint8)(('U'))))) << 8) | (((Uint32)(((Uint8)(('Y'))))) << 16) | (((Uint32)(((Uint8)(('2'))))) << 24)),
    SDL_PIXELFORMAT_UYVY =
        ((((Uint32)(((Uint8)(('U'))))) << 0) | (((Uint32)(((Uint8)(('Y'))))) << 8) | (((Uint32)(((Uint8)(('V'))))) << 16) | (((Uint32)(((Uint8)(('Y'))))) << 24)),
    SDL_PIXELFORMAT_YVYU =
        ((((Uint32)(((Uint8)(('Y'))))) << 0) | (((Uint32)(((Uint8)(('V'))))) << 8) | (((Uint32)(((Uint8)(('Y'))))) << 16) | (((Uint32)(((Uint8)(('U'))))) << 24)),
    SDL_PIXELFORMAT_NV12 =
        ((((Uint32)(((Uint8)(('N'))))) << 0) | (((Uint32)(((Uint8)(('V'))))) << 8) | (((Uint32)(((Uint8)(('1'))))) << 16) | (((Uint32)(((Uint8)(('2'))))) << 24)),
    SDL_PIXELFORMAT_NV21 =
        ((((Uint32)(((Uint8)(('N'))))) << 0) | (((Uint32)(((Uint8)(('V'))))) << 8) | (((Uint32)(((Uint8)(('2'))))) << 16) | (((Uint32)(((Uint8)(('1'))))) << 24)),
    SDL_PIXELFORMAT_EXTERNAL_OES =
        ((((Uint32)(((Uint8)(('O'))))) << 0) | (((Uint32)(((Uint8)(('E'))))) << 8) | (((Uint32)(((Uint8)(('S'))))) << 16) | (((Uint32)(((Uint8)((' '))))) << 24))
} SDL_PixelFormatEnum;







typedef struct SDL_Color
{
    Uint8 r;
    Uint8 g;
    Uint8 b;
    Uint8 a;
} SDL_Color;


typedef struct SDL_Palette
{
    int ncolors;
    SDL_Color *colors;
    Uint32 version;
    int refcount;
} SDL_Palette;
# 371 "/opt/homebrew/include/SDL2/SDL_pixels.h"
typedef struct SDL_PixelFormat
{
    Uint32 format;
    SDL_Palette *palette;
    Uint8 BitsPerPixel;
    Uint8 BytesPerPixel;
    Uint8 padding[2];
    Uint32 Rmask;
    Uint32 Gmask;
    Uint32 Bmask;
    Uint32 Amask;
    Uint8 Rloss;
    Uint8 Gloss;
    Uint8 Bloss;
    Uint8 Aloss;
    Uint8 Rshift;
    Uint8 Gshift;
    Uint8 Bshift;
    Uint8 Ashift;
    int refcount;
    struct SDL_PixelFormat *next;
} SDL_PixelFormat;
# 403 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) const char* SDL_GetPixelFormatName(Uint32 format);
# 421 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_PixelFormatEnumToMasks(Uint32 format,
                                                            int *bpp,
                                                            Uint32 * Rmask,
                                                            Uint32 * Gmask,
                                                            Uint32 * Bmask,
                                                            Uint32 * Amask);
# 445 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_MasksToPixelFormatEnum(int bpp,
                                                          Uint32 Rmask,
                                                          Uint32 Gmask,
                                                          Uint32 Bmask,
                                                          Uint32 Amask);
# 466 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) SDL_PixelFormat * SDL_AllocFormat(Uint32 pixel_format);
# 477 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) void SDL_FreeFormat(SDL_PixelFormat *format);
# 493 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) SDL_Palette * SDL_AllocPalette(int ncolors);
# 508 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) int SDL_SetPixelFormatPalette(SDL_PixelFormat * format,
                                                      SDL_Palette *palette);
# 526 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) int SDL_SetPaletteColors(SDL_Palette * palette,
                                                 const SDL_Color * colors,
                                                 int firstcolor, int ncolors);
# 539 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) void SDL_FreePalette(SDL_Palette * palette);
# 571 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_MapRGB(const SDL_PixelFormat * format,
                                          Uint8 r, Uint8 g, Uint8 b);
# 606 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_MapRGBA(const SDL_PixelFormat * format,
                                           Uint8 r, Uint8 g, Uint8 b,
                                           Uint8 a);
# 631 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) void SDL_GetRGB(Uint32 pixel,
                                        const SDL_PixelFormat * format,
                                        Uint8 * r, Uint8 * g, Uint8 * b);
# 660 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) void SDL_GetRGBA(Uint32 pixel,
                                         const SDL_PixelFormat * format,
                                         Uint8 * r, Uint8 * g, Uint8 * b,
                                         Uint8 * a);
# 675 "/opt/homebrew/include/SDL2/SDL_pixels.h"
extern __attribute__ ((visibility("default"))) void SDL_CalculateGammaRamp(float gamma, Uint16 * ramp);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 683 "/opt/homebrew/include/SDL2/SDL_pixels.h" 2
# 33 "/opt/homebrew/include/SDL2/SDL_video.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_rect.h" 1
# 36 "/opt/homebrew/include/SDL2/SDL_rect.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 37 "/opt/homebrew/include/SDL2/SDL_rect.h" 2
# 48 "/opt/homebrew/include/SDL2/SDL_rect.h"
typedef struct SDL_Point
{
    int x;
    int y;
} SDL_Point;







typedef struct SDL_FPoint
{
    float x;
    float y;
} SDL_FPoint;
# 78 "/opt/homebrew/include/SDL2/SDL_rect.h"
typedef struct SDL_Rect
{
    int x, y;
    int w, h;
} SDL_Rect;
# 98 "/opt/homebrew/include/SDL2/SDL_rect.h"
typedef struct SDL_FRect
{
    float x;
    float y;
    float w;
    float h;
} SDL_FRect;





__attribute__((always_inline)) static __inline__ SDL_bool SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r)
{
    return ( (p->x >= r->x) && (p->x < (r->x + r->w)) &&
             (p->y >= r->y) && (p->y < (r->y + r->h)) ) ? SDL_TRUE : SDL_FALSE;
}




__attribute__((always_inline)) static __inline__ SDL_bool SDL_RectEmpty(const SDL_Rect *r)
{
    return ((!r) || (r->w <= 0) || (r->h <= 0)) ? SDL_TRUE : SDL_FALSE;
}




__attribute__((always_inline)) static __inline__ SDL_bool SDL_RectEquals(const SDL_Rect *a, const SDL_Rect *b)
{
    return (a && b && (a->x == b->x) && (a->y == b->y) &&
            (a->w == b->w) && (a->h == b->h)) ? SDL_TRUE : SDL_FALSE;
}
# 146 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasIntersection(const SDL_Rect * A,
                                                     const SDL_Rect * B);
# 164 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IntersectRect(const SDL_Rect * A,
                                                   const SDL_Rect * B,
                                                   SDL_Rect * result);
# 178 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) void SDL_UnionRect(const SDL_Rect * A,
                                           const SDL_Rect * B,
                                           SDL_Rect * result);
# 199 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_EnclosePoints(const SDL_Point * points,
                                                   int count,
                                                   const SDL_Rect * clip,
                                                   SDL_Rect * result);
# 222 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IntersectRectAndLine(const SDL_Rect *
                                                          rect, int *X1,
                                                          int *Y1, int *X2,
                                                          int *Y2);







__attribute__((always_inline)) static __inline__ SDL_bool SDL_PointInFRect(const SDL_FPoint *p, const SDL_FRect *r)
{
    return ( (p->x >= r->x) && (p->x < (r->x + r->w)) &&
             (p->y >= r->y) && (p->y < (r->y + r->h)) ) ? SDL_TRUE : SDL_FALSE;
}




__attribute__((always_inline)) static __inline__ SDL_bool SDL_FRectEmpty(const SDL_FRect *r)
{
    return ((!r) || (r->w <= 0.0f) || (r->h <= 0.0f)) ? SDL_TRUE : SDL_FALSE;
}






__attribute__((always_inline)) static __inline__ SDL_bool SDL_FRectEqualsEpsilon(const SDL_FRect *a, const SDL_FRect *b, const float epsilon)
{
    return (a && b && ((a == b) ||
            ((SDL_fabsf(a->x - b->x) <= epsilon) &&
            (SDL_fabsf(a->y - b->y) <= epsilon) &&
            (SDL_fabsf(a->w - b->w) <= epsilon) &&
            (SDL_fabsf(a->h - b->h) <= epsilon))))
            ? SDL_TRUE : SDL_FALSE;
}






__attribute__((always_inline)) static __inline__ SDL_bool SDL_FRectEquals(const SDL_FRect *a, const SDL_FRect *b)
{
    return SDL_FRectEqualsEpsilon(a, b, 1.19209290e-7F);
}
# 285 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasIntersectionF(const SDL_FRect * A,
                                                      const SDL_FRect * B);
# 303 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IntersectFRect(const SDL_FRect * A,
                                                    const SDL_FRect * B,
                                                    SDL_FRect * result);
# 317 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) void SDL_UnionFRect(const SDL_FRect * A,
                                            const SDL_FRect * B,
                                            SDL_FRect * result);
# 339 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_EncloseFPoints(const SDL_FPoint * points,
                                                    int count,
                                                    const SDL_FRect * clip,
                                                    SDL_FRect * result);
# 363 "/opt/homebrew/include/SDL2/SDL_rect.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IntersectFRectAndLine(const SDL_FRect *
                                                           rect, float *X1,
                                                           float *Y1, float *X2,
                                                           float *Y2);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 373 "/opt/homebrew/include/SDL2/SDL_rect.h" 2
# 34 "/opt/homebrew/include/SDL2/SDL_video.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_surface.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_surface.h"
# 1 "/opt/homebrew/include/SDL2/SDL_blendmode.h" 1
# 31 "/opt/homebrew/include/SDL2/SDL_blendmode.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 32 "/opt/homebrew/include/SDL2/SDL_blendmode.h" 2








typedef enum SDL_BlendMode
{
    SDL_BLENDMODE_NONE = 0x00000000,

    SDL_BLENDMODE_BLEND = 0x00000001,


    SDL_BLENDMODE_ADD = 0x00000002,


    SDL_BLENDMODE_MOD = 0x00000004,


    SDL_BLENDMODE_MUL = 0x00000008,


    SDL_BLENDMODE_INVALID = 0x7FFFFFFF



} SDL_BlendMode;





typedef enum SDL_BlendOperation
{
    SDL_BLENDOPERATION_ADD = 0x1,
    SDL_BLENDOPERATION_SUBTRACT = 0x2,
    SDL_BLENDOPERATION_REV_SUBTRACT = 0x3,
    SDL_BLENDOPERATION_MINIMUM = 0x4,
    SDL_BLENDOPERATION_MAXIMUM = 0x5
} SDL_BlendOperation;




typedef enum SDL_BlendFactor
{
    SDL_BLENDFACTOR_ZERO = 0x1,
    SDL_BLENDFACTOR_ONE = 0x2,
    SDL_BLENDFACTOR_SRC_COLOR = 0x3,
    SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,
    SDL_BLENDFACTOR_SRC_ALPHA = 0x5,
    SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,
    SDL_BLENDFACTOR_DST_COLOR = 0x7,
    SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,
    SDL_BLENDFACTOR_DST_ALPHA = 0x9,
    SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA
} SDL_BlendFactor;
# 184 "/opt/homebrew/include/SDL2/SDL_blendmode.h"
extern __attribute__ ((visibility("default"))) SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor,
                                                                 SDL_BlendFactor dstColorFactor,
                                                                 SDL_BlendOperation colorOperation,
                                                                 SDL_BlendFactor srcAlphaFactor,
                                                                 SDL_BlendFactor dstAlphaFactor,
                                                                 SDL_BlendOperation alphaOperation);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 196 "/opt/homebrew/include/SDL2/SDL_blendmode.h" 2
# 35 "/opt/homebrew/include/SDL2/SDL_surface.h" 2


# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 38 "/opt/homebrew/include/SDL2/SDL_surface.h" 2
# 64 "/opt/homebrew/include/SDL2/SDL_surface.h"
typedef struct SDL_BlitMap SDL_BlitMap;







typedef struct SDL_Surface
{
    Uint32 flags;
    SDL_PixelFormat *format;
    int w, h;
    int pitch;
    void *pixels;


    void *userdata;


    int locked;


    void *list_blitmap;


    SDL_Rect clip_rect;


    SDL_BlitMap *map;


    int refcount;
} SDL_Surface;




typedef int ( *SDL_blit) (struct SDL_Surface * src, SDL_Rect * srcrect,
                                 struct SDL_Surface * dst, SDL_Rect * dstrect);




typedef enum SDL_YUV_CONVERSION_MODE
{
    SDL_YUV_CONVERSION_JPEG,
    SDL_YUV_CONVERSION_BT601,
    SDL_YUV_CONVERSION_BT709,
    SDL_YUV_CONVERSION_AUTOMATIC
} SDL_YUV_CONVERSION_MODE;
# 160 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_CreateRGBSurface
    (Uint32 flags, int width, int height, int depth,
     Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
# 188 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_CreateRGBSurfaceWithFormat
    (Uint32 flags, int width, int height, int depth, Uint32 format);
# 220 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_CreateRGBSurfaceFrom(void *pixels,
                                                              int width,
                                                              int height,
                                                              int depth,
                                                              int pitch,
                                                              Uint32 Rmask,
                                                              Uint32 Gmask,
                                                              Uint32 Bmask,
                                                              Uint32 Amask);
# 258 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_CreateRGBSurfaceWithFormatFrom
    (void *pixels, int width, int height, int depth, int pitch, Uint32 format);
# 275 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) void SDL_FreeSurface(SDL_Surface * surface);
# 289 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_SetSurfacePalette(SDL_Surface * surface,
                                                  SDL_Palette * palette);
# 313 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_LockSurface(SDL_Surface * surface);
# 324 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) void SDL_UnlockSurface(SDL_Surface * surface);
# 348 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_LoadBMP_RW(SDL_RWops * src,
                                                    int freesrc);
# 378 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_SaveBMP_RW
    (SDL_Surface * surface, SDL_RWops * dst, int freedst);
# 406 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_SetSurfaceRLE(SDL_Surface * surface,
                                              int flag);
# 421 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasSurfaceRLE(SDL_Surface * surface);
# 447 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_SetColorKey(SDL_Surface * surface,
                                            int flag, Uint32 key);
# 463 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasColorKey(SDL_Surface * surface);
# 483 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_GetColorKey(SDL_Surface * surface,
                                            Uint32 * key);
# 507 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_SetSurfaceColorMod(SDL_Surface * surface,
                                                   Uint8 r, Uint8 g, Uint8 b);
# 526 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_GetSurfaceColorMod(SDL_Surface * surface,
                                                   Uint8 * r, Uint8 * g,
                                                   Uint8 * b);
# 548 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_SetSurfaceAlphaMod(SDL_Surface * surface,
                                                   Uint8 alpha);
# 564 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_GetSurfaceAlphaMod(SDL_Surface * surface,
                                                   Uint8 * alpha);
# 583 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_SetSurfaceBlendMode(SDL_Surface * surface,
                                                    SDL_BlendMode blendMode);
# 598 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_GetSurfaceBlendMode(SDL_Surface * surface,
                                                    SDL_BlendMode *blendMode);
# 621 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_SetClipRect(SDL_Surface * surface,
                                                 const SDL_Rect * rect);
# 640 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) void SDL_GetClipRect(SDL_Surface * surface,
                                             SDL_Rect * rect);
# 652 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_DuplicateSurface(SDL_Surface * surface);
# 676 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_ConvertSurface
    (SDL_Surface * src, const SDL_PixelFormat * fmt, Uint32 flags);
# 701 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_ConvertSurfaceFormat
    (SDL_Surface * src, Uint32 pixel_format, Uint32 flags);
# 720 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_ConvertPixels(int width, int height,
                                              Uint32 src_format,
                                              const void * src, int src_pitch,
                                              Uint32 dst_format,
                                              void * dst, int dst_pitch);
# 746 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_PremultiplyAlpha(int width, int height,
                                                 Uint32 src_format,
                                                 const void * src, int src_pitch,
                                                 Uint32 dst_format,
                                                 void * dst, int dst_pitch);
# 775 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_FillRect
    (SDL_Surface * dst, const SDL_Rect * rect, Uint32 color);
# 801 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_FillRects
    (SDL_Surface * dst, const SDL_Rect * rects, int count, Uint32 color);
# 876 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_UpperBlit
    (SDL_Surface * src, const SDL_Rect * srcrect,
     SDL_Surface * dst, SDL_Rect * dstrect);
# 902 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_LowerBlit
    (SDL_Surface * src, SDL_Rect * srcrect,
     SDL_Surface * dst, SDL_Rect * dstrect);
# 915 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_SoftStretch(SDL_Surface * src,
                                            const SDL_Rect * srcrect,
                                            SDL_Surface * dst,
                                            const SDL_Rect * dstrect);






extern __attribute__ ((visibility("default"))) int SDL_SoftStretchLinear(SDL_Surface * src,
                                            const SDL_Rect * srcrect,
                                            SDL_Surface * dst,
                                            const SDL_Rect * dstrect);
# 941 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_UpperBlitScaled
    (SDL_Surface * src, const SDL_Rect * srcrect,
    SDL_Surface * dst, SDL_Rect * dstrect);
# 967 "/opt/homebrew/include/SDL2/SDL_surface.h"
extern __attribute__ ((visibility("default"))) int SDL_LowerBlitScaled
    (SDL_Surface * src, SDL_Rect * srcrect,
    SDL_Surface * dst, SDL_Rect * dstrect);






extern __attribute__ ((visibility("default"))) void SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);






extern __attribute__ ((visibility("default"))) SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode(void);







extern __attribute__ ((visibility("default"))) SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 998 "/opt/homebrew/include/SDL2/SDL_surface.h" 2
# 35 "/opt/homebrew/include/SDL2/SDL_video.h" 2

# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 37 "/opt/homebrew/include/SDL2/SDL_video.h" 2
# 53 "/opt/homebrew/include/SDL2/SDL_video.h"
typedef struct SDL_DisplayMode
{
    Uint32 format;
    int w;
    int h;
    int refresh_rate;
    void *driverdata;
} SDL_DisplayMode;
# 95 "/opt/homebrew/include/SDL2/SDL_video.h"
typedef struct SDL_Window SDL_Window;






typedef enum SDL_WindowFlags
{
    SDL_WINDOW_FULLSCREEN = 0x00000001,
    SDL_WINDOW_OPENGL = 0x00000002,
    SDL_WINDOW_SHOWN = 0x00000004,
    SDL_WINDOW_HIDDEN = 0x00000008,
    SDL_WINDOW_BORDERLESS = 0x00000010,
    SDL_WINDOW_RESIZABLE = 0x00000020,
    SDL_WINDOW_MINIMIZED = 0x00000040,
    SDL_WINDOW_MAXIMIZED = 0x00000080,
    SDL_WINDOW_MOUSE_GRABBED = 0x00000100,
    SDL_WINDOW_INPUT_FOCUS = 0x00000200,
    SDL_WINDOW_MOUSE_FOCUS = 0x00000400,
    SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN | 0x00001000 ),
    SDL_WINDOW_FOREIGN = 0x00000800,
    SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000,


    SDL_WINDOW_MOUSE_CAPTURE = 0x00004000,
    SDL_WINDOW_ALWAYS_ON_TOP = 0x00008000,
    SDL_WINDOW_SKIP_TASKBAR = 0x00010000,
    SDL_WINDOW_UTILITY = 0x00020000,
    SDL_WINDOW_TOOLTIP = 0x00040000,
    SDL_WINDOW_POPUP_MENU = 0x00080000,
    SDL_WINDOW_KEYBOARD_GRABBED = 0x00100000,
    SDL_WINDOW_VULKAN = 0x10000000,
    SDL_WINDOW_METAL = 0x20000000,

    SDL_WINDOW_INPUT_GRABBED = SDL_WINDOW_MOUSE_GRABBED
} SDL_WindowFlags;
# 154 "/opt/homebrew/include/SDL2/SDL_video.h"
typedef enum SDL_WindowEventID
{
    SDL_WINDOWEVENT_NONE,
    SDL_WINDOWEVENT_SHOWN,
    SDL_WINDOWEVENT_HIDDEN,
    SDL_WINDOWEVENT_EXPOSED,

    SDL_WINDOWEVENT_MOVED,

    SDL_WINDOWEVENT_RESIZED,
    SDL_WINDOWEVENT_SIZE_CHANGED,


    SDL_WINDOWEVENT_MINIMIZED,
    SDL_WINDOWEVENT_MAXIMIZED,
    SDL_WINDOWEVENT_RESTORED,

    SDL_WINDOWEVENT_ENTER,
    SDL_WINDOWEVENT_LEAVE,
    SDL_WINDOWEVENT_FOCUS_GAINED,
    SDL_WINDOWEVENT_FOCUS_LOST,
    SDL_WINDOWEVENT_CLOSE,
    SDL_WINDOWEVENT_TAKE_FOCUS,
    SDL_WINDOWEVENT_HIT_TEST,
    SDL_WINDOWEVENT_ICCPROF_CHANGED,
    SDL_WINDOWEVENT_DISPLAY_CHANGED
} SDL_WindowEventID;




typedef enum SDL_DisplayEventID
{
    SDL_DISPLAYEVENT_NONE,
    SDL_DISPLAYEVENT_ORIENTATION,
    SDL_DISPLAYEVENT_CONNECTED,
    SDL_DISPLAYEVENT_DISCONNECTED,
    SDL_DISPLAYEVENT_MOVED
} SDL_DisplayEventID;




typedef enum SDL_DisplayOrientation
{
    SDL_ORIENTATION_UNKNOWN,
    SDL_ORIENTATION_LANDSCAPE,
    SDL_ORIENTATION_LANDSCAPE_FLIPPED,
    SDL_ORIENTATION_PORTRAIT,
    SDL_ORIENTATION_PORTRAIT_FLIPPED
} SDL_DisplayOrientation;




typedef enum SDL_FlashOperation
{
    SDL_FLASH_CANCEL,
    SDL_FLASH_BRIEFLY,
    SDL_FLASH_UNTIL_FOCUSED
} SDL_FlashOperation;






typedef void *SDL_GLContext;
# 256 "/opt/homebrew/include/SDL2/SDL_video.h"
typedef enum SDL_GLattr
{
    SDL_GL_RED_SIZE,
    SDL_GL_GREEN_SIZE,
    SDL_GL_BLUE_SIZE,
    SDL_GL_ALPHA_SIZE,
    SDL_GL_BUFFER_SIZE,
    SDL_GL_DOUBLEBUFFER,
    SDL_GL_DEPTH_SIZE,
    SDL_GL_STENCIL_SIZE,
    SDL_GL_ACCUM_RED_SIZE,
    SDL_GL_ACCUM_GREEN_SIZE,
    SDL_GL_ACCUM_BLUE_SIZE,
    SDL_GL_ACCUM_ALPHA_SIZE,
    SDL_GL_STEREO,
    SDL_GL_MULTISAMPLEBUFFERS,
    SDL_GL_MULTISAMPLESAMPLES,
    SDL_GL_ACCELERATED_VISUAL,
    SDL_GL_RETAINED_BACKING,
    SDL_GL_CONTEXT_MAJOR_VERSION,
    SDL_GL_CONTEXT_MINOR_VERSION,
    SDL_GL_CONTEXT_EGL,
    SDL_GL_CONTEXT_FLAGS,
    SDL_GL_CONTEXT_PROFILE_MASK,
    SDL_GL_SHARE_WITH_CURRENT_CONTEXT,
    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR,
    SDL_GL_CONTEXT_RESET_NOTIFICATION,
    SDL_GL_CONTEXT_NO_ERROR,
    SDL_GL_FLOATBUFFERS
} SDL_GLattr;

typedef enum SDL_GLprofile
{
    SDL_GL_CONTEXT_PROFILE_CORE = 0x0001,
    SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002,
    SDL_GL_CONTEXT_PROFILE_ES = 0x0004
} SDL_GLprofile;

typedef enum SDL_GLcontextFlag
{
    SDL_GL_CONTEXT_DEBUG_FLAG = 0x0001,
    SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002,
    SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0x0004,
    SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0x0008
} SDL_GLcontextFlag;

typedef enum SDL_GLcontextReleaseFlag
{
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0x0000,
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x0001
} SDL_GLcontextReleaseFlag;

typedef enum SDL_GLContextResetNotification
{
    SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0x0000,
    SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0x0001
} SDL_GLContextResetNotification;
# 327 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetNumVideoDrivers(void);
# 342 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetVideoDriver(int index);
# 373 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_VideoInit(const char *driver_name);
# 384 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_VideoQuit(void);
# 397 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetCurrentVideoDriver(void);
# 409 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetNumVideoDisplays(void);
# 423 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetDisplayName(int displayIndex);
# 439 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetDisplayBounds(int displayIndex, SDL_Rect * rect);
# 470 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect * rect);
# 505 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetDisplayDPI(int displayIndex, float * ddpi, float * hdpi, float * vdpi);
# 518 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex);
# 535 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetNumDisplayModes(int displayIndex);
# 559 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetDisplayMode(int displayIndex, int modeIndex,
                                               SDL_DisplayMode * mode);
# 582 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode * mode);
# 605 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode * mode);
# 631 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_DisplayMode * SDL_GetClosestDisplayMode(int displayIndex, const SDL_DisplayMode * mode, SDL_DisplayMode * closest);
# 645 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetPointDisplayIndex(const SDL_Point * point);
# 660 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetRectDisplayIndex(const SDL_Rect * rect);
# 675 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetWindowDisplayIndex(SDL_Window * window);
# 696 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowDisplayMode(SDL_Window * window,
                                                     const SDL_DisplayMode * mode);
# 713 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetWindowDisplayMode(SDL_Window * window,
                                                     SDL_DisplayMode * mode);
# 728 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void* SDL_GetWindowICCProfile(SDL_Window * window, size_t* size);
# 740 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_GetWindowPixelFormat(SDL_Window * window);
# 813 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_Window * SDL_CreateWindow(const char *title,
                                                      int x, int y, int w,
                                                      int h, Uint32 flags);
# 834 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_Window * SDL_CreateWindowFrom(const void *data);
# 850 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_GetWindowID(SDL_Window * window);
# 866 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_Window * SDL_GetWindowFromID(Uint32 id);
# 884 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_GetWindowFlags(SDL_Window * window);
# 898 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowTitle(SDL_Window * window,
                                                const char *title);
# 912 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetWindowTitle(SDL_Window * window);
# 922 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowIcon(SDL_Window * window,
                                               SDL_Surface * icon);
# 939 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void* SDL_SetWindowData(SDL_Window * window,
                                                const char *name,
                                                void *userdata);
# 954 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void * SDL_GetWindowData(SDL_Window * window,
                                                const char *name);
# 972 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowPosition(SDL_Window * window,
                                                   int x, int y);
# 991 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GetWindowPosition(SDL_Window * window,
                                                   int *x, int *y);
# 1016 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowSize(SDL_Window * window, int w,
                                               int h);
# 1043 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GetWindowSize(SDL_Window * window, int *w,
                                               int *h);
# 1078 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetWindowBordersSize(SDL_Window * window,
                                                     int *top, int *left,
                                                     int *bottom, int *right);
# 1101 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GetWindowSizeInPixels(SDL_Window * window,
                                                       int *w, int *h);
# 1116 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowMinimumSize(SDL_Window * window,
                                                      int min_w, int min_h);
# 1133 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GetWindowMinimumSize(SDL_Window * window,
                                                      int *w, int *h);
# 1148 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowMaximumSize(SDL_Window * window,
                                                      int max_w, int max_h);
# 1165 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GetWindowMaximumSize(SDL_Window * window,
                                                      int *w, int *h);
# 1184 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowBordered(SDL_Window * window,
                                                   SDL_bool bordered);
# 1203 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowResizable(SDL_Window * window,
                                                    SDL_bool resizable);
# 1220 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowAlwaysOnTop(SDL_Window * window,
                                                      SDL_bool on_top);
# 1233 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_ShowWindow(SDL_Window * window);
# 1244 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_HideWindow(SDL_Window * window);
# 1253 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_RaiseWindow(SDL_Window * window);
# 1265 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_MaximizeWindow(SDL_Window * window);
# 1277 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_MinimizeWindow(SDL_Window * window);
# 1289 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_RestoreWindow(SDL_Window * window);
# 1312 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowFullscreen(SDL_Window * window,
                                                    Uint32 flags);
# 1325 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasWindowSurface(SDL_Window *window);
# 1356 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_Surface * SDL_GetWindowSurface(SDL_Window * window);
# 1375 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_UpdateWindowSurface(SDL_Window * window);
# 1402 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_UpdateWindowSurfaceRects(SDL_Window * window,
                                                         const SDL_Rect * rects,
                                                         int numrects);
# 1418 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_DestroyWindowSurface(SDL_Window *window);
# 1438 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowGrab(SDL_Window * window,
                                               SDL_bool grabbed);
# 1469 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowKeyboardGrab(SDL_Window * window,
                                                       SDL_bool grabbed);
# 1486 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_SetWindowMouseGrab(SDL_Window * window,
                                                    SDL_bool grabbed);
# 1499 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GetWindowGrab(SDL_Window * window);
# 1512 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GetWindowKeyboardGrab(SDL_Window * window);
# 1525 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GetWindowMouseGrab(SDL_Window * window);
# 1537 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_Window * SDL_GetGrabbedWindow(void);
# 1556 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowMouseRect(SDL_Window * window, const SDL_Rect * rect);
# 1569 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) const SDL_Rect * SDL_GetWindowMouseRect(SDL_Window * window);
# 1597 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowBrightness(SDL_Window * window, float brightness);
# 1616 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) float SDL_GetWindowBrightness(SDL_Window * window);
# 1635 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowOpacity(SDL_Window * window, float opacity);
# 1656 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetWindowOpacity(SDL_Window * window, float * out_opacity);
# 1668 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowModalFor(SDL_Window * modal_window, SDL_Window * parent_window);
# 1685 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowInputFocus(SDL_Window * window);
# 1717 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowGammaRamp(SDL_Window * window,
                                                   const Uint16 * red,
                                                   const Uint16 * green,
                                                   const Uint16 * blue);
# 1745 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GetWindowGammaRamp(SDL_Window * window,
                                                   Uint16 * red,
                                                   Uint16 * green,
                                                   Uint16 * blue);






typedef enum SDL_HitTestResult
{
    SDL_HITTEST_NORMAL,
    SDL_HITTEST_DRAGGABLE,
    SDL_HITTEST_RESIZE_TOPLEFT,
    SDL_HITTEST_RESIZE_TOP,
    SDL_HITTEST_RESIZE_TOPRIGHT,
    SDL_HITTEST_RESIZE_RIGHT,
    SDL_HITTEST_RESIZE_BOTTOMRIGHT,
    SDL_HITTEST_RESIZE_BOTTOM,
    SDL_HITTEST_RESIZE_BOTTOMLEFT,
    SDL_HITTEST_RESIZE_LEFT
} SDL_HitTestResult;
# 1779 "/opt/homebrew/include/SDL2/SDL_video.h"
typedef SDL_HitTestResult ( *SDL_HitTest)(SDL_Window *win,
                                                 const SDL_Point *area,
                                                 void *data);
# 1823 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowHitTest(SDL_Window * window,
                                                 SDL_HitTest callback,
                                                 void *callback_data);
# 1837 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_FlashWindow(SDL_Window * window, SDL_FlashOperation operation);
# 1852 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_DestroyWindow(SDL_Window * window);
# 1871 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IsScreenSaverEnabled(void);
# 1881 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_EnableScreenSaver(void);
# 1897 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_DisableScreenSaver(void);
# 1925 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GL_LoadLibrary(const char *path);
# 1978 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void * SDL_GL_GetProcAddress(const char *proc);
# 1987 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GL_UnloadLibrary(void);
# 2008 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GL_ExtensionSupported(const char
                                                           *extension);
# 2019 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GL_ResetAttributes(void);
# 2040 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GL_SetAttribute(SDL_GLattr attr, int value);
# 2056 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GL_GetAttribute(SDL_GLattr attr, int *value);
# 2078 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_GLContext SDL_GL_CreateContext(SDL_Window *
                                                           window);
# 2095 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GL_MakeCurrent(SDL_Window * window,
                                               SDL_GLContext context);
# 2106 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_Window* SDL_GL_GetCurrentWindow(void);
# 2118 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) SDL_GLContext SDL_GL_GetCurrentContext(void);
# 2141 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GL_GetDrawableSize(SDL_Window * window, int *w,
                                                    int *h);
# 2171 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GL_SetSwapInterval(int interval);
# 2188 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) int SDL_GL_GetSwapInterval(void);
# 2204 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GL_SwapWindow(SDL_Window * window);
# 2215 "/opt/homebrew/include/SDL2/SDL_video.h"
extern __attribute__ ((visibility("default"))) void SDL_GL_DeleteContext(SDL_GLContext context);
# 2224 "/opt/homebrew/include/SDL2/SDL_video.h"
# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 2225 "/opt/homebrew/include/SDL2/SDL_video.h" 2
# 34 "/opt/homebrew/include/SDL2/SDL_events.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_keyboard.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
# 1 "/opt/homebrew/include/SDL2/SDL_keycode.h" 1
# 32 "/opt/homebrew/include/SDL2/SDL_keycode.h"
# 1 "/opt/homebrew/include/SDL2/SDL_scancode.h" 1
# 43 "/opt/homebrew/include/SDL2/SDL_scancode.h"
typedef enum SDL_Scancode
{
    SDL_SCANCODE_UNKNOWN = 0,
# 54 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_A = 4,
    SDL_SCANCODE_B = 5,
    SDL_SCANCODE_C = 6,
    SDL_SCANCODE_D = 7,
    SDL_SCANCODE_E = 8,
    SDL_SCANCODE_F = 9,
    SDL_SCANCODE_G = 10,
    SDL_SCANCODE_H = 11,
    SDL_SCANCODE_I = 12,
    SDL_SCANCODE_J = 13,
    SDL_SCANCODE_K = 14,
    SDL_SCANCODE_L = 15,
    SDL_SCANCODE_M = 16,
    SDL_SCANCODE_N = 17,
    SDL_SCANCODE_O = 18,
    SDL_SCANCODE_P = 19,
    SDL_SCANCODE_Q = 20,
    SDL_SCANCODE_R = 21,
    SDL_SCANCODE_S = 22,
    SDL_SCANCODE_T = 23,
    SDL_SCANCODE_U = 24,
    SDL_SCANCODE_V = 25,
    SDL_SCANCODE_W = 26,
    SDL_SCANCODE_X = 27,
    SDL_SCANCODE_Y = 28,
    SDL_SCANCODE_Z = 29,

    SDL_SCANCODE_1 = 30,
    SDL_SCANCODE_2 = 31,
    SDL_SCANCODE_3 = 32,
    SDL_SCANCODE_4 = 33,
    SDL_SCANCODE_5 = 34,
    SDL_SCANCODE_6 = 35,
    SDL_SCANCODE_7 = 36,
    SDL_SCANCODE_8 = 37,
    SDL_SCANCODE_9 = 38,
    SDL_SCANCODE_0 = 39,

    SDL_SCANCODE_RETURN = 40,
    SDL_SCANCODE_ESCAPE = 41,
    SDL_SCANCODE_BACKSPACE = 42,
    SDL_SCANCODE_TAB = 43,
    SDL_SCANCODE_SPACE = 44,

    SDL_SCANCODE_MINUS = 45,
    SDL_SCANCODE_EQUALS = 46,
    SDL_SCANCODE_LEFTBRACKET = 47,
    SDL_SCANCODE_RIGHTBRACKET = 48,
    SDL_SCANCODE_BACKSLASH = 49,
# 116 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_NONUSHASH = 50,
# 128 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_SEMICOLON = 51,
    SDL_SCANCODE_APOSTROPHE = 52,
    SDL_SCANCODE_GRAVE = 53,
# 147 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_COMMA = 54,
    SDL_SCANCODE_PERIOD = 55,
    SDL_SCANCODE_SLASH = 56,

    SDL_SCANCODE_CAPSLOCK = 57,

    SDL_SCANCODE_F1 = 58,
    SDL_SCANCODE_F2 = 59,
    SDL_SCANCODE_F3 = 60,
    SDL_SCANCODE_F4 = 61,
    SDL_SCANCODE_F5 = 62,
    SDL_SCANCODE_F6 = 63,
    SDL_SCANCODE_F7 = 64,
    SDL_SCANCODE_F8 = 65,
    SDL_SCANCODE_F9 = 66,
    SDL_SCANCODE_F10 = 67,
    SDL_SCANCODE_F11 = 68,
    SDL_SCANCODE_F12 = 69,

    SDL_SCANCODE_PRINTSCREEN = 70,
    SDL_SCANCODE_SCROLLLOCK = 71,
    SDL_SCANCODE_PAUSE = 72,
    SDL_SCANCODE_INSERT = 73,

    SDL_SCANCODE_HOME = 74,
    SDL_SCANCODE_PAGEUP = 75,
    SDL_SCANCODE_DELETE = 76,
    SDL_SCANCODE_END = 77,
    SDL_SCANCODE_PAGEDOWN = 78,
    SDL_SCANCODE_RIGHT = 79,
    SDL_SCANCODE_LEFT = 80,
    SDL_SCANCODE_DOWN = 81,
    SDL_SCANCODE_UP = 82,

    SDL_SCANCODE_NUMLOCKCLEAR = 83,

    SDL_SCANCODE_KP_DIVIDE = 84,
    SDL_SCANCODE_KP_MULTIPLY = 85,
    SDL_SCANCODE_KP_MINUS = 86,
    SDL_SCANCODE_KP_PLUS = 87,
    SDL_SCANCODE_KP_ENTER = 88,
    SDL_SCANCODE_KP_1 = 89,
    SDL_SCANCODE_KP_2 = 90,
    SDL_SCANCODE_KP_3 = 91,
    SDL_SCANCODE_KP_4 = 92,
    SDL_SCANCODE_KP_5 = 93,
    SDL_SCANCODE_KP_6 = 94,
    SDL_SCANCODE_KP_7 = 95,
    SDL_SCANCODE_KP_8 = 96,
    SDL_SCANCODE_KP_9 = 97,
    SDL_SCANCODE_KP_0 = 98,
    SDL_SCANCODE_KP_PERIOD = 99,

    SDL_SCANCODE_NONUSBACKSLASH = 100,
# 210 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_APPLICATION = 101,
    SDL_SCANCODE_POWER = 102,


    SDL_SCANCODE_KP_EQUALS = 103,
    SDL_SCANCODE_F13 = 104,
    SDL_SCANCODE_F14 = 105,
    SDL_SCANCODE_F15 = 106,
    SDL_SCANCODE_F16 = 107,
    SDL_SCANCODE_F17 = 108,
    SDL_SCANCODE_F18 = 109,
    SDL_SCANCODE_F19 = 110,
    SDL_SCANCODE_F20 = 111,
    SDL_SCANCODE_F21 = 112,
    SDL_SCANCODE_F22 = 113,
    SDL_SCANCODE_F23 = 114,
    SDL_SCANCODE_F24 = 115,
    SDL_SCANCODE_EXECUTE = 116,
    SDL_SCANCODE_HELP = 117,
    SDL_SCANCODE_MENU = 118,
    SDL_SCANCODE_SELECT = 119,
    SDL_SCANCODE_STOP = 120,
    SDL_SCANCODE_AGAIN = 121,
    SDL_SCANCODE_UNDO = 122,
    SDL_SCANCODE_CUT = 123,
    SDL_SCANCODE_COPY = 124,
    SDL_SCANCODE_PASTE = 125,
    SDL_SCANCODE_FIND = 126,
    SDL_SCANCODE_MUTE = 127,
    SDL_SCANCODE_VOLUMEUP = 128,
    SDL_SCANCODE_VOLUMEDOWN = 129,




    SDL_SCANCODE_KP_COMMA = 133,
    SDL_SCANCODE_KP_EQUALSAS400 = 134,

    SDL_SCANCODE_INTERNATIONAL1 = 135,

    SDL_SCANCODE_INTERNATIONAL2 = 136,
    SDL_SCANCODE_INTERNATIONAL3 = 137,
    SDL_SCANCODE_INTERNATIONAL4 = 138,
    SDL_SCANCODE_INTERNATIONAL5 = 139,
    SDL_SCANCODE_INTERNATIONAL6 = 140,
    SDL_SCANCODE_INTERNATIONAL7 = 141,
    SDL_SCANCODE_INTERNATIONAL8 = 142,
    SDL_SCANCODE_INTERNATIONAL9 = 143,
    SDL_SCANCODE_LANG1 = 144,
    SDL_SCANCODE_LANG2 = 145,
    SDL_SCANCODE_LANG3 = 146,
    SDL_SCANCODE_LANG4 = 147,
    SDL_SCANCODE_LANG5 = 148,
    SDL_SCANCODE_LANG6 = 149,
    SDL_SCANCODE_LANG7 = 150,
    SDL_SCANCODE_LANG8 = 151,
    SDL_SCANCODE_LANG9 = 152,

    SDL_SCANCODE_ALTERASE = 153,
    SDL_SCANCODE_SYSREQ = 154,
    SDL_SCANCODE_CANCEL = 155,
    SDL_SCANCODE_CLEAR = 156,
    SDL_SCANCODE_PRIOR = 157,
    SDL_SCANCODE_RETURN2 = 158,
    SDL_SCANCODE_SEPARATOR = 159,
    SDL_SCANCODE_OUT = 160,
    SDL_SCANCODE_OPER = 161,
    SDL_SCANCODE_CLEARAGAIN = 162,
    SDL_SCANCODE_CRSEL = 163,
    SDL_SCANCODE_EXSEL = 164,

    SDL_SCANCODE_KP_00 = 176,
    SDL_SCANCODE_KP_000 = 177,
    SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
    SDL_SCANCODE_DECIMALSEPARATOR = 179,
    SDL_SCANCODE_CURRENCYUNIT = 180,
    SDL_SCANCODE_CURRENCYSUBUNIT = 181,
    SDL_SCANCODE_KP_LEFTPAREN = 182,
    SDL_SCANCODE_KP_RIGHTPAREN = 183,
    SDL_SCANCODE_KP_LEFTBRACE = 184,
    SDL_SCANCODE_KP_RIGHTBRACE = 185,
    SDL_SCANCODE_KP_TAB = 186,
    SDL_SCANCODE_KP_BACKSPACE = 187,
    SDL_SCANCODE_KP_A = 188,
    SDL_SCANCODE_KP_B = 189,
    SDL_SCANCODE_KP_C = 190,
    SDL_SCANCODE_KP_D = 191,
    SDL_SCANCODE_KP_E = 192,
    SDL_SCANCODE_KP_F = 193,
    SDL_SCANCODE_KP_XOR = 194,
    SDL_SCANCODE_KP_POWER = 195,
    SDL_SCANCODE_KP_PERCENT = 196,
    SDL_SCANCODE_KP_LESS = 197,
    SDL_SCANCODE_KP_GREATER = 198,
    SDL_SCANCODE_KP_AMPERSAND = 199,
    SDL_SCANCODE_KP_DBLAMPERSAND = 200,
    SDL_SCANCODE_KP_VERTICALBAR = 201,
    SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
    SDL_SCANCODE_KP_COLON = 203,
    SDL_SCANCODE_KP_HASH = 204,
    SDL_SCANCODE_KP_SPACE = 205,
    SDL_SCANCODE_KP_AT = 206,
    SDL_SCANCODE_KP_EXCLAM = 207,
    SDL_SCANCODE_KP_MEMSTORE = 208,
    SDL_SCANCODE_KP_MEMRECALL = 209,
    SDL_SCANCODE_KP_MEMCLEAR = 210,
    SDL_SCANCODE_KP_MEMADD = 211,
    SDL_SCANCODE_KP_MEMSUBTRACT = 212,
    SDL_SCANCODE_KP_MEMMULTIPLY = 213,
    SDL_SCANCODE_KP_MEMDIVIDE = 214,
    SDL_SCANCODE_KP_PLUSMINUS = 215,
    SDL_SCANCODE_KP_CLEAR = 216,
    SDL_SCANCODE_KP_CLEARENTRY = 217,
    SDL_SCANCODE_KP_BINARY = 218,
    SDL_SCANCODE_KP_OCTAL = 219,
    SDL_SCANCODE_KP_DECIMAL = 220,
    SDL_SCANCODE_KP_HEXADECIMAL = 221,

    SDL_SCANCODE_LCTRL = 224,
    SDL_SCANCODE_LSHIFT = 225,
    SDL_SCANCODE_LALT = 226,
    SDL_SCANCODE_LGUI = 227,
    SDL_SCANCODE_RCTRL = 228,
    SDL_SCANCODE_RSHIFT = 229,
    SDL_SCANCODE_RALT = 230,
    SDL_SCANCODE_RGUI = 231,

    SDL_SCANCODE_MODE = 257,
# 356 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_AUDIONEXT = 258,
    SDL_SCANCODE_AUDIOPREV = 259,
    SDL_SCANCODE_AUDIOSTOP = 260,
    SDL_SCANCODE_AUDIOPLAY = 261,
    SDL_SCANCODE_AUDIOMUTE = 262,
    SDL_SCANCODE_MEDIASELECT = 263,
    SDL_SCANCODE_WWW = 264,
    SDL_SCANCODE_MAIL = 265,
    SDL_SCANCODE_CALCULATOR = 266,
    SDL_SCANCODE_COMPUTER = 267,
    SDL_SCANCODE_AC_SEARCH = 268,
    SDL_SCANCODE_AC_HOME = 269,
    SDL_SCANCODE_AC_BACK = 270,
    SDL_SCANCODE_AC_FORWARD = 271,
    SDL_SCANCODE_AC_STOP = 272,
    SDL_SCANCODE_AC_REFRESH = 273,
    SDL_SCANCODE_AC_BOOKMARKS = 274,
# 383 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_BRIGHTNESSDOWN = 275,
    SDL_SCANCODE_BRIGHTNESSUP = 276,
    SDL_SCANCODE_DISPLAYSWITCH = 277,

    SDL_SCANCODE_KBDILLUMTOGGLE = 278,
    SDL_SCANCODE_KBDILLUMDOWN = 279,
    SDL_SCANCODE_KBDILLUMUP = 280,
    SDL_SCANCODE_EJECT = 281,
    SDL_SCANCODE_SLEEP = 282,

    SDL_SCANCODE_APP1 = 283,
    SDL_SCANCODE_APP2 = 284,
# 405 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_AUDIOREWIND = 285,
    SDL_SCANCODE_AUDIOFASTFORWARD = 286,
# 417 "/opt/homebrew/include/SDL2/SDL_scancode.h"
    SDL_SCANCODE_SOFTLEFT = 287,



    SDL_SCANCODE_SOFTRIGHT = 288,



    SDL_SCANCODE_CALL = 289,
    SDL_SCANCODE_ENDCALL = 290,





    SDL_NUM_SCANCODES = 512

} SDL_Scancode;
# 33 "/opt/homebrew/include/SDL2/SDL_keycode.h" 2
# 45 "/opt/homebrew/include/SDL2/SDL_keycode.h"
typedef Sint32 SDL_Keycode;




typedef enum SDL_KeyCode
{
    SDLK_UNKNOWN = 0,

    SDLK_RETURN = '\r',
    SDLK_ESCAPE = '\x1B',
    SDLK_BACKSPACE = '\b',
    SDLK_TAB = '\t',
    SDLK_SPACE = ' ',
    SDLK_EXCLAIM = '!',
    SDLK_QUOTEDBL = '"',
    SDLK_HASH = '#',
    SDLK_PERCENT = '%',
    SDLK_DOLLAR = '$',
    SDLK_AMPERSAND = '&',
    SDLK_QUOTE = '\'',
    SDLK_LEFTPAREN = '(',
    SDLK_RIGHTPAREN = ')',
    SDLK_ASTERISK = '*',
    SDLK_PLUS = '+',
    SDLK_COMMA = ',',
    SDLK_MINUS = '-',
    SDLK_PERIOD = '.',
    SDLK_SLASH = '/',
    SDLK_0 = '0',
    SDLK_1 = '1',
    SDLK_2 = '2',
    SDLK_3 = '3',
    SDLK_4 = '4',
    SDLK_5 = '5',
    SDLK_6 = '6',
    SDLK_7 = '7',
    SDLK_8 = '8',
    SDLK_9 = '9',
    SDLK_COLON = ':',
    SDLK_SEMICOLON = ';',
    SDLK_LESS = '<',
    SDLK_EQUALS = '=',
    SDLK_GREATER = '>',
    SDLK_QUESTION = '?',
    SDLK_AT = '@',





    SDLK_LEFTBRACKET = '[',
    SDLK_BACKSLASH = '\\',
    SDLK_RIGHTBRACKET = ']',
    SDLK_CARET = '^',
    SDLK_UNDERSCORE = '_',
    SDLK_BACKQUOTE = '`',
    SDLK_a = 'a',
    SDLK_b = 'b',
    SDLK_c = 'c',
    SDLK_d = 'd',
    SDLK_e = 'e',
    SDLK_f = 'f',
    SDLK_g = 'g',
    SDLK_h = 'h',
    SDLK_i = 'i',
    SDLK_j = 'j',
    SDLK_k = 'k',
    SDLK_l = 'l',
    SDLK_m = 'm',
    SDLK_n = 'n',
    SDLK_o = 'o',
    SDLK_p = 'p',
    SDLK_q = 'q',
    SDLK_r = 'r',
    SDLK_s = 's',
    SDLK_t = 't',
    SDLK_u = 'u',
    SDLK_v = 'v',
    SDLK_w = 'w',
    SDLK_x = 'x',
    SDLK_y = 'y',
    SDLK_z = 'z',

    SDLK_CAPSLOCK = (SDL_SCANCODE_CAPSLOCK | (1<<30)),

    SDLK_F1 = (SDL_SCANCODE_F1 | (1<<30)),
    SDLK_F2 = (SDL_SCANCODE_F2 | (1<<30)),
    SDLK_F3 = (SDL_SCANCODE_F3 | (1<<30)),
    SDLK_F4 = (SDL_SCANCODE_F4 | (1<<30)),
    SDLK_F5 = (SDL_SCANCODE_F5 | (1<<30)),
    SDLK_F6 = (SDL_SCANCODE_F6 | (1<<30)),
    SDLK_F7 = (SDL_SCANCODE_F7 | (1<<30)),
    SDLK_F8 = (SDL_SCANCODE_F8 | (1<<30)),
    SDLK_F9 = (SDL_SCANCODE_F9 | (1<<30)),
    SDLK_F10 = (SDL_SCANCODE_F10 | (1<<30)),
    SDLK_F11 = (SDL_SCANCODE_F11 | (1<<30)),
    SDLK_F12 = (SDL_SCANCODE_F12 | (1<<30)),

    SDLK_PRINTSCREEN = (SDL_SCANCODE_PRINTSCREEN | (1<<30)),
    SDLK_SCROLLLOCK = (SDL_SCANCODE_SCROLLLOCK | (1<<30)),
    SDLK_PAUSE = (SDL_SCANCODE_PAUSE | (1<<30)),
    SDLK_INSERT = (SDL_SCANCODE_INSERT | (1<<30)),
    SDLK_HOME = (SDL_SCANCODE_HOME | (1<<30)),
    SDLK_PAGEUP = (SDL_SCANCODE_PAGEUP | (1<<30)),
    SDLK_DELETE = '\x7F',
    SDLK_END = (SDL_SCANCODE_END | (1<<30)),
    SDLK_PAGEDOWN = (SDL_SCANCODE_PAGEDOWN | (1<<30)),
    SDLK_RIGHT = (SDL_SCANCODE_RIGHT | (1<<30)),
    SDLK_LEFT = (SDL_SCANCODE_LEFT | (1<<30)),
    SDLK_DOWN = (SDL_SCANCODE_DOWN | (1<<30)),
    SDLK_UP = (SDL_SCANCODE_UP | (1<<30)),

    SDLK_NUMLOCKCLEAR = (SDL_SCANCODE_NUMLOCKCLEAR | (1<<30)),
    SDLK_KP_DIVIDE = (SDL_SCANCODE_KP_DIVIDE | (1<<30)),
    SDLK_KP_MULTIPLY = (SDL_SCANCODE_KP_MULTIPLY | (1<<30)),
    SDLK_KP_MINUS = (SDL_SCANCODE_KP_MINUS | (1<<30)),
    SDLK_KP_PLUS = (SDL_SCANCODE_KP_PLUS | (1<<30)),
    SDLK_KP_ENTER = (SDL_SCANCODE_KP_ENTER | (1<<30)),
    SDLK_KP_1 = (SDL_SCANCODE_KP_1 | (1<<30)),
    SDLK_KP_2 = (SDL_SCANCODE_KP_2 | (1<<30)),
    SDLK_KP_3 = (SDL_SCANCODE_KP_3 | (1<<30)),
    SDLK_KP_4 = (SDL_SCANCODE_KP_4 | (1<<30)),
    SDLK_KP_5 = (SDL_SCANCODE_KP_5 | (1<<30)),
    SDLK_KP_6 = (SDL_SCANCODE_KP_6 | (1<<30)),
    SDLK_KP_7 = (SDL_SCANCODE_KP_7 | (1<<30)),
    SDLK_KP_8 = (SDL_SCANCODE_KP_8 | (1<<30)),
    SDLK_KP_9 = (SDL_SCANCODE_KP_9 | (1<<30)),
    SDLK_KP_0 = (SDL_SCANCODE_KP_0 | (1<<30)),
    SDLK_KP_PERIOD = (SDL_SCANCODE_KP_PERIOD | (1<<30)),

    SDLK_APPLICATION = (SDL_SCANCODE_APPLICATION | (1<<30)),
    SDLK_POWER = (SDL_SCANCODE_POWER | (1<<30)),
    SDLK_KP_EQUALS = (SDL_SCANCODE_KP_EQUALS | (1<<30)),
    SDLK_F13 = (SDL_SCANCODE_F13 | (1<<30)),
    SDLK_F14 = (SDL_SCANCODE_F14 | (1<<30)),
    SDLK_F15 = (SDL_SCANCODE_F15 | (1<<30)),
    SDLK_F16 = (SDL_SCANCODE_F16 | (1<<30)),
    SDLK_F17 = (SDL_SCANCODE_F17 | (1<<30)),
    SDLK_F18 = (SDL_SCANCODE_F18 | (1<<30)),
    SDLK_F19 = (SDL_SCANCODE_F19 | (1<<30)),
    SDLK_F20 = (SDL_SCANCODE_F20 | (1<<30)),
    SDLK_F21 = (SDL_SCANCODE_F21 | (1<<30)),
    SDLK_F22 = (SDL_SCANCODE_F22 | (1<<30)),
    SDLK_F23 = (SDL_SCANCODE_F23 | (1<<30)),
    SDLK_F24 = (SDL_SCANCODE_F24 | (1<<30)),
    SDLK_EXECUTE = (SDL_SCANCODE_EXECUTE | (1<<30)),
    SDLK_HELP = (SDL_SCANCODE_HELP | (1<<30)),
    SDLK_MENU = (SDL_SCANCODE_MENU | (1<<30)),
    SDLK_SELECT = (SDL_SCANCODE_SELECT | (1<<30)),
    SDLK_STOP = (SDL_SCANCODE_STOP | (1<<30)),
    SDLK_AGAIN = (SDL_SCANCODE_AGAIN | (1<<30)),
    SDLK_UNDO = (SDL_SCANCODE_UNDO | (1<<30)),
    SDLK_CUT = (SDL_SCANCODE_CUT | (1<<30)),
    SDLK_COPY = (SDL_SCANCODE_COPY | (1<<30)),
    SDLK_PASTE = (SDL_SCANCODE_PASTE | (1<<30)),
    SDLK_FIND = (SDL_SCANCODE_FIND | (1<<30)),
    SDLK_MUTE = (SDL_SCANCODE_MUTE | (1<<30)),
    SDLK_VOLUMEUP = (SDL_SCANCODE_VOLUMEUP | (1<<30)),
    SDLK_VOLUMEDOWN = (SDL_SCANCODE_VOLUMEDOWN | (1<<30)),
    SDLK_KP_COMMA = (SDL_SCANCODE_KP_COMMA | (1<<30)),
    SDLK_KP_EQUALSAS400 =
        (SDL_SCANCODE_KP_EQUALSAS400 | (1<<30)),

    SDLK_ALTERASE = (SDL_SCANCODE_ALTERASE | (1<<30)),
    SDLK_SYSREQ = (SDL_SCANCODE_SYSREQ | (1<<30)),
    SDLK_CANCEL = (SDL_SCANCODE_CANCEL | (1<<30)),
    SDLK_CLEAR = (SDL_SCANCODE_CLEAR | (1<<30)),
    SDLK_PRIOR = (SDL_SCANCODE_PRIOR | (1<<30)),
    SDLK_RETURN2 = (SDL_SCANCODE_RETURN2 | (1<<30)),
    SDLK_SEPARATOR = (SDL_SCANCODE_SEPARATOR | (1<<30)),
    SDLK_OUT = (SDL_SCANCODE_OUT | (1<<30)),
    SDLK_OPER = (SDL_SCANCODE_OPER | (1<<30)),
    SDLK_CLEARAGAIN = (SDL_SCANCODE_CLEARAGAIN | (1<<30)),
    SDLK_CRSEL = (SDL_SCANCODE_CRSEL | (1<<30)),
    SDLK_EXSEL = (SDL_SCANCODE_EXSEL | (1<<30)),

    SDLK_KP_00 = (SDL_SCANCODE_KP_00 | (1<<30)),
    SDLK_KP_000 = (SDL_SCANCODE_KP_000 | (1<<30)),
    SDLK_THOUSANDSSEPARATOR =
        (SDL_SCANCODE_THOUSANDSSEPARATOR | (1<<30)),
    SDLK_DECIMALSEPARATOR =
        (SDL_SCANCODE_DECIMALSEPARATOR | (1<<30)),
    SDLK_CURRENCYUNIT = (SDL_SCANCODE_CURRENCYUNIT | (1<<30)),
    SDLK_CURRENCYSUBUNIT =
        (SDL_SCANCODE_CURRENCYSUBUNIT | (1<<30)),
    SDLK_KP_LEFTPAREN = (SDL_SCANCODE_KP_LEFTPAREN | (1<<30)),
    SDLK_KP_RIGHTPAREN = (SDL_SCANCODE_KP_RIGHTPAREN | (1<<30)),
    SDLK_KP_LEFTBRACE = (SDL_SCANCODE_KP_LEFTBRACE | (1<<30)),
    SDLK_KP_RIGHTBRACE = (SDL_SCANCODE_KP_RIGHTBRACE | (1<<30)),
    SDLK_KP_TAB = (SDL_SCANCODE_KP_TAB | (1<<30)),
    SDLK_KP_BACKSPACE = (SDL_SCANCODE_KP_BACKSPACE | (1<<30)),
    SDLK_KP_A = (SDL_SCANCODE_KP_A | (1<<30)),
    SDLK_KP_B = (SDL_SCANCODE_KP_B | (1<<30)),
    SDLK_KP_C = (SDL_SCANCODE_KP_C | (1<<30)),
    SDLK_KP_D = (SDL_SCANCODE_KP_D | (1<<30)),
    SDLK_KP_E = (SDL_SCANCODE_KP_E | (1<<30)),
    SDLK_KP_F = (SDL_SCANCODE_KP_F | (1<<30)),
    SDLK_KP_XOR = (SDL_SCANCODE_KP_XOR | (1<<30)),
    SDLK_KP_POWER = (SDL_SCANCODE_KP_POWER | (1<<30)),
    SDLK_KP_PERCENT = (SDL_SCANCODE_KP_PERCENT | (1<<30)),
    SDLK_KP_LESS = (SDL_SCANCODE_KP_LESS | (1<<30)),
    SDLK_KP_GREATER = (SDL_SCANCODE_KP_GREATER | (1<<30)),
    SDLK_KP_AMPERSAND = (SDL_SCANCODE_KP_AMPERSAND | (1<<30)),
    SDLK_KP_DBLAMPERSAND =
        (SDL_SCANCODE_KP_DBLAMPERSAND | (1<<30)),
    SDLK_KP_VERTICALBAR =
        (SDL_SCANCODE_KP_VERTICALBAR | (1<<30)),
    SDLK_KP_DBLVERTICALBAR =
        (SDL_SCANCODE_KP_DBLVERTICALBAR | (1<<30)),
    SDLK_KP_COLON = (SDL_SCANCODE_KP_COLON | (1<<30)),
    SDLK_KP_HASH = (SDL_SCANCODE_KP_HASH | (1<<30)),
    SDLK_KP_SPACE = (SDL_SCANCODE_KP_SPACE | (1<<30)),
    SDLK_KP_AT = (SDL_SCANCODE_KP_AT | (1<<30)),
    SDLK_KP_EXCLAM = (SDL_SCANCODE_KP_EXCLAM | (1<<30)),
    SDLK_KP_MEMSTORE = (SDL_SCANCODE_KP_MEMSTORE | (1<<30)),
    SDLK_KP_MEMRECALL = (SDL_SCANCODE_KP_MEMRECALL | (1<<30)),
    SDLK_KP_MEMCLEAR = (SDL_SCANCODE_KP_MEMCLEAR | (1<<30)),
    SDLK_KP_MEMADD = (SDL_SCANCODE_KP_MEMADD | (1<<30)),
    SDLK_KP_MEMSUBTRACT =
        (SDL_SCANCODE_KP_MEMSUBTRACT | (1<<30)),
    SDLK_KP_MEMMULTIPLY =
        (SDL_SCANCODE_KP_MEMMULTIPLY | (1<<30)),
    SDLK_KP_MEMDIVIDE = (SDL_SCANCODE_KP_MEMDIVIDE | (1<<30)),
    SDLK_KP_PLUSMINUS = (SDL_SCANCODE_KP_PLUSMINUS | (1<<30)),
    SDLK_KP_CLEAR = (SDL_SCANCODE_KP_CLEAR | (1<<30)),
    SDLK_KP_CLEARENTRY = (SDL_SCANCODE_KP_CLEARENTRY | (1<<30)),
    SDLK_KP_BINARY = (SDL_SCANCODE_KP_BINARY | (1<<30)),
    SDLK_KP_OCTAL = (SDL_SCANCODE_KP_OCTAL | (1<<30)),
    SDLK_KP_DECIMAL = (SDL_SCANCODE_KP_DECIMAL | (1<<30)),
    SDLK_KP_HEXADECIMAL =
        (SDL_SCANCODE_KP_HEXADECIMAL | (1<<30)),

    SDLK_LCTRL = (SDL_SCANCODE_LCTRL | (1<<30)),
    SDLK_LSHIFT = (SDL_SCANCODE_LSHIFT | (1<<30)),
    SDLK_LALT = (SDL_SCANCODE_LALT | (1<<30)),
    SDLK_LGUI = (SDL_SCANCODE_LGUI | (1<<30)),
    SDLK_RCTRL = (SDL_SCANCODE_RCTRL | (1<<30)),
    SDLK_RSHIFT = (SDL_SCANCODE_RSHIFT | (1<<30)),
    SDLK_RALT = (SDL_SCANCODE_RALT | (1<<30)),
    SDLK_RGUI = (SDL_SCANCODE_RGUI | (1<<30)),

    SDLK_MODE = (SDL_SCANCODE_MODE | (1<<30)),

    SDLK_AUDIONEXT = (SDL_SCANCODE_AUDIONEXT | (1<<30)),
    SDLK_AUDIOPREV = (SDL_SCANCODE_AUDIOPREV | (1<<30)),
    SDLK_AUDIOSTOP = (SDL_SCANCODE_AUDIOSTOP | (1<<30)),
    SDLK_AUDIOPLAY = (SDL_SCANCODE_AUDIOPLAY | (1<<30)),
    SDLK_AUDIOMUTE = (SDL_SCANCODE_AUDIOMUTE | (1<<30)),
    SDLK_MEDIASELECT = (SDL_SCANCODE_MEDIASELECT | (1<<30)),
    SDLK_WWW = (SDL_SCANCODE_WWW | (1<<30)),
    SDLK_MAIL = (SDL_SCANCODE_MAIL | (1<<30)),
    SDLK_CALCULATOR = (SDL_SCANCODE_CALCULATOR | (1<<30)),
    SDLK_COMPUTER = (SDL_SCANCODE_COMPUTER | (1<<30)),
    SDLK_AC_SEARCH = (SDL_SCANCODE_AC_SEARCH | (1<<30)),
    SDLK_AC_HOME = (SDL_SCANCODE_AC_HOME | (1<<30)),
    SDLK_AC_BACK = (SDL_SCANCODE_AC_BACK | (1<<30)),
    SDLK_AC_FORWARD = (SDL_SCANCODE_AC_FORWARD | (1<<30)),
    SDLK_AC_STOP = (SDL_SCANCODE_AC_STOP | (1<<30)),
    SDLK_AC_REFRESH = (SDL_SCANCODE_AC_REFRESH | (1<<30)),
    SDLK_AC_BOOKMARKS = (SDL_SCANCODE_AC_BOOKMARKS | (1<<30)),

    SDLK_BRIGHTNESSDOWN =
        (SDL_SCANCODE_BRIGHTNESSDOWN | (1<<30)),
    SDLK_BRIGHTNESSUP = (SDL_SCANCODE_BRIGHTNESSUP | (1<<30)),
    SDLK_DISPLAYSWITCH = (SDL_SCANCODE_DISPLAYSWITCH | (1<<30)),
    SDLK_KBDILLUMTOGGLE =
        (SDL_SCANCODE_KBDILLUMTOGGLE | (1<<30)),
    SDLK_KBDILLUMDOWN = (SDL_SCANCODE_KBDILLUMDOWN | (1<<30)),
    SDLK_KBDILLUMUP = (SDL_SCANCODE_KBDILLUMUP | (1<<30)),
    SDLK_EJECT = (SDL_SCANCODE_EJECT | (1<<30)),
    SDLK_SLEEP = (SDL_SCANCODE_SLEEP | (1<<30)),
    SDLK_APP1 = (SDL_SCANCODE_APP1 | (1<<30)),
    SDLK_APP2 = (SDL_SCANCODE_APP2 | (1<<30)),

    SDLK_AUDIOREWIND = (SDL_SCANCODE_AUDIOREWIND | (1<<30)),
    SDLK_AUDIOFASTFORWARD = (SDL_SCANCODE_AUDIOFASTFORWARD | (1<<30)),

    SDLK_SOFTLEFT = (SDL_SCANCODE_SOFTLEFT | (1<<30)),
    SDLK_SOFTRIGHT = (SDL_SCANCODE_SOFTRIGHT | (1<<30)),
    SDLK_CALL = (SDL_SCANCODE_CALL | (1<<30)),
    SDLK_ENDCALL = (SDL_SCANCODE_ENDCALL | (1<<30))
} SDL_KeyCode;




typedef enum SDL_Keymod
{
    KMOD_NONE = 0x0000,
    KMOD_LSHIFT = 0x0001,
    KMOD_RSHIFT = 0x0002,
    KMOD_LCTRL = 0x0040,
    KMOD_RCTRL = 0x0080,
    KMOD_LALT = 0x0100,
    KMOD_RALT = 0x0200,
    KMOD_LGUI = 0x0400,
    KMOD_RGUI = 0x0800,
    KMOD_NUM = 0x1000,
    KMOD_CAPS = 0x2000,
    KMOD_MODE = 0x4000,
    KMOD_SCROLL = 0x8000,

    KMOD_CTRL = KMOD_LCTRL | KMOD_RCTRL,
    KMOD_SHIFT = KMOD_LSHIFT | KMOD_RSHIFT,
    KMOD_ALT = KMOD_LALT | KMOD_RALT,
    KMOD_GUI = KMOD_LGUI | KMOD_RGUI,

    KMOD_RESERVED = KMOD_SCROLL
} SDL_Keymod;
# 34 "/opt/homebrew/include/SDL2/SDL_keyboard.h" 2


# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 37 "/opt/homebrew/include/SDL2/SDL_keyboard.h" 2
# 48 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
typedef struct SDL_Keysym
{
    SDL_Scancode scancode;
    SDL_Keycode sym;
    Uint16 mod;
    Uint32 unused;
} SDL_Keysym;
# 65 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_Window * SDL_GetKeyboardFocus(void);
# 96 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) const Uint8 * SDL_GetKeyboardState(int *numkeys);
# 107 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) void SDL_ResetKeyboard(void);
# 120 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_Keymod SDL_GetModState(void);
# 139 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) void SDL_SetModState(SDL_Keymod modstate);
# 155 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);
# 171 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);
# 196 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetScancodeName(SDL_Scancode scancode);
# 211 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_Scancode SDL_GetScancodeFromName(const char *name);
# 230 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetKeyName(SDL_Keycode key);
# 245 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_Keycode SDL_GetKeyFromName(const char *name);
# 266 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) void SDL_StartTextInput(void);
# 277 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IsTextInputActive(void);
# 286 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) void SDL_StopTextInput(void);
# 296 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) void SDL_ClearComposition(void);






extern __attribute__ ((visibility("default"))) SDL_bool SDL_IsTextInputShown(void);
# 326 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) void SDL_SetTextInputRect(const SDL_Rect *rect);
# 339 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasScreenKeyboardSupport(void);
# 351 "/opt/homebrew/include/SDL2/SDL_keyboard.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IsScreenKeyboardShown(SDL_Window *window);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 358 "/opt/homebrew/include/SDL2/SDL_keyboard.h" 2
# 35 "/opt/homebrew/include/SDL2/SDL_events.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_mouse.h" 1
# 35 "/opt/homebrew/include/SDL2/SDL_mouse.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 36 "/opt/homebrew/include/SDL2/SDL_mouse.h" 2





typedef struct SDL_Cursor SDL_Cursor;




typedef enum SDL_SystemCursor
{
    SDL_SYSTEM_CURSOR_ARROW,
    SDL_SYSTEM_CURSOR_IBEAM,
    SDL_SYSTEM_CURSOR_WAIT,
    SDL_SYSTEM_CURSOR_CROSSHAIR,
    SDL_SYSTEM_CURSOR_WAITARROW,
    SDL_SYSTEM_CURSOR_SIZENWSE,
    SDL_SYSTEM_CURSOR_SIZENESW,
    SDL_SYSTEM_CURSOR_SIZEWE,
    SDL_SYSTEM_CURSOR_SIZENS,
    SDL_SYSTEM_CURSOR_SIZEALL,
    SDL_SYSTEM_CURSOR_NO,
    SDL_SYSTEM_CURSOR_HAND,
    SDL_NUM_SYSTEM_CURSORS
} SDL_SystemCursor;




typedef enum SDL_MouseWheelDirection
{
    SDL_MOUSEWHEEL_NORMAL,
    SDL_MOUSEWHEEL_FLIPPED
} SDL_MouseWheelDirection;
# 81 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) SDL_Window * SDL_GetMouseFocus(void);
# 104 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_GetMouseState(int *x, int *y);
# 133 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_GetGlobalMouseState(int *x, int *y);
# 152 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_GetRelativeMouseState(int *x, int *y);
# 173 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) void SDL_WarpMouseInWindow(SDL_Window * window,
                                                   int x, int y);
# 196 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) int SDL_WarpMouseGlobal(int x, int y);
# 217 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) int SDL_SetRelativeMouseMode(SDL_bool enabled);
# 263 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) int SDL_CaptureMouse(SDL_bool enabled);
# 274 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GetRelativeMouseMode(void);
# 317 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) SDL_Cursor * SDL_CreateCursor(const Uint8 * data,
                                                     const Uint8 * mask,
                                                     int w, int h, int hot_x,
                                                     int hot_y);
# 336 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) SDL_Cursor * SDL_CreateColorCursor(SDL_Surface *surface,
                                                          int hot_x,
                                                          int hot_y);
# 351 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) SDL_Cursor * SDL_CreateSystemCursor(SDL_SystemCursor id);
# 369 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) void SDL_SetCursor(SDL_Cursor * cursor);
# 383 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) SDL_Cursor * SDL_GetCursor(void);
# 397 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) SDL_Cursor * SDL_GetDefaultCursor(void);
# 413 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) void SDL_FreeCursor(SDL_Cursor * cursor);
# 435 "/opt/homebrew/include/SDL2/SDL_mouse.h"
extern __attribute__ ((visibility("default"))) int SDL_ShowCursor(int toggle);
# 460 "/opt/homebrew/include/SDL2/SDL_mouse.h"
# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 461 "/opt/homebrew/include/SDL2/SDL_mouse.h" 2
# 36 "/opt/homebrew/include/SDL2/SDL_events.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_joystick.h" 1
# 50 "/opt/homebrew/include/SDL2/SDL_joystick.h"
# 1 "/opt/homebrew/include/SDL2/SDL_guid.h" 1
# 37 "/opt/homebrew/include/SDL2/SDL_guid.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 38 "/opt/homebrew/include/SDL2/SDL_guid.h" 2
# 62 "/opt/homebrew/include/SDL2/SDL_guid.h"
typedef struct SDL_GUID {
    Uint8 data[16];
} SDL_GUID;
# 81 "/opt/homebrew/include/SDL2/SDL_guid.h"
extern __attribute__ ((visibility("default"))) void SDL_GUIDToString(SDL_GUID guid, char *pszGUID, int cbGUID);
# 97 "/opt/homebrew/include/SDL2/SDL_guid.h"
extern __attribute__ ((visibility("default"))) SDL_GUID SDL_GUIDFromString(const char *pchGUID);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 104 "/opt/homebrew/include/SDL2/SDL_guid.h" 2
# 51 "/opt/homebrew/include/SDL2/SDL_joystick.h" 2


# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 54 "/opt/homebrew/include/SDL2/SDL_joystick.h" 2
# 77 "/opt/homebrew/include/SDL2/SDL_joystick.h"
struct _SDL_Joystick;
typedef struct _SDL_Joystick SDL_Joystick;






typedef SDL_GUID SDL_JoystickGUID;
# 96 "/opt/homebrew/include/SDL2/SDL_joystick.h"
typedef Sint32 SDL_JoystickID;

typedef enum
{
    SDL_JOYSTICK_TYPE_UNKNOWN,
    SDL_JOYSTICK_TYPE_GAMECONTROLLER,
    SDL_JOYSTICK_TYPE_WHEEL,
    SDL_JOYSTICK_TYPE_ARCADE_STICK,
    SDL_JOYSTICK_TYPE_FLIGHT_STICK,
    SDL_JOYSTICK_TYPE_DANCE_PAD,
    SDL_JOYSTICK_TYPE_GUITAR,
    SDL_JOYSTICK_TYPE_DRUM_KIT,
    SDL_JOYSTICK_TYPE_ARCADE_PAD,
    SDL_JOYSTICK_TYPE_THROTTLE
} SDL_JoystickType;

typedef enum
{
    SDL_JOYSTICK_POWER_UNKNOWN = -1,
    SDL_JOYSTICK_POWER_EMPTY,
    SDL_JOYSTICK_POWER_LOW,
    SDL_JOYSTICK_POWER_MEDIUM,
    SDL_JOYSTICK_POWER_FULL,
    SDL_JOYSTICK_POWER_WIRED,
    SDL_JOYSTICK_POWER_MAX
} SDL_JoystickPowerLevel;
# 148 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) void SDL_LockJoysticks(void) ;
# 163 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) void SDL_UnlockJoysticks(void) ;
# 177 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_NumJoysticks(void);
# 194 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) const char * SDL_JoystickNameForIndex(int device_index);
# 211 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) const char * SDL_JoystickPathForIndex(int device_index);







extern __attribute__ ((visibility("default"))) int SDL_JoystickGetDevicePlayerIndex(int device_index);
# 237 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index);
# 252 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_JoystickGetDeviceVendor(int device_index);
# 267 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_JoystickGetDeviceProduct(int device_index);
# 282 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_JoystickGetDeviceProductVersion(int device_index);
# 296 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_JoystickType SDL_JoystickGetDeviceType(int device_index);
# 310 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_JoystickID SDL_JoystickGetDeviceInstanceID(int device_index);
# 332 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_Joystick * SDL_JoystickOpen(int device_index);
# 343 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_Joystick * SDL_JoystickFromInstanceID(SDL_JoystickID instance_id);
# 354 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_Joystick * SDL_JoystickFromPlayerIndex(int player_index);
# 363 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickAttachVirtual(SDL_JoystickType type,
                                                      int naxes,
                                                      int nbuttons,
                                                      int nhats);
# 378 "/opt/homebrew/include/SDL2/SDL_joystick.h"
typedef struct SDL_VirtualJoystickDesc
{
    Uint16 version;
    Uint16 type;
    Uint16 naxes;
    Uint16 nbuttons;
    Uint16 nhats;
    Uint16 vendor_id;
    Uint16 product_id;
    Uint16 padding;
    Uint32 button_mask;

    Uint32 axis_mask;

    const char *name;

    void *userdata;
    void ( *Update)(void *userdata);
    void ( *SetPlayerIndex)(void *userdata, int player_index);
    int ( *Rumble)(void *userdata, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble);
    int ( *RumbleTriggers)(void *userdata, Uint16 left_rumble, Uint16 right_rumble);
    int ( *SetLED)(void *userdata, Uint8 red, Uint8 green, Uint8 blue);
    int ( *SendEffect)(void *userdata, const void *data, int size);

} SDL_VirtualJoystickDesc;
# 416 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickAttachVirtualEx(const SDL_VirtualJoystickDesc *desc);
# 427 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickDetachVirtual(int device_index);
# 437 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_JoystickIsVirtual(int device_index);
# 459 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickSetVirtualAxis(SDL_Joystick *joystick, int axis, Sint16 value);
# 477 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickSetVirtualButton(SDL_Joystick *joystick, int button, Uint8 value);
# 495 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickSetVirtualHat(SDL_Joystick *joystick, int hat, Uint8 value);
# 509 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) const char * SDL_JoystickName(SDL_Joystick *joystick);
# 522 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) const char * SDL_JoystickPath(SDL_Joystick *joystick);
# 535 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickGetPlayerIndex(SDL_Joystick *joystick);
# 546 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) void SDL_JoystickSetPlayerIndex(SDL_Joystick *joystick, int player_index);
# 563 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick *joystick);
# 575 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_JoystickGetVendor(SDL_Joystick *joystick);
# 587 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_JoystickGetProduct(SDL_Joystick *joystick);
# 599 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_JoystickGetProductVersion(SDL_Joystick *joystick);
# 612 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_JoystickGetFirmwareVersion(SDL_Joystick *joystick);
# 625 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) const char * SDL_JoystickGetSerial(SDL_Joystick *joystick);
# 635 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_JoystickType SDL_JoystickGetType(SDL_Joystick *joystick);
# 652 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char *pszGUID, int cbGUID);
# 668 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_JoystickGUID SDL_JoystickGetGUIDFromString(const char *pchGUID);
# 687 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) void SDL_GetJoystickGUIDInfo(SDL_JoystickGUID guid, Uint16 *vendor, Uint16 *product, Uint16 *version, Uint16 *crc16);
# 701 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_JoystickGetAttached(SDL_Joystick *joystick);
# 714 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_JoystickID SDL_JoystickInstanceID(SDL_Joystick *joystick);
# 733 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickNumAxes(SDL_Joystick *joystick);
# 751 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickNumBalls(SDL_Joystick *joystick);
# 765 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickNumHats(SDL_Joystick *joystick);
# 779 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickNumButtons(SDL_Joystick *joystick);
# 791 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) void SDL_JoystickUpdate(void);
# 821 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickEventState(int state);
# 849 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Sint16 SDL_JoystickGetAxis(SDL_Joystick *joystick,
                                                   int axis);
# 866 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_JoystickGetAxisInitialState(SDL_Joystick *joystick,
                                                   int axis, Sint16 *state);
# 907 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint8 SDL_JoystickGetHat(SDL_Joystick *joystick,
                                                 int hat);
# 929 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickGetBall(SDL_Joystick *joystick,
                                                int ball, int *dx, int *dy);
# 944 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) Uint8 SDL_JoystickGetButton(SDL_Joystick *joystick,
                                                    int button);
# 965 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickRumble(SDL_Joystick *joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
# 990 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickRumbleTriggers(SDL_Joystick *joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
# 1003 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_JoystickHasLED(SDL_Joystick *joystick);
# 1015 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_JoystickHasRumble(SDL_Joystick *joystick);
# 1027 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_JoystickHasRumbleTriggers(SDL_Joystick *joystick);
# 1043 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickSetLED(SDL_Joystick *joystick, Uint8 red, Uint8 green, Uint8 blue);
# 1056 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickSendEffect(SDL_Joystick *joystick, const void *data, int size);
# 1067 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) void SDL_JoystickClose(SDL_Joystick *joystick);
# 1078 "/opt/homebrew/include/SDL2/SDL_joystick.h"
extern __attribute__ ((visibility("default"))) SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(SDL_Joystick *joystick);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 1085 "/opt/homebrew/include/SDL2/SDL_joystick.h" 2
# 37 "/opt/homebrew/include/SDL2/SDL_events.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h" 1
# 36 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
# 1 "/opt/homebrew/include/SDL2/SDL_sensor.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_sensor.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 35 "/opt/homebrew/include/SDL2/SDL_sensor.h" 2
# 50 "/opt/homebrew/include/SDL2/SDL_sensor.h"
struct _SDL_Sensor;
typedef struct _SDL_Sensor SDL_Sensor;
# 60 "/opt/homebrew/include/SDL2/SDL_sensor.h"
typedef Sint32 SDL_SensorID;
# 114 "/opt/homebrew/include/SDL2/SDL_sensor.h"
typedef enum SDL_SensorType
{
    SDL_SENSOR_INVALID = -1,
    SDL_SENSOR_UNKNOWN,
    SDL_SENSOR_ACCEL,
    SDL_SENSOR_GYRO,
    SDL_SENSOR_ACCEL_L,
    SDL_SENSOR_GYRO_L,
    SDL_SENSOR_ACCEL_R,
    SDL_SENSOR_GYRO_R
} SDL_SensorType;
# 150 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) void SDL_LockSensors(void);
extern __attribute__ ((visibility("default"))) void SDL_UnlockSensors(void);
# 160 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) int SDL_NumSensors(void);
# 170 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) const char * SDL_SensorGetDeviceName(int device_index);
# 181 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) SDL_SensorType SDL_SensorGetDeviceType(int device_index);
# 192 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) int SDL_SensorGetDeviceNonPortableType(int device_index);
# 202 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) SDL_SensorID SDL_SensorGetDeviceInstanceID(int device_index);
# 212 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) SDL_Sensor * SDL_SensorOpen(int device_index);
# 222 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) SDL_Sensor * SDL_SensorFromInstanceID(SDL_SensorID instance_id);
# 232 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) const char * SDL_SensorGetName(SDL_Sensor *sensor);
# 243 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) SDL_SensorType SDL_SensorGetType(SDL_Sensor *sensor);
# 253 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) int SDL_SensorGetNonPortableType(SDL_Sensor *sensor);
# 263 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) SDL_SensorID SDL_SensorGetInstanceID(SDL_Sensor *sensor);
# 277 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) int SDL_SensorGetData(SDL_Sensor *sensor, float *data, int num_values);
# 294 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) int SDL_SensorGetDataWithTimestamp(SDL_Sensor *sensor, Uint64 *timestamp, float *data, int num_values);
# 303 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) void SDL_SensorClose(SDL_Sensor *sensor);
# 316 "/opt/homebrew/include/SDL2/SDL_sensor.h"
extern __attribute__ ((visibility("default"))) void SDL_SensorUpdate(void);
# 325 "/opt/homebrew/include/SDL2/SDL_sensor.h"
# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 326 "/opt/homebrew/include/SDL2/SDL_sensor.h" 2
# 37 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h" 2


# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 40 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h" 2
# 60 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
struct _SDL_GameController;
typedef struct _SDL_GameController SDL_GameController;

typedef enum SDL_GameControllerType
{
    SDL_CONTROLLER_TYPE_UNKNOWN = 0,
    SDL_CONTROLLER_TYPE_XBOX360,
    SDL_CONTROLLER_TYPE_XBOXONE,
    SDL_CONTROLLER_TYPE_PS3,
    SDL_CONTROLLER_TYPE_PS4,
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO,
    SDL_CONTROLLER_TYPE_VIRTUAL,
    SDL_CONTROLLER_TYPE_PS5,
    SDL_CONTROLLER_TYPE_AMAZON_LUNA,
    SDL_CONTROLLER_TYPE_GOOGLE_STADIA,
    SDL_CONTROLLER_TYPE_NVIDIA_SHIELD,
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT,
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT,
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR,
    SDL_CONTROLLER_TYPE_MAX
} SDL_GameControllerType;

typedef enum SDL_GameControllerBindType
{
    SDL_CONTROLLER_BINDTYPE_NONE = 0,
    SDL_CONTROLLER_BINDTYPE_BUTTON,
    SDL_CONTROLLER_BINDTYPE_AXIS,
    SDL_CONTROLLER_BINDTYPE_HAT
} SDL_GameControllerBindType;




typedef struct SDL_GameControllerButtonBind
{
    SDL_GameControllerBindType bindType;
    union
    {
        int button;
        int axis;
        struct {
            int hat;
            int hat_mask;
        } hat;
    } value;

} SDL_GameControllerButtonBind;
# 173 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerAddMappingsFromRW(SDL_RWops * rw, int freerw);
# 215 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerAddMapping(const char* mappingString);
# 224 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerNumMappings(void);
# 234 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) char * SDL_GameControllerMappingForIndex(int mapping_index);
# 250 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) char * SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid);
# 269 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) char * SDL_GameControllerMapping(SDL_GameController *gamecontroller);
# 287 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IsGameController(int joystick_index);
# 308 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GameControllerNameForIndex(int joystick_index);
# 327 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GameControllerPathForIndex(int joystick_index);
# 340 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);
# 354 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) char * SDL_GameControllerMappingForDeviceIndex(int joystick_index);
# 378 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameController * SDL_GameControllerOpen(int joystick_index);
# 389 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameController * SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);
# 406 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameController * SDL_GameControllerFromPlayerIndex(int player_index);
# 424 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GameControllerName(SDL_GameController *gamecontroller);
# 441 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GameControllerPath(SDL_GameController *gamecontroller);
# 454 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameControllerType SDL_GameControllerGetType(SDL_GameController *gamecontroller);
# 466 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerGetPlayerIndex(SDL_GameController *gamecontroller);
# 477 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) void SDL_GameControllerSetPlayerIndex(SDL_GameController *gamecontroller, int player_index);
# 489 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_GameControllerGetVendor(SDL_GameController *gamecontroller);
# 501 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_GameControllerGetProduct(SDL_GameController *gamecontroller);
# 513 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_GameControllerGetProductVersion(SDL_GameController *gamecontroller);
# 525 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) Uint16 SDL_GameControllerGetFirmwareVersion(SDL_GameController *gamecontroller);
# 538 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GameControllerGetSerial(SDL_GameController *gamecontroller);
# 551 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) Uint64 SDL_GameControllerGetSteamHandle(SDL_GameController *gamecontroller);
# 567 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GameControllerGetAttached(SDL_GameController *gamecontroller);
# 588 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_Joystick * SDL_GameControllerGetJoystick(SDL_GameController *gamecontroller);
# 608 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerEventState(int state);
# 619 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) void SDL_GameControllerUpdate(void);
# 635 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
typedef enum SDL_GameControllerAxis
{
    SDL_CONTROLLER_AXIS_INVALID = -1,
    SDL_CONTROLLER_AXIS_LEFTX,
    SDL_CONTROLLER_AXIS_LEFTY,
    SDL_CONTROLLER_AXIS_RIGHTX,
    SDL_CONTROLLER_AXIS_RIGHTY,
    SDL_CONTROLLER_AXIS_TRIGGERLEFT,
    SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
    SDL_CONTROLLER_AXIS_MAX
} SDL_GameControllerAxis;
# 667 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(const char *str);
# 683 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char* SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);
# 698 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameControllerButtonBind
SDL_GameControllerGetBindForAxis(SDL_GameController *gamecontroller,
                                 SDL_GameControllerAxis axis);
# 714 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool
SDL_GameControllerHasAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis);
# 738 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) Sint16
SDL_GameControllerGetAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis);




typedef enum SDL_GameControllerButton
{
    SDL_CONTROLLER_BUTTON_INVALID = -1,
    SDL_CONTROLLER_BUTTON_A,
    SDL_CONTROLLER_BUTTON_B,
    SDL_CONTROLLER_BUTTON_X,
    SDL_CONTROLLER_BUTTON_Y,
    SDL_CONTROLLER_BUTTON_BACK,
    SDL_CONTROLLER_BUTTON_GUIDE,
    SDL_CONTROLLER_BUTTON_START,
    SDL_CONTROLLER_BUTTON_LEFTSTICK,
    SDL_CONTROLLER_BUTTON_RIGHTSTICK,
    SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
    SDL_CONTROLLER_BUTTON_DPAD_UP,
    SDL_CONTROLLER_BUTTON_DPAD_DOWN,
    SDL_CONTROLLER_BUTTON_DPAD_LEFT,
    SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
    SDL_CONTROLLER_BUTTON_MISC1,
    SDL_CONTROLLER_BUTTON_PADDLE1,
    SDL_CONTROLLER_BUTTON_PADDLE2,
    SDL_CONTROLLER_BUTTON_PADDLE3,
    SDL_CONTROLLER_BUTTON_PADDLE4,
    SDL_CONTROLLER_BUTTON_TOUCHPAD,
    SDL_CONTROLLER_BUTTON_MAX
} SDL_GameControllerButton;
# 785 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameControllerButton SDL_GameControllerGetButtonFromString(const char *str);
# 801 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char* SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);
# 816 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_GameControllerButtonBind
SDL_GameControllerGetBindForButton(SDL_GameController *gamecontroller,
                                   SDL_GameControllerButton button);
# 832 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GameControllerHasButton(SDL_GameController *gamecontroller,
                                                             SDL_GameControllerButton button);
# 847 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) Uint8 SDL_GameControllerGetButton(SDL_GameController *gamecontroller,
                                                          SDL_GameControllerButton button);






extern __attribute__ ((visibility("default"))) int SDL_GameControllerGetNumTouchpads(SDL_GameController *gamecontroller);







extern __attribute__ ((visibility("default"))) int SDL_GameControllerGetNumTouchpadFingers(SDL_GameController *gamecontroller, int touchpad);






extern __attribute__ ((visibility("default"))) int SDL_GameControllerGetTouchpadFinger(SDL_GameController *gamecontroller, int touchpad, int finger, Uint8 *state, float *x, float *y, float *pressure);
# 881 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GameControllerHasSensor(SDL_GameController *gamecontroller, SDL_SensorType type);
# 893 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerSetSensorEnabled(SDL_GameController *gamecontroller, SDL_SensorType type, SDL_bool enabled);
# 904 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GameControllerIsSensorEnabled(SDL_GameController *gamecontroller, SDL_SensorType type);
# 916 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) float SDL_GameControllerGetSensorDataRate(SDL_GameController *gamecontroller, SDL_SensorType type);
# 932 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerGetSensorData(SDL_GameController *gamecontroller, SDL_SensorType type, float *data, int num_values);
# 951 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerGetSensorDataWithTimestamp(SDL_GameController *gamecontroller, SDL_SensorType type, Uint64 *timestamp, float *data, int num_values);
# 971 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerRumble(SDL_GameController *gamecontroller, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
# 996 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerRumbleTriggers(SDL_GameController *gamecontroller, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
# 1007 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GameControllerHasLED(SDL_GameController *gamecontroller);
# 1020 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GameControllerHasRumble(SDL_GameController *gamecontroller);
# 1033 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GameControllerHasRumbleTriggers(SDL_GameController *gamecontroller);
# 1046 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerSetLED(SDL_GameController *gamecontroller, Uint8 red, Uint8 green, Uint8 blue);
# 1059 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) int SDL_GameControllerSendEffect(SDL_GameController *gamecontroller, const void *data, int size);
# 1071 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) void SDL_GameControllerClose(SDL_GameController *gamecontroller);
# 1085 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char* SDL_GameControllerGetAppleSFSymbolsNameForButton(SDL_GameController *gamecontroller, SDL_GameControllerButton button);
# 1099 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h"
extern __attribute__ ((visibility("default"))) const char* SDL_GameControllerGetAppleSFSymbolsNameForAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 1107 "/opt/homebrew/include/SDL2/SDL_gamecontroller.h" 2
# 38 "/opt/homebrew/include/SDL2/SDL_events.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_quit.h" 1
# 39 "/opt/homebrew/include/SDL2/SDL_events.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_gesture.h" 1
# 35 "/opt/homebrew/include/SDL2/SDL_gesture.h"
# 1 "/opt/homebrew/include/SDL2/SDL_touch.h" 1
# 35 "/opt/homebrew/include/SDL2/SDL_touch.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 36 "/opt/homebrew/include/SDL2/SDL_touch.h" 2





typedef Sint64 SDL_TouchID;
typedef Sint64 SDL_FingerID;

typedef enum
{
    SDL_TOUCH_DEVICE_INVALID = -1,
    SDL_TOUCH_DEVICE_DIRECT,
    SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE,
    SDL_TOUCH_DEVICE_INDIRECT_RELATIVE
} SDL_TouchDeviceType;

typedef struct SDL_Finger
{
    SDL_FingerID id;
    float x;
    float y;
    float pressure;
} SDL_Finger;
# 83 "/opt/homebrew/include/SDL2/SDL_touch.h"
extern __attribute__ ((visibility("default"))) int SDL_GetNumTouchDevices(void);
# 96 "/opt/homebrew/include/SDL2/SDL_touch.h"
extern __attribute__ ((visibility("default"))) SDL_TouchID SDL_GetTouchDevice(int index);







extern __attribute__ ((visibility("default"))) const char* SDL_GetTouchName(int index);






extern __attribute__ ((visibility("default"))) SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);
# 124 "/opt/homebrew/include/SDL2/SDL_touch.h"
extern __attribute__ ((visibility("default"))) int SDL_GetNumTouchFingers(SDL_TouchID touchID);
# 140 "/opt/homebrew/include/SDL2/SDL_touch.h"
extern __attribute__ ((visibility("default"))) SDL_Finger * SDL_GetTouchFinger(SDL_TouchID touchID, int index);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 147 "/opt/homebrew/include/SDL2/SDL_touch.h" 2
# 36 "/opt/homebrew/include/SDL2/SDL_gesture.h" 2


# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 39 "/opt/homebrew/include/SDL2/SDL_gesture.h" 2





typedef Sint64 SDL_GestureID;
# 61 "/opt/homebrew/include/SDL2/SDL_gesture.h"
extern __attribute__ ((visibility("default"))) int SDL_RecordGesture(SDL_TouchID touchId);
# 76 "/opt/homebrew/include/SDL2/SDL_gesture.h"
extern __attribute__ ((visibility("default"))) int SDL_SaveAllDollarTemplates(SDL_RWops *dst);
# 91 "/opt/homebrew/include/SDL2/SDL_gesture.h"
extern __attribute__ ((visibility("default"))) int SDL_SaveDollarTemplate(SDL_GestureID gestureId,SDL_RWops *dst);
# 107 "/opt/homebrew/include/SDL2/SDL_gesture.h"
extern __attribute__ ((visibility("default"))) int SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops *src);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 114 "/opt/homebrew/include/SDL2/SDL_gesture.h" 2
# 40 "/opt/homebrew/include/SDL2/SDL_events.h" 2


# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 43 "/opt/homebrew/include/SDL2/SDL_events.h" 2
# 55 "/opt/homebrew/include/SDL2/SDL_events.h"
typedef enum SDL_EventType
{
    SDL_FIRSTEVENT = 0,


    SDL_QUIT = 0x100,


    SDL_APP_TERMINATING,



    SDL_APP_LOWMEMORY,



    SDL_APP_WILLENTERBACKGROUND,



    SDL_APP_DIDENTERBACKGROUND,



    SDL_APP_WILLENTERFOREGROUND,



    SDL_APP_DIDENTERFOREGROUND,




    SDL_LOCALECHANGED,


    SDL_DISPLAYEVENT = 0x150,


    SDL_WINDOWEVENT = 0x200,
    SDL_SYSWMEVENT,


    SDL_KEYDOWN = 0x300,
    SDL_KEYUP,
    SDL_TEXTEDITING,
    SDL_TEXTINPUT,
    SDL_KEYMAPCHANGED,


    SDL_TEXTEDITING_EXT,


    SDL_MOUSEMOTION = 0x400,
    SDL_MOUSEBUTTONDOWN,
    SDL_MOUSEBUTTONUP,
    SDL_MOUSEWHEEL,


    SDL_JOYAXISMOTION = 0x600,
    SDL_JOYBALLMOTION,
    SDL_JOYHATMOTION,
    SDL_JOYBUTTONDOWN,
    SDL_JOYBUTTONUP,
    SDL_JOYDEVICEADDED,
    SDL_JOYDEVICEREMOVED,
    SDL_JOYBATTERYUPDATED,


    SDL_CONTROLLERAXISMOTION = 0x650,
    SDL_CONTROLLERBUTTONDOWN,
    SDL_CONTROLLERBUTTONUP,
    SDL_CONTROLLERDEVICEADDED,
    SDL_CONTROLLERDEVICEREMOVED,
    SDL_CONTROLLERDEVICEREMAPPED,
    SDL_CONTROLLERTOUCHPADDOWN,
    SDL_CONTROLLERTOUCHPADMOTION,
    SDL_CONTROLLERTOUCHPADUP,
    SDL_CONTROLLERSENSORUPDATE,
    SDL_CONTROLLERUPDATECOMPLETE_RESERVED_FOR_SDL3,
    SDL_CONTROLLERSTEAMHANDLEUPDATED,


    SDL_FINGERDOWN = 0x700,
    SDL_FINGERUP,
    SDL_FINGERMOTION,


    SDL_DOLLARGESTURE = 0x800,
    SDL_DOLLARRECORD,
    SDL_MULTIGESTURE,


    SDL_CLIPBOARDUPDATE = 0x900,


    SDL_DROPFILE = 0x1000,
    SDL_DROPTEXT,
    SDL_DROPBEGIN,
    SDL_DROPCOMPLETE,


    SDL_AUDIODEVICEADDED = 0x1100,
    SDL_AUDIODEVICEREMOVED,


    SDL_SENSORUPDATE = 0x1200,


    SDL_RENDER_TARGETS_RESET = 0x2000,
    SDL_RENDER_DEVICE_RESET,


    SDL_POLLSENTINEL = 0x7F00,




    SDL_USEREVENT = 0x8000,




    SDL_LASTEVENT = 0xFFFF
} SDL_EventType;




typedef struct SDL_CommonEvent
{
    Uint32 type;
    Uint32 timestamp;
} SDL_CommonEvent;




typedef struct SDL_DisplayEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 display;
    Uint8 event;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint32 data1;
} SDL_DisplayEvent;




typedef struct SDL_WindowEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint8 event;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint32 data1;
    Sint32 data2;
} SDL_WindowEvent;




typedef struct SDL_KeyboardEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint8 state;
    Uint8 repeat;
    Uint8 padding2;
    Uint8 padding3;
    SDL_Keysym keysym;
} SDL_KeyboardEvent;






typedef struct SDL_TextEditingEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    char text[(32)];
    Sint32 start;
    Sint32 length;
} SDL_TextEditingEvent;





typedef struct SDL_TextEditingExtEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    char* text;
    Sint32 start;
    Sint32 length;
} SDL_TextEditingExtEvent;
# 288 "/opt/homebrew/include/SDL2/SDL_events.h"
typedef struct SDL_TextInputEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    char text[(32)];
} SDL_TextInputEvent;




typedef struct SDL_MouseMotionEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Uint32 state;
    Sint32 x;
    Sint32 y;
    Sint32 xrel;
    Sint32 yrel;
} SDL_MouseMotionEvent;




typedef struct SDL_MouseButtonEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Uint8 button;
    Uint8 state;
    Uint8 clicks;
    Uint8 padding1;
    Sint32 x;
    Sint32 y;
} SDL_MouseButtonEvent;




typedef struct SDL_MouseWheelEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Sint32 x;
    Sint32 y;
    Uint32 direction;
    float preciseX;
    float preciseY;
    Sint32 mouseX;
    Sint32 mouseY;
} SDL_MouseWheelEvent;




typedef struct SDL_JoyAxisEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 axis;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 value;
    Uint16 padding4;
} SDL_JoyAxisEvent;




typedef struct SDL_JoyBallEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 ball;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 xrel;
    Sint16 yrel;
} SDL_JoyBallEvent;




typedef struct SDL_JoyHatEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 hat;
    Uint8 value;






    Uint8 padding1;
    Uint8 padding2;
} SDL_JoyHatEvent;




typedef struct SDL_JoyButtonEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 button;
    Uint8 state;
    Uint8 padding1;
    Uint8 padding2;
} SDL_JoyButtonEvent;
# 421 "/opt/homebrew/include/SDL2/SDL_events.h"
typedef struct SDL_JoyDeviceEvent
{
    Uint32 type;
    Uint32 timestamp;
    Sint32 which;
} SDL_JoyDeviceEvent;




typedef struct SDL_JoyBatteryEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    SDL_JoystickPowerLevel level;
} SDL_JoyBatteryEvent;




typedef struct SDL_ControllerAxisEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 axis;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 value;
    Uint16 padding4;
} SDL_ControllerAxisEvent;





typedef struct SDL_ControllerButtonEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 button;
    Uint8 state;
    Uint8 padding1;
    Uint8 padding2;
} SDL_ControllerButtonEvent;
# 480 "/opt/homebrew/include/SDL2/SDL_events.h"
typedef struct SDL_ControllerDeviceEvent
{
    Uint32 type;
    Uint32 timestamp;
    Sint32 which;
} SDL_ControllerDeviceEvent;




typedef struct SDL_ControllerTouchpadEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Sint32 touchpad;
    Sint32 finger;
    float x;
    float y;
    float pressure;
} SDL_ControllerTouchpadEvent;




typedef struct SDL_ControllerSensorEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Sint32 sensor;
    float data[3];
    Uint64 timestamp_us;
} SDL_ControllerSensorEvent;




typedef struct SDL_AudioDeviceEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 which;
    Uint8 iscapture;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_AudioDeviceEvent;





typedef struct SDL_TouchFingerEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    SDL_FingerID fingerId;
    float x;
    float y;
    float dx;
    float dy;
    float pressure;
    Uint32 windowID;
} SDL_TouchFingerEvent;





typedef struct SDL_MultiGestureEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    float dTheta;
    float dDist;
    float x;
    float y;
    Uint16 numFingers;
    Uint16 padding;
} SDL_MultiGestureEvent;





typedef struct SDL_DollarGestureEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    SDL_GestureID gestureId;
    Uint32 numFingers;
    float error;
    float x;
    float y;
} SDL_DollarGestureEvent;
# 588 "/opt/homebrew/include/SDL2/SDL_events.h"
typedef struct SDL_DropEvent
{
    Uint32 type;
    Uint32 timestamp;
    char *file;
    Uint32 windowID;
} SDL_DropEvent;





typedef struct SDL_SensorEvent
{
    Uint32 type;
    Uint32 timestamp;
    Sint32 which;
    float data[6];
    Uint64 timestamp_us;
} SDL_SensorEvent;




typedef struct SDL_QuitEvent
{
    Uint32 type;
    Uint32 timestamp;
} SDL_QuitEvent;




typedef struct SDL_UserEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Sint32 code;
    void *data1;
    void *data2;
} SDL_UserEvent;


struct SDL_SysWMmsg;
typedef struct SDL_SysWMmsg SDL_SysWMmsg;
# 642 "/opt/homebrew/include/SDL2/SDL_events.h"
typedef struct SDL_SysWMEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_SysWMmsg *msg;
} SDL_SysWMEvent;







typedef union SDL_Event
{
    Uint32 type;
    SDL_CommonEvent common;
    SDL_DisplayEvent display;
    SDL_WindowEvent window;
    SDL_KeyboardEvent key;
    SDL_TextEditingEvent edit;
    SDL_TextEditingExtEvent editExt;
    SDL_TextInputEvent text;
    SDL_MouseMotionEvent motion;
    SDL_MouseButtonEvent button;
    SDL_MouseWheelEvent wheel;
    SDL_JoyAxisEvent jaxis;
    SDL_JoyBallEvent jball;
    SDL_JoyHatEvent jhat;
    SDL_JoyButtonEvent jbutton;
    SDL_JoyDeviceEvent jdevice;
    SDL_JoyBatteryEvent jbattery;
    SDL_ControllerAxisEvent caxis;
    SDL_ControllerButtonEvent cbutton;
    SDL_ControllerDeviceEvent cdevice;
    SDL_ControllerTouchpadEvent ctouchpad;
    SDL_ControllerSensorEvent csensor;
    SDL_AudioDeviceEvent adevice;
    SDL_SensorEvent sensor;
    SDL_QuitEvent quit;
    SDL_UserEvent user;
    SDL_SysWMEvent syswm;
    SDL_TouchFingerEvent tfinger;
    SDL_MultiGestureEvent mgesture;
    SDL_DollarGestureEvent dgesture;
    SDL_DropEvent drop;
# 702 "/opt/homebrew/include/SDL2/SDL_events.h"
    Uint8 padding[sizeof(void *) <= 8 ? 56 : sizeof(void *) == 16 ? 64 : 3 * sizeof(void *)];
} SDL_Event;


_Static_assert(sizeof(SDL_Event) == sizeof(((SDL_Event *)((void *)0))->padding), "sizeof(SDL_Event) == sizeof(((SDL_Event *)NULL)->padding)");
# 733 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) void SDL_PumpEvents(void);


typedef enum SDL_eventaction
{
    SDL_ADDEVENT,
    SDL_PEEKEVENT,
    SDL_GETEVENT
} SDL_eventaction;
# 781 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) int SDL_PeepEvents(SDL_Event * events, int numevents,
                                           SDL_eventaction action,
                                           Uint32 minType, Uint32 maxType);
# 800 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasEvent(Uint32 type);
# 819 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_HasEvents(Uint32 minType, Uint32 maxType);
# 841 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) void SDL_FlushEvent(Uint32 type);
# 866 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) void SDL_FlushEvents(Uint32 minType, Uint32 maxType);
# 913 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) int SDL_PollEvent(SDL_Event * event);
# 935 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) int SDL_WaitEvent(SDL_Event * event);
# 961 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) int SDL_WaitEventTimeout(SDL_Event * event,
                                                 int timeout);
# 996 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) int SDL_PushEvent(SDL_Event * event);
# 1010 "/opt/homebrew/include/SDL2/SDL_events.h"
typedef int ( * SDL_EventFilter) (void *userdata, SDL_Event * event);
# 1054 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) void SDL_SetEventFilter(SDL_EventFilter filter,
                                                void *userdata);
# 1072 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GetEventFilter(SDL_EventFilter * filter,
                                                    void **userdata);
# 1101 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) void SDL_AddEventWatch(SDL_EventFilter filter,
                                               void *userdata);
# 1117 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) void SDL_DelEventWatch(SDL_EventFilter filter,
                                               void *userdata);
# 1136 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) void SDL_FilterEvents(SDL_EventFilter filter,
                                              void *userdata);
# 1164 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) Uint8 SDL_EventState(Uint32 type, int state);
# 1186 "/opt/homebrew/include/SDL2/SDL_events.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_RegisterEvents(int numevents);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 1193 "/opt/homebrew/include/SDL2/SDL_events.h" 2
# 41 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_filesystem.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_filesystem.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_filesystem.h" 2
# 82 "/opt/homebrew/include/SDL2/SDL_filesystem.h"
extern __attribute__ ((visibility("default"))) char * SDL_GetBasePath(void);
# 139 "/opt/homebrew/include/SDL2/SDL_filesystem.h"
extern __attribute__ ((visibility("default"))) char * SDL_GetPrefPath(const char *org, const char *app);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 146 "/opt/homebrew/include/SDL2/SDL_filesystem.h" 2
# 42 "/opt/homebrew/include/SDL2/SDL.h" 2


# 1 "/opt/homebrew/include/SDL2/SDL_haptic.h" 1
# 116 "/opt/homebrew/include/SDL2/SDL_haptic.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 117 "/opt/homebrew/include/SDL2/SDL_haptic.h" 2
# 142 "/opt/homebrew/include/SDL2/SDL_haptic.h"
struct _SDL_Haptic;
typedef struct _SDL_Haptic SDL_Haptic;
# 466 "/opt/homebrew/include/SDL2/SDL_haptic.h"
typedef struct SDL_HapticDirection
{
    Uint8 type;
    Sint32 dir[3];
} SDL_HapticDirection;
# 484 "/opt/homebrew/include/SDL2/SDL_haptic.h"
typedef struct SDL_HapticConstant
{

    Uint16 type;
    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Sint16 level;


    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
} SDL_HapticConstant;
# 568 "/opt/homebrew/include/SDL2/SDL_haptic.h"
typedef struct SDL_HapticPeriodic
{

    Uint16 type;


    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Uint16 period;
    Sint16 magnitude;
    Sint16 offset;
    Uint16 phase;


    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
} SDL_HapticPeriodic;
# 622 "/opt/homebrew/include/SDL2/SDL_haptic.h"
typedef struct SDL_HapticCondition
{

    Uint16 type;

    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Uint16 right_sat[3];
    Uint16 left_sat[3];
    Sint16 right_coeff[3];
    Sint16 left_coeff[3];
    Uint16 deadband[3];
    Sint16 center[3];
} SDL_HapticCondition;
# 659 "/opt/homebrew/include/SDL2/SDL_haptic.h"
typedef struct SDL_HapticRamp
{

    Uint16 type;
    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Sint16 start;
    Sint16 end;


    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
} SDL_HapticRamp;
# 696 "/opt/homebrew/include/SDL2/SDL_haptic.h"
typedef struct SDL_HapticLeftRight
{

    Uint16 type;


    Uint32 length;


    Uint16 large_magnitude;
    Uint16 small_magnitude;
} SDL_HapticLeftRight;
# 724 "/opt/homebrew/include/SDL2/SDL_haptic.h"
typedef struct SDL_HapticCustom
{

    Uint16 type;
    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Uint8 channels;
    Uint16 period;
    Uint16 samples;
    Uint16 *data;


    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
} SDL_HapticCustom;
# 821 "/opt/homebrew/include/SDL2/SDL_haptic.h"
typedef union SDL_HapticEffect
{

    Uint16 type;
    SDL_HapticConstant constant;
    SDL_HapticPeriodic periodic;
    SDL_HapticCondition condition;
    SDL_HapticRamp ramp;
    SDL_HapticLeftRight leftright;
    SDL_HapticCustom custom;
} SDL_HapticEffect;
# 846 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_NumHaptics(void);
# 862 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) const char * SDL_HapticName(int device_index);
# 889 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) SDL_Haptic * SDL_HapticOpen(int device_index);
# 903 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticOpened(int device_index);
# 917 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticIndex(SDL_Haptic * haptic);
# 928 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_MouseIsHaptic(void);
# 941 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) SDL_Haptic * SDL_HapticOpenFromMouse(void);
# 955 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_JoystickIsHaptic(SDL_Joystick * joystick);
# 978 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) SDL_Haptic * SDL_HapticOpenFromJoystick(SDL_Joystick *
                                                               joystick);
# 990 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) void SDL_HapticClose(SDL_Haptic * haptic);
# 1008 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticNumEffects(SDL_Haptic * haptic);
# 1025 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticNumEffectsPlaying(SDL_Haptic * haptic);
# 1039 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) unsigned int SDL_HapticQuery(SDL_Haptic * haptic);
# 1054 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticNumAxes(SDL_Haptic * haptic);
# 1070 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticEffectSupported(SDL_Haptic * haptic,
                                                      SDL_HapticEffect *
                                                      effect);
# 1089 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticNewEffect(SDL_Haptic * haptic,
                                                SDL_HapticEffect * effect);
# 1113 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticUpdateEffect(SDL_Haptic * haptic,
                                                   int effect,
                                                   SDL_HapticEffect * data);
# 1139 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticRunEffect(SDL_Haptic * haptic,
                                                int effect,
                                                Uint32 iterations);
# 1158 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticStopEffect(SDL_Haptic * haptic,
                                                 int effect);
# 1174 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) void SDL_HapticDestroyEffect(SDL_Haptic * haptic,
                                                     int effect);
# 1192 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticGetEffectStatus(SDL_Haptic * haptic,
                                                      int effect);
# 1215 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticSetGain(SDL_Haptic * haptic, int gain);
# 1234 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticSetAutocenter(SDL_Haptic * haptic,
                                                    int autocenter);
# 1254 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticPause(SDL_Haptic * haptic);
# 1269 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticUnpause(SDL_Haptic * haptic);
# 1280 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticStopAll(SDL_Haptic * haptic);
# 1296 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticRumbleSupported(SDL_Haptic * haptic);
# 1312 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticRumbleInit(SDL_Haptic * haptic);
# 1329 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticRumblePlay(SDL_Haptic * haptic, float strength, Uint32 length );
# 1344 "/opt/homebrew/include/SDL2/SDL_haptic.h"
extern __attribute__ ((visibility("default"))) int SDL_HapticRumbleStop(SDL_Haptic * haptic);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 1351 "/opt/homebrew/include/SDL2/SDL_haptic.h" 2
# 45 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_hidapi.h" 1
# 58 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 59 "/opt/homebrew/include/SDL2/SDL_hidapi.h" 2








struct SDL_hid_device_;
typedef struct SDL_hid_device_ SDL_hid_device;






typedef struct SDL_hid_device_info
{

    char *path;

    unsigned short vendor_id;

    unsigned short product_id;

    wchar_t *serial_number;


    unsigned short release_number;

    wchar_t *manufacturer_string;

    wchar_t *product_string;


    unsigned short usage_page;


    unsigned short usage;






    int interface_number;



    int interface_class;
    int interface_subclass;
    int interface_protocol;


    struct SDL_hid_device_info *next;
} SDL_hid_device_info;
# 134 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_init(void);
# 148 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_exit(void);
# 169 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_hid_device_change_count(void);
# 191 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) SDL_hid_device_info * SDL_hid_enumerate(unsigned short vendor_id, unsigned short product_id);
# 203 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) void SDL_hid_free_enumeration(SDL_hid_device_info *devs);
# 221 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) SDL_hid_device * SDL_hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number);
# 235 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) SDL_hid_device * SDL_hid_open_path(const char *path, int bExclusive);
# 261 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_write(SDL_hid_device *dev, const unsigned char *data, size_t length);
# 282 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_read_timeout(SDL_hid_device *dev, unsigned char *data, size_t length, int milliseconds);
# 302 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_read(SDL_hid_device *dev, unsigned char *data, size_t length);
# 320 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_set_nonblocking(SDL_hid_device *dev, int nonblock);
# 344 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_send_feature_report(SDL_hid_device *dev, const unsigned char *data, size_t length);
# 366 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_get_feature_report(SDL_hid_device *dev, unsigned char *data, size_t length);
# 375 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) void SDL_hid_close(SDL_hid_device *dev);
# 387 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_get_manufacturer_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
# 399 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_get_product_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
# 411 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_get_serial_number_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
# 424 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) int SDL_hid_get_indexed_string(SDL_hid_device *dev, int string_index, wchar_t *string, size_t maxlen);
# 433 "/opt/homebrew/include/SDL2/SDL_hidapi.h"
extern __attribute__ ((visibility("default"))) void SDL_hid_ble_scan(SDL_bool active);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 440 "/opt/homebrew/include/SDL2/SDL_hidapi.h" 2
# 46 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_hints.h" 1
# 44 "/opt/homebrew/include/SDL2/SDL_hints.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 45 "/opt/homebrew/include/SDL2/SDL_hints.h" 2
# 3128 "/opt/homebrew/include/SDL2/SDL_hints.h"
typedef enum SDL_HintPriority
{
    SDL_HINT_DEFAULT,
    SDL_HINT_NORMAL,
    SDL_HINT_OVERRIDE
} SDL_HintPriority;
# 3153 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_SetHintWithPriority(const char *name,
                                                         const char *value,
                                                         SDL_HintPriority priority);
# 3173 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_SetHint(const char *name,
                                             const char *value);
# 3191 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_ResetHint(const char *name);
# 3206 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) void SDL_ResetHints(void);
# 3219 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetHint(const char *name);
# 3234 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_GetHintBoolean(const char *name, SDL_bool default_value);
# 3244 "/opt/homebrew/include/SDL2/SDL_hints.h"
typedef void ( *SDL_HintCallback)(void *userdata, const char *name, const char *oldValue, const char *newValue);
# 3258 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) void SDL_AddHintCallback(const char *name,
                                                 SDL_HintCallback callback,
                                                 void *userdata);
# 3274 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) void SDL_DelHintCallback(const char *name,
                                                 SDL_HintCallback callback,
                                                 void *userdata);
# 3292 "/opt/homebrew/include/SDL2/SDL_hints.h"
extern __attribute__ ((visibility("default"))) void SDL_ClearHints(void);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 3300 "/opt/homebrew/include/SDL2/SDL_hints.h" 2
# 47 "/opt/homebrew/include/SDL2/SDL.h" 2

# 1 "/opt/homebrew/include/SDL2/SDL_loadso.h" 1
# 49 "/opt/homebrew/include/SDL2/SDL_loadso.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 50 "/opt/homebrew/include/SDL2/SDL_loadso.h" 2
# 67 "/opt/homebrew/include/SDL2/SDL_loadso.h"
extern __attribute__ ((visibility("default"))) void * SDL_LoadObject(const char *sofile);
# 94 "/opt/homebrew/include/SDL2/SDL_loadso.h"
extern __attribute__ ((visibility("default"))) void * SDL_LoadFunction(void *handle,
                                               const char *name);
# 107 "/opt/homebrew/include/SDL2/SDL_loadso.h"
extern __attribute__ ((visibility("default"))) void SDL_UnloadObject(void *handle);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 114 "/opt/homebrew/include/SDL2/SDL_loadso.h" 2
# 49 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_log.h" 1
# 43 "/opt/homebrew/include/SDL2/SDL_log.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 44 "/opt/homebrew/include/SDL2/SDL_log.h" 2
# 64 "/opt/homebrew/include/SDL2/SDL_log.h"
typedef enum SDL_LogCategory
{
    SDL_LOG_CATEGORY_APPLICATION,
    SDL_LOG_CATEGORY_ERROR,
    SDL_LOG_CATEGORY_ASSERT,
    SDL_LOG_CATEGORY_SYSTEM,
    SDL_LOG_CATEGORY_AUDIO,
    SDL_LOG_CATEGORY_VIDEO,
    SDL_LOG_CATEGORY_RENDER,
    SDL_LOG_CATEGORY_INPUT,
    SDL_LOG_CATEGORY_TEST,


    SDL_LOG_CATEGORY_RESERVED1,
    SDL_LOG_CATEGORY_RESERVED2,
    SDL_LOG_CATEGORY_RESERVED3,
    SDL_LOG_CATEGORY_RESERVED4,
    SDL_LOG_CATEGORY_RESERVED5,
    SDL_LOG_CATEGORY_RESERVED6,
    SDL_LOG_CATEGORY_RESERVED7,
    SDL_LOG_CATEGORY_RESERVED8,
    SDL_LOG_CATEGORY_RESERVED9,
    SDL_LOG_CATEGORY_RESERVED10,
# 96 "/opt/homebrew/include/SDL2/SDL_log.h"
    SDL_LOG_CATEGORY_CUSTOM
} SDL_LogCategory;




typedef enum SDL_LogPriority
{
    SDL_LOG_PRIORITY_VERBOSE = 1,
    SDL_LOG_PRIORITY_DEBUG,
    SDL_LOG_PRIORITY_INFO,
    SDL_LOG_PRIORITY_WARN,
    SDL_LOG_PRIORITY_ERROR,
    SDL_LOG_PRIORITY_CRITICAL,
    SDL_NUM_LOG_PRIORITIES
} SDL_LogPriority;
# 123 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogSetAllPriority(SDL_LogPriority priority);
# 136 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogSetPriority(int category,
                                                SDL_LogPriority priority);
# 149 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) SDL_LogPriority SDL_LogGetPriority(int category);
# 161 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogResetPriorities(void);
# 182 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_Log( const char *fmt, ...) __attribute__ (( format( __printf__, 1, 1 +1 )));
# 203 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogVerbose(int category, const char *fmt, ...) __attribute__ (( format( __printf__, 2, 2 +1 )));
# 224 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogDebug(int category, const char *fmt, ...) __attribute__ (( format( __printf__, 2, 2 +1 )));
# 245 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogInfo(int category, const char *fmt, ...) __attribute__ (( format( __printf__, 2, 2 +1 )));
# 266 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogWarn(int category, const char *fmt, ...) __attribute__ (( format( __printf__, 2, 2 +1 )));
# 287 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogError(int category, const char *fmt, ...) __attribute__ (( format( __printf__, 2, 2 +1 )));
# 308 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogCritical(int category, const char *fmt, ...) __attribute__ (( format( __printf__, 2, 2 +1 )));
# 330 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogMessage(int category,
                                            SDL_LogPriority priority,
                                                                     const char *fmt, ...) __attribute__ (( format( __printf__, 3, 3 +1 )));
# 353 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogMessageV(int category,
                                             SDL_LogPriority priority,
                                                                      const char *fmt, va_list ap) __attribute__(( format( __printf__, 3, 0 )));
# 368 "/opt/homebrew/include/SDL2/SDL_log.h"
typedef void ( *SDL_LogOutputFunction)(void *userdata, int category, SDL_LogPriority priority, const char *message);
# 382 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback, void **userdata);
# 394 "/opt/homebrew/include/SDL2/SDL_log.h"
extern __attribute__ ((visibility("default"))) void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void *userdata);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 402 "/opt/homebrew/include/SDL2/SDL_log.h" 2
# 50 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_messagebox.h" 1
# 28 "/opt/homebrew/include/SDL2/SDL_messagebox.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 29 "/opt/homebrew/include/SDL2/SDL_messagebox.h" 2
# 39 "/opt/homebrew/include/SDL2/SDL_messagebox.h"
typedef enum SDL_MessageBoxFlags
{
    SDL_MESSAGEBOX_ERROR = 0x00000010,
    SDL_MESSAGEBOX_WARNING = 0x00000020,
    SDL_MESSAGEBOX_INFORMATION = 0x00000040,
    SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 0x00000080,
    SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 0x00000100
} SDL_MessageBoxFlags;




typedef enum SDL_MessageBoxButtonFlags
{
    SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,
    SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002
} SDL_MessageBoxButtonFlags;




typedef struct SDL_MessageBoxButtonData
{
    Uint32 flags;
    int buttonid;
    const char * text;
} SDL_MessageBoxButtonData;




typedef struct SDL_MessageBoxColor
{
    Uint8 r, g, b;
} SDL_MessageBoxColor;

typedef enum SDL_MessageBoxColorType
{
    SDL_MESSAGEBOX_COLOR_BACKGROUND,
    SDL_MESSAGEBOX_COLOR_TEXT,
    SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
    SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
    SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
    SDL_MESSAGEBOX_COLOR_MAX
} SDL_MessageBoxColorType;




typedef struct SDL_MessageBoxColorScheme
{
    SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_MAX];
} SDL_MessageBoxColorScheme;




typedef struct SDL_MessageBoxData
{
    Uint32 flags;
    SDL_Window *window;
    const char *title;
    const char *message;

    int numbuttons;
    const SDL_MessageBoxButtonData *buttons;

    const SDL_MessageBoxColorScheme *colorScheme;
} SDL_MessageBoxData;
# 143 "/opt/homebrew/include/SDL2/SDL_messagebox.h"
extern __attribute__ ((visibility("default"))) int SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
# 185 "/opt/homebrew/include/SDL2/SDL_messagebox.h"
extern __attribute__ ((visibility("default"))) int SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *message, SDL_Window *window);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 193 "/opt/homebrew/include/SDL2/SDL_messagebox.h" 2
# 51 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_metal.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_metal.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 35 "/opt/homebrew/include/SDL2/SDL_metal.h" 2
# 45 "/opt/homebrew/include/SDL2/SDL_metal.h"
typedef void *SDL_MetalView;
# 67 "/opt/homebrew/include/SDL2/SDL_metal.h"
extern __attribute__ ((visibility("default"))) SDL_MetalView SDL_Metal_CreateView(SDL_Window * window);
# 79 "/opt/homebrew/include/SDL2/SDL_metal.h"
extern __attribute__ ((visibility("default"))) void SDL_Metal_DestroyView(SDL_MetalView view);
# 88 "/opt/homebrew/include/SDL2/SDL_metal.h"
extern __attribute__ ((visibility("default"))) void * SDL_Metal_GetLayer(SDL_MetalView view);
# 103 "/opt/homebrew/include/SDL2/SDL_metal.h"
extern __attribute__ ((visibility("default"))) void SDL_Metal_GetDrawableSize(SDL_Window* window, int *w,
                                                       int *h);







# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 113 "/opt/homebrew/include/SDL2/SDL_metal.h" 2
# 52 "/opt/homebrew/include/SDL2/SDL.h" 2

# 1 "/opt/homebrew/include/SDL2/SDL_power.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_power.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_power.h" 2








typedef enum SDL_PowerState
{
    SDL_POWERSTATE_UNKNOWN,
    SDL_POWERSTATE_ON_BATTERY,
    SDL_POWERSTATE_NO_BATTERY,
    SDL_POWERSTATE_CHARGING,
    SDL_POWERSTATE_CHARGED
} SDL_PowerState;
# 77 "/opt/homebrew/include/SDL2/SDL_power.h"
extern __attribute__ ((visibility("default"))) SDL_PowerState SDL_GetPowerInfo(int *seconds, int *percent);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 84 "/opt/homebrew/include/SDL2/SDL_power.h" 2
# 54 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_render.h" 1
# 56 "/opt/homebrew/include/SDL2/SDL_render.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 57 "/opt/homebrew/include/SDL2/SDL_render.h" 2








typedef enum SDL_RendererFlags
{
    SDL_RENDERER_SOFTWARE = 0x00000001,
    SDL_RENDERER_ACCELERATED = 0x00000002,

    SDL_RENDERER_PRESENTVSYNC = 0x00000004,

    SDL_RENDERER_TARGETTEXTURE = 0x00000008

} SDL_RendererFlags;




typedef struct SDL_RendererInfo
{
    const char *name;
    Uint32 flags;
    Uint32 num_texture_formats;
    Uint32 texture_formats[16];
    int max_texture_width;
    int max_texture_height;
} SDL_RendererInfo;




typedef struct SDL_Vertex
{
    SDL_FPoint position;
    SDL_Color color;
    SDL_FPoint tex_coord;
} SDL_Vertex;




typedef enum SDL_ScaleMode
{
    SDL_ScaleModeNearest,
    SDL_ScaleModeLinear,
    SDL_ScaleModeBest
} SDL_ScaleMode;




typedef enum SDL_TextureAccess
{
    SDL_TEXTUREACCESS_STATIC,
    SDL_TEXTUREACCESS_STREAMING,
    SDL_TEXTUREACCESS_TARGET
} SDL_TextureAccess;




typedef enum SDL_TextureModulate
{
    SDL_TEXTUREMODULATE_NONE = 0x00000000,
    SDL_TEXTUREMODULATE_COLOR = 0x00000001,
    SDL_TEXTUREMODULATE_ALPHA = 0x00000002
} SDL_TextureModulate;




typedef enum SDL_RendererFlip
{
    SDL_FLIP_NONE = 0x00000000,
    SDL_FLIP_HORIZONTAL = 0x00000001,
    SDL_FLIP_VERTICAL = 0x00000002
} SDL_RendererFlip;




struct SDL_Renderer;
typedef struct SDL_Renderer SDL_Renderer;




struct SDL_Texture;
typedef struct SDL_Texture SDL_Texture;
# 170 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetNumRenderDrivers(void);
# 186 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetRenderDriverInfo(int index,
                                                    SDL_RendererInfo * info);
# 206 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_CreateWindowAndRenderer(
                                int width, int height, Uint32 window_flags,
                                SDL_Window **window, SDL_Renderer **renderer);
# 228 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_Renderer * SDL_CreateRenderer(SDL_Window * window,
                                               int index, Uint32 flags);
# 250 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_Renderer * SDL_CreateSoftwareRenderer(SDL_Surface * surface);
# 263 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_Renderer * SDL_GetRenderer(SDL_Window * window);
# 274 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_Window * SDL_RenderGetWindow(SDL_Renderer *renderer);
# 289 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetRendererInfo(SDL_Renderer * renderer,
                                                SDL_RendererInfo * info);
# 309 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetRendererOutputSize(SDL_Renderer * renderer,
                                                      int *w, int *h);
# 334 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_Texture * SDL_CreateTexture(SDL_Renderer * renderer,
                                                        Uint32 format,
                                                        int access, int w,
                                                        int h);
# 363 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer * renderer, SDL_Surface * surface);
# 387 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_QueryTexture(SDL_Texture * texture,
                                             Uint32 * format, int *access,
                                             int *w, int *h);
# 415 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_SetTextureColorMod(SDL_Texture * texture,
                                                   Uint8 r, Uint8 g, Uint8 b);
# 434 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetTextureColorMod(SDL_Texture * texture,
                                                   Uint8 * r, Uint8 * g,
                                                   Uint8 * b);
# 459 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_SetTextureAlphaMod(SDL_Texture * texture,
                                                   Uint8 alpha);
# 475 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetTextureAlphaMod(SDL_Texture * texture,
                                                   Uint8 * alpha);
# 494 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_SetTextureBlendMode(SDL_Texture * texture,
                                                    SDL_BlendMode blendMode);
# 509 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetTextureBlendMode(SDL_Texture * texture,
                                                    SDL_BlendMode *blendMode);
# 525 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_SetTextureScaleMode(SDL_Texture * texture,
                                                    SDL_ScaleMode scaleMode);
# 539 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetTextureScaleMode(SDL_Texture * texture,
                                                    SDL_ScaleMode *scaleMode);
# 553 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_SetTextureUserData(SDL_Texture * texture,
                                                   void *userdata);
# 567 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void * SDL_GetTextureUserData(SDL_Texture * texture);
# 598 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_UpdateTexture(SDL_Texture * texture,
                                              const SDL_Rect * rect,
                                              const void *pixels, int pitch);
# 629 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_UpdateYUVTexture(SDL_Texture * texture,
                                                 const SDL_Rect * rect,
                                                 const Uint8 *Yplane, int Ypitch,
                                                 const Uint8 *Uplane, int Upitch,
                                                 const Uint8 *Vplane, int Vpitch);
# 655 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_UpdateNVTexture(SDL_Texture * texture,
                                                 const SDL_Rect * rect,
                                                 const Uint8 *Yplane, int Ypitch,
                                                 const Uint8 *UVplane, int UVpitch);
# 687 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_LockTexture(SDL_Texture * texture,
                                            const SDL_Rect * rect,
                                            void **pixels, int *pitch);
# 723 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_LockTextureToSurface(SDL_Texture *texture,
                                            const SDL_Rect *rect,
                                            SDL_Surface **surface);
# 744 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_UnlockTexture(SDL_Texture * texture);
# 756 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_RenderTargetSupported(SDL_Renderer *renderer);
# 783 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_SetRenderTarget(SDL_Renderer *renderer,
                                                SDL_Texture *texture);
# 799 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_Texture * SDL_GetRenderTarget(SDL_Renderer *renderer);
# 827 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderSetLogicalSize(SDL_Renderer * renderer, int w, int h);
# 848 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_RenderGetLogicalSize(SDL_Renderer * renderer, int *w, int *h);
# 867 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderSetIntegerScale(SDL_Renderer * renderer,
                                                      SDL_bool enable);
# 881 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_RenderGetIntegerScale(SDL_Renderer * renderer);
# 899 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderSetViewport(SDL_Renderer * renderer,
                                                  const SDL_Rect * rect);
# 912 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_RenderGetViewport(SDL_Renderer * renderer,
                                                   SDL_Rect * rect);
# 930 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderSetClipRect(SDL_Renderer * renderer,
                                                  const SDL_Rect * rect);
# 946 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_RenderGetClipRect(SDL_Renderer * renderer,
                                                   SDL_Rect * rect);
# 961 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_RenderIsClipEnabled(SDL_Renderer * renderer);
# 986 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderSetScale(SDL_Renderer * renderer,
                                               float scaleX, float scaleY);
# 1000 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_RenderGetScale(SDL_Renderer * renderer,
                                               float *scaleX, float *scaleY);
# 1024 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_RenderWindowToLogical(SDL_Renderer * renderer,
                                                            int windowX, int windowY,
                                                            float *logicalX, float *logicalY);
# 1050 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_RenderLogicalToWindow(SDL_Renderer * renderer,
                                                            float logicalX, float logicalY,
                                                            int *windowX, int *windowY);
# 1083 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_SetRenderDrawColor(SDL_Renderer * renderer,
                                           Uint8 r, Uint8 g, Uint8 b,
                                           Uint8 a);
# 1106 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetRenderDrawColor(SDL_Renderer * renderer,
                                           Uint8 * r, Uint8 * g, Uint8 * b,
                                           Uint8 * a);
# 1132 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_SetRenderDrawBlendMode(SDL_Renderer * renderer,
                                                       SDL_BlendMode blendMode);
# 1147 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GetRenderDrawBlendMode(SDL_Renderer * renderer,
                                                       SDL_BlendMode *blendMode);
# 1164 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderClear(SDL_Renderer * renderer);
# 1191 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawPoint(SDL_Renderer * renderer,
                                                int x, int y);
# 1217 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawPoints(SDL_Renderer * renderer,
                                                 const SDL_Point * points,
                                                 int count);
# 1248 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawLine(SDL_Renderer * renderer,
                                               int x1, int y1, int x2, int y2);
# 1274 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawLines(SDL_Renderer * renderer,
                                                const SDL_Point * points,
                                                int count);
# 1300 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawRect(SDL_Renderer * renderer,
                                               const SDL_Rect * rect);
# 1326 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawRects(SDL_Renderer * renderer,
                                                const SDL_Rect * rects,
                                                int count);
# 1356 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderFillRect(SDL_Renderer * renderer,
                                               const SDL_Rect * rect);
# 1381 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderFillRects(SDL_Renderer * renderer,
                                                const SDL_Rect * rects,
                                                int count);
# 1414 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderCopy(SDL_Renderer * renderer,
                                           SDL_Texture * texture,
                                           const SDL_Rect * srcrect,
                                           const SDL_Rect * dstrect);
# 1459 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderCopyEx(SDL_Renderer * renderer,
                                           SDL_Texture * texture,
                                           const SDL_Rect * srcrect,
                                           const SDL_Rect * dstrect,
                                           const double angle,
                                           const SDL_Point *center,
                                           const SDL_RendererFlip flip);
# 1478 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawPointF(SDL_Renderer * renderer,
                                                 float x, float y);
# 1491 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawPointsF(SDL_Renderer * renderer,
                                                  const SDL_FPoint * points,
                                                  int count);
# 1507 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawLineF(SDL_Renderer * renderer,
                                                float x1, float y1, float x2, float y2);
# 1521 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawLinesF(SDL_Renderer * renderer,
                                                 const SDL_FPoint * points,
                                                 int count);
# 1535 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawRectF(SDL_Renderer * renderer,
                                                const SDL_FRect * rect);
# 1549 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderDrawRectsF(SDL_Renderer * renderer,
                                                 const SDL_FRect * rects,
                                                 int count);
# 1564 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderFillRectF(SDL_Renderer * renderer,
                                                const SDL_FRect * rect);
# 1578 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderFillRectsF(SDL_Renderer * renderer,
                                                 const SDL_FRect * rects,
                                                 int count);
# 1596 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderCopyF(SDL_Renderer * renderer,
                                            SDL_Texture * texture,
                                            const SDL_Rect * srcrect,
                                            const SDL_FRect * dstrect);
# 1622 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderCopyExF(SDL_Renderer * renderer,
                                            SDL_Texture * texture,
                                            const SDL_Rect * srcrect,
                                            const SDL_FRect * dstrect,
                                            const double angle,
                                            const SDL_FPoint *center,
                                            const SDL_RendererFlip flip);
# 1650 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderGeometry(SDL_Renderer *renderer,
                                               SDL_Texture *texture,
                                               const SDL_Vertex *vertices, int num_vertices,
                                               const int *indices, int num_indices);
# 1680 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderGeometryRaw(SDL_Renderer *renderer,
                                               SDL_Texture *texture,
                                               const float *xy, int xy_stride,
                                               const SDL_Color *color, int color_stride,
                                               const float *uv, int uv_stride,
                                               int num_vertices,
                                               const void *indices, int num_indices, int size_indices);
# 1714 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderReadPixels(SDL_Renderer * renderer,
                                                 const SDL_Rect * rect,
                                                 Uint32 format,
                                                 void *pixels, int pitch);
# 1760 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_RenderPresent(SDL_Renderer * renderer);
# 1775 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_DestroyTexture(SDL_Texture * texture);
# 1789 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void SDL_DestroyRenderer(SDL_Renderer * renderer);
# 1820 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderFlush(SDL_Renderer * renderer);
# 1858 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GL_BindTexture(SDL_Texture *texture, float *texw, float *texh);
# 1874 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_GL_UnbindTexture(SDL_Texture *texture);
# 1890 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void * SDL_RenderGetMetalLayer(SDL_Renderer * renderer);
# 1911 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) void * SDL_RenderGetMetalCommandEncoder(SDL_Renderer * renderer);
# 1922 "/opt/homebrew/include/SDL2/SDL_render.h"
extern __attribute__ ((visibility("default"))) int SDL_RenderSetVSync(SDL_Renderer* renderer, int vsync);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 1929 "/opt/homebrew/include/SDL2/SDL_render.h" 2
# 55 "/opt/homebrew/include/SDL2/SDL.h" 2


# 1 "/opt/homebrew/include/SDL2/SDL_shape.h" 1
# 31 "/opt/homebrew/include/SDL2/SDL_shape.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 32 "/opt/homebrew/include/SDL2/SDL_shape.h" 2
# 69 "/opt/homebrew/include/SDL2/SDL_shape.h"
extern __attribute__ ((visibility("default"))) SDL_Window * SDL_CreateShapedWindow(const char *title,unsigned int x,unsigned int y,unsigned int w,unsigned int h,Uint32 flags);
# 82 "/opt/homebrew/include/SDL2/SDL_shape.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IsShapedWindow(const SDL_Window *window);


typedef enum {

    ShapeModeDefault,

    ShapeModeBinarizeAlpha,

    ShapeModeReverseBinarizeAlpha,

    ShapeModeColorKey
} WindowShapeMode;




typedef union {

    Uint8 binarizationCutoff;
    SDL_Color colorKey;
} SDL_WindowShapeParams;


typedef struct SDL_WindowShapeMode {

    WindowShapeMode mode;

    SDL_WindowShapeParams parameters;
} SDL_WindowShapeMode;
# 128 "/opt/homebrew/include/SDL2/SDL_shape.h"
extern __attribute__ ((visibility("default"))) int SDL_SetWindowShape(SDL_Window *window,SDL_Surface *shape,SDL_WindowShapeMode *shape_mode);
# 147 "/opt/homebrew/include/SDL2/SDL_shape.h"
extern __attribute__ ((visibility("default"))) int SDL_GetShapedWindowMode(SDL_Window *window,SDL_WindowShapeMode *shape_mode);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 154 "/opt/homebrew/include/SDL2/SDL_shape.h" 2
# 58 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_system.h" 1
# 36 "/opt/homebrew/include/SDL2/SDL_system.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 37 "/opt/homebrew/include/SDL2/SDL_system.h" 2
# 585 "/opt/homebrew/include/SDL2/SDL_system.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_IsTablet(void);


extern __attribute__ ((visibility("default"))) void SDL_OnApplicationWillTerminate(void);
extern __attribute__ ((visibility("default"))) void SDL_OnApplicationDidReceiveMemoryWarning(void);
extern __attribute__ ((visibility("default"))) void SDL_OnApplicationWillResignActive(void);
extern __attribute__ ((visibility("default"))) void SDL_OnApplicationDidEnterBackground(void);
extern __attribute__ ((visibility("default"))) void SDL_OnApplicationWillEnterForeground(void);
extern __attribute__ ((visibility("default"))) void SDL_OnApplicationDidBecomeActive(void);
# 638 "/opt/homebrew/include/SDL2/SDL_system.h"
# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 639 "/opt/homebrew/include/SDL2/SDL_system.h" 2
# 59 "/opt/homebrew/include/SDL2/SDL.h" 2

# 1 "/opt/homebrew/include/SDL2/SDL_timer.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_timer.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 35 "/opt/homebrew/include/SDL2/SDL_timer.h" 2
# 58 "/opt/homebrew/include/SDL2/SDL_timer.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_GetTicks(void);
# 82 "/opt/homebrew/include/SDL2/SDL_timer.h"
extern __attribute__ ((visibility("default"))) Uint64 SDL_GetTicks64(void);
# 123 "/opt/homebrew/include/SDL2/SDL_timer.h"
extern __attribute__ ((visibility("default"))) Uint64 SDL_GetPerformanceCounter(void);
# 134 "/opt/homebrew/include/SDL2/SDL_timer.h"
extern __attribute__ ((visibility("default"))) Uint64 SDL_GetPerformanceFrequency(void);
# 147 "/opt/homebrew/include/SDL2/SDL_timer.h"
extern __attribute__ ((visibility("default"))) void SDL_Delay(Uint32 ms);
# 157 "/opt/homebrew/include/SDL2/SDL_timer.h"
typedef Uint32 ( * SDL_TimerCallback) (Uint32 interval, void *param);




typedef int SDL_TimerID;
# 196 "/opt/homebrew/include/SDL2/SDL_timer.h"
extern __attribute__ ((visibility("default"))) SDL_TimerID SDL_AddTimer(Uint32 interval,
                                                 SDL_TimerCallback callback,
                                                 void *param);
# 211 "/opt/homebrew/include/SDL2/SDL_timer.h"
extern __attribute__ ((visibility("default"))) SDL_bool SDL_RemoveTimer(SDL_TimerID id);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 219 "/opt/homebrew/include/SDL2/SDL_timer.h" 2
# 61 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_version.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_version.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_version.h" 2
# 50 "/opt/homebrew/include/SDL2/SDL_version.h"
typedef struct SDL_version
{
    Uint8 major;
    Uint8 minor;
    Uint8 patch;
} SDL_version;
# 142 "/opt/homebrew/include/SDL2/SDL_version.h"
extern __attribute__ ((visibility("default"))) void SDL_GetVersion(SDL_version * ver);
# 171 "/opt/homebrew/include/SDL2/SDL_version.h"
extern __attribute__ ((visibility("default"))) const char * SDL_GetRevision(void);
# 194 "/opt/homebrew/include/SDL2/SDL_version.h"
extern __attribute__((deprecated)) __attribute__ ((visibility("default"))) int SDL_GetRevisionNumber(void);






# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 202 "/opt/homebrew/include/SDL2/SDL_version.h" 2
# 62 "/opt/homebrew/include/SDL2/SDL.h" 2

# 1 "/opt/homebrew/include/SDL2/SDL_locale.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_locale.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 35 "/opt/homebrew/include/SDL2/SDL_locale.h" 2








typedef struct SDL_Locale
{
    const char *language;
    const char *country;
} SDL_Locale;
# 91 "/opt/homebrew/include/SDL2/SDL_locale.h"
extern __attribute__ ((visibility("default"))) SDL_Locale * SDL_GetPreferredLocales(void);







# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 100 "/opt/homebrew/include/SDL2/SDL_locale.h" 2
# 64 "/opt/homebrew/include/SDL2/SDL.h" 2
# 1 "/opt/homebrew/include/SDL2/SDL_misc.h" 1
# 33 "/opt/homebrew/include/SDL2/SDL_misc.h"
# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 34 "/opt/homebrew/include/SDL2/SDL_misc.h" 2
# 69 "/opt/homebrew/include/SDL2/SDL_misc.h"
extern __attribute__ ((visibility("default"))) int SDL_OpenURL(const char *url);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 76 "/opt/homebrew/include/SDL2/SDL_misc.h" 2
# 65 "/opt/homebrew/include/SDL2/SDL.h" 2

# 1 "/opt/homebrew/include/SDL2/begin_code.h" 1
# 67 "/opt/homebrew/include/SDL2/SDL.h" 2
# 145 "/opt/homebrew/include/SDL2/SDL.h"
extern __attribute__ ((visibility("default"))) int SDL_Init(Uint32 flags);
# 162 "/opt/homebrew/include/SDL2/SDL.h"
extern __attribute__ ((visibility("default"))) int SDL_InitSubSystem(Uint32 flags);
# 184 "/opt/homebrew/include/SDL2/SDL.h"
extern __attribute__ ((visibility("default"))) void SDL_QuitSubSystem(Uint32 flags);
# 200 "/opt/homebrew/include/SDL2/SDL.h"
extern __attribute__ ((visibility("default"))) Uint32 SDL_WasInit(Uint32 flags);
# 224 "/opt/homebrew/include/SDL2/SDL.h"
extern __attribute__ ((visibility("default"))) void SDL_Quit(void);





# 1 "/opt/homebrew/include/SDL2/close_code.h" 1
# 231 "/opt/homebrew/include/SDL2/SDL.h" 2
# 3 "sim_app/app.c" 2
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h" 1 3 4
# 4 "sim_app/app.c" 2

static int cur[(512 / 4) * (512 / 4)];
static int nxt[(512 / 4) * (512 / 4)];

static int idx(int x, int y) { return y * (512 / 4) + x; }

static int wrap(int v, int max) {
    if (v < 0)
        return v + max;
    if (v >= max)
        return v - max;
    return v;
}

static int neighbors(const int *a, int x, int y) {
    int xm = wrap(x - 1, (512 / 4)), xp = wrap(x + 1, (512 / 4));
    int ym = wrap(y - 1, (512 / 4)), yp = wrap(y + 1, (512 / 4));
    return a[idx(xm, ym)] + a[idx(x, ym)] + a[idx(xp, ym)] + a[idx(xm, y)] + a[idx(xp, y)] +
           a[idx(xm, yp)] + a[idx(x, yp)] + a[idx(xp, yp)];
}

static void step_generation(int *dst, const int *src) {
    for (int y = 0; y < (512 / 4); ++y) {
        for (int x = 0; x < (512 / 4); ++x) {
            int n = neighbors(src, x, y);
            int alive = src[idx(x, y)] != 0;
            int next_alive = alive ? (n == 2 || n == 3) : (n == 3);
            dst[idx(x, y)] = next_alive;
        }
    }
}

static void randomize(int permill) {
    for (int i = 0; i < (512 / 4) * (512 / 4); ++i)
        cur[i] = ((simRand() % 1000) < permill) ? 1 : 0;
}

static void clear_all(void) { __builtin___memset_chk (cur, 0, sizeof(cur), __builtin_object_size (cur, 0)); }

static void draw_cell(int cx, int cy, int argb) {
    int px = cx * 4;
    int py = cy * 4;
    for (int yy = 0; yy < 4; ++yy)
        for (int xx = 0; xx < 4; ++xx)
            simPutPixel(px + xx, py + yy, argb);
}

static void draw_frame(void) {
    const int ALIVE = 0xFFFFFFFF;
    const int DEAD = 0xFF000000;
    for (int y = 0; y < (512 / 4); ++y)
        for (int x = 0; x < (512 / 4); ++x)
            draw_cell(x, y, cur[idx(x, y)] ? ALIVE : DEAD);
}

void app(void) {
    clear_all();
    randomize(180);
    for (int step = 0; step < 1000; ++step) {
        draw_frame();
        simFlush();
        step_generation(nxt, cur);
        for (int i = 0; i < (512 / 4) * (512 / 4); ++i) {
            cur[i] = nxt[i];
        }
    }
}
